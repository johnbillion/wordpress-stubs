<?php
/**
 * Generated stub declarations for WordPress.
 * @see https://wordpress.org
 * @see https://github.com/php-stubs/wordpress-stubs
 */

namespace {
    #[\AllowDynamicProperties]
    class WP_Upgrader_Skin
    {
        /**
         * @var \WP_Upgrader
         */
        public $upgrader;
        /**
         * @var bool
         */
        public $done_header = \false;
        /**
         * @var bool
         */
        public $done_footer = \false;
        /**
         * @var string|bool|\WP_Error
         */
        public $result = \false;
        /**
         * @var array
         */
        public $options = array();
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @param \WP_Upgrader $upgrader
         */
        public function set_upgrader(&$upgrader)
        {
        }
        public function add_strings()
        {
        }
        /**
         * @param string|bool|\WP_Error $result
         */
        public function set_result($result)
        {
        }
        /**
         * @param bool|\WP_Error $error
         * @param string $context
         * @param bool $allow_relaxed_file_ownership
         * @return bool
         */
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * @phpstan-return void
         */
        public function header()
        {
        }
        /**
         * @phpstan-return void
         */
        public function footer()
        {
        }
        /**
         * @param string|\WP_Error $errors
         */
        public function error($errors)
        {
        }
        /**
         * @param string $feedback
         * @param mixed $args
         * @phpstan-return void
         */
        public function feedback($feedback, ...$args)
        {
        }
        public function before()
        {
        }
        public function after()
        {
        }
        /**
         * @param string $type
         * @phpstan-return void
         */
        protected function decrement_update_count($type)
        {
        }
        public function bulk_header()
        {
        }
        public function bulk_footer()
        {
        }
        /**
         * @param \WP_Error $wp_error
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
    }
    class Automatic_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        protected $messages = array();
        /**
         * @param bool|\WP_Error $error
         * @param string $context
         * @param bool $allow_relaxed_file_ownership
         * @return bool
         */
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * @return string[]
         */
        public function get_upgrade_messages()
        {
        }
        /**
         * @param string|array|\WP_Error $feedback
         * @param mixed $args
         * @phpstan-return void
         */
        public function feedback($feedback, ...$args)
        {
        }
        public function header()
        {
        }
        public function footer()
        {
        }
    }
    class Bulk_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        /**
         * @var bool
         */
        public $in_loop = \false;
        /**
         * @var string|false
         */
        public $error = \false;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function add_strings()
        {
        }
        /**
         * @param string $feedback
         * @param mixed $args
         * @phpstan-return void
         */
        public function feedback($feedback, ...$args)
        {
        }
        public function header()
        {
        }
        public function footer()
        {
        }
        /**
         * @param string|\WP_Error $errors
         */
        public function error($errors)
        {
        }
        public function bulk_header()
        {
        }
        public function bulk_footer()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        public function reset()
        {
        }
        public function flush_output()
        {
        }
    }
    class Bulk_Plugin_Upgrader_Skin extends \Bulk_Upgrader_Skin
    {
        /**
         * @var array
         */
        public $plugin_info = array();
        public function add_strings()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        public function bulk_footer()
        {
        }
    }
    class Bulk_Theme_Upgrader_Skin extends \Bulk_Upgrader_Skin
    {
        /**
         * @var \WP_Theme|false
         */
        public $theme_info = \false;
        public function add_strings()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        public function bulk_footer()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Upgrader
    {
        /**
         * @var array
         */
        public $strings = array();
        /**
         * @var \Automatic_Upgrader_Skin|\WP_Upgrader_Skin
         */
        public $skin = \null;
        /**
         * @phpstan-var \WP_Error|array{
         *   source: string,
         *   source_files: string,
         *   destination: string,
         *   destination_name: string,
         *   local_destination: string,
         *   remote_destination: string,
         *   clear_destination: bool,
         * }
         */
        public $result = array();
        /**
         * @var int
         */
        public $update_count = 0;
        /**
         * @var int
         */
        public $update_current = 0;
        /**
         * @param \WP_Upgrader_Skin $skin
         */
        public function __construct($skin = \null)
        {
        }
        public function init()
        {
        }
        protected function schedule_temp_backup_cleanup()
        {
        }
        public function generic_strings()
        {
        }
        /**
         * @param string[] $directories
         * @param bool $allow_relaxed_file_ownership
         * @return bool|\WP_Error
         */
        public function fs_connect($directories = array(), $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * @param string $package
         * @param bool $check_signatures
         * @param array $hook_extra
         * @return string|\WP_Error
         */
        public function download_package($package, $check_signatures = \false, $hook_extra = array())
        {
        }
        /**
         * @param string $package
         * @param bool $delete_package
         * @return string|\WP_Error
         */
        public function unpack_package($package, $delete_package = \true)
        {
        }
        /**
         * @param array $nested_files
         * @param string $path
         * @return array
         */
        protected function flatten_dirlist($nested_files, $path = '')
        {
        }
        /**
         * @param string $remote_destination
         * @return true|\WP_Error
         */
        public function clear_destination($remote_destination)
        {
        }
        /**
         * @phpstan-param array{
         *   source?: string,
         *   destination?: string,
         *   clear_destination?: bool,
         *   clear_working?: bool,
         *   abort_if_destination_exists?: bool,
         *   hook_extra?: array,
         * } $args
         * @return array|\WP_Error
         */
        public function install_package($args = array())
        {
        }
        /**
         * @phpstan-param array{
         *   package?: string,
         *   destination?: string,
         *   clear_destination?: bool,
         *   clear_working?: bool,
         *   abort_if_destination_exists?: bool,
         *   is_multi?: bool,
         *   hook_extra?: array,
         * } $options
         * @return array|false|\WP_Error
         */
        public function run($options)
        {
        }
        /**
         * @param bool $enable
         */
        public function maintenance_mode($enable = \false)
        {
        }
        /**
         * @param string $lock_name
         * @param int $release_timeout
         * @return bool
         */
        public static function create_lock($lock_name, $release_timeout = \null)
        {
        }
        /**
         * @param string $lock_name
         * @return bool
         */
        public static function release_lock($lock_name)
        {
        }
        /**
         * @phpstan-param array{
         *   slug?: string,
         *   src?: string,
         *   dir?: string,
         * } $args
         * @return bool|\WP_Error
         */
        public function move_to_temp_backup_dir($args)
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   dir: string,
         *   slug: string,
         *   src: string,
         * }> $temp_backups
         * @return bool|\WP_Error
         */
        public function restore_temp_backup(array $temp_backups = array())
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   dir: string,
         *   slug: string,
         *   src: string,
         * }> $temp_backups
         * @return bool|\WP_Error
         */
        public function delete_temp_backup(array $temp_backups = array())
        {
        }
    }
    class Core_Upgrader extends \WP_Upgrader
    {
        public function upgrade_strings()
        {
        }
        /**
         * @param object $current
         * @phpstan-param array{
         *   pre_check_md5?: bool,
         *   attempt_rollback?: bool,
         *   do_rollback?: bool,
         * } $args
         * @return string|false|\WP_Error
         */
        public function upgrade($current, $args = array())
        {
        }
        /**
         * @param string $offered_ver
         * @return bool
         */
        public static function should_update_to_version($offered_ver)
        {
        }
        /**
         * @return bool
         */
        public function check_files()
        {
        }
    }
    #[\AllowDynamicProperties]
    class Custom_Background
    {
        /**
         * @var callable
         */
        public $admin_header_callback;
        /**
         * @var callable
         */
        public $admin_image_div_callback;
        /**
         * @param callable $admin_header_callback
         * @param callable $admin_image_div_callback
         */
        public function __construct($admin_header_callback = '', $admin_image_div_callback = '')
        {
        }
        /**
         * @phpstan-return void
         */
        public function init()
        {
        }
        public function admin_load()
        {
        }
        /**
         * @phpstan-return void
         */
        public function take_action()
        {
        }
        public function admin_page()
        {
        }
        /**
         * @phpstan-return void
         */
        public function handle_upload()
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_background_add()
        {
        }
        /**
         * @param array $form_fields
         * @return array
         */
        public function attachment_fields_to_edit($form_fields)
        {
        }
        /**
         * @param array $tabs
         * @return array
         */
        public function filter_upload_tabs($tabs)
        {
        }
        /**
         * @phpstan-return never
         */
        public function wp_set_background_image()
        {
        }
    }
    #[\AllowDynamicProperties]
    class Custom_Image_Header
    {
        /**
         * @var callable
         */
        public $admin_header_callback;
        /**
         * @var callable
         */
        public $admin_image_div_callback;
        /**
         * @var array
         */
        public $default_headers = array();
        /**
         * @param callable $admin_header_callback
         * @param callable $admin_image_div_callback
         */
        public function __construct($admin_header_callback, $admin_image_div_callback = '')
        {
        }
        /**
         * @phpstan-return void
         */
        public function init()
        {
        }
        public function help()
        {
        }
        /**
         * @return int
         */
        public function step()
        {
        }
        public function js_includes()
        {
        }
        public function css_includes()
        {
        }
        /**
         * @phpstan-return void
         */
        public function take_action()
        {
        }
        /**
         * @phpstan-return void
         */
        public function process_default_headers()
        {
        }
        /**
         * @param string $type
         */
        public function show_header_selector($type = 'default')
        {
        }
        public function js()
        {
        }
        public function js_1()
        {
        }
        public function js_2()
        {
        }
        public function step_1()
        {
        }
        public function step_2()
        {
        }
        public function step_2_manage_upload()
        {
        }
        public function step_3()
        {
        }
        public function finished()
        {
        }
        public function admin_page()
        {
        }
        /**
         * @param array $form_fields
         * @return array
         */
        public function attachment_fields_to_edit($form_fields)
        {
        }
        /**
         * @param array $tabs
         * @return array
         */
        public function filter_upload_tabs($tabs)
        {
        }
        /**
         * @param mixed $choice
         * @phpstan-return void
         */
        public final function set_header_image($choice)
        {
        }
        public final function remove_header_image()
        {
        }
        /**
         * @phpstan-return void
         */
        public final function reset_header_image()
        {
        }
        /**
         * @param array $dimensions
         * @return array
         */
        public final function get_header_dimensions($dimensions)
        {
        }
        /**
         * @param string $cropped
         * @param int $parent_attachment_id
         * @return array
         */
        public final function create_attachment_object($cropped, $parent_attachment_id)
        {
        }
        /**
         * @param array $attachment
         * @param string $cropped
         * @return int
         */
        public final function insert_attachment($attachment, $cropped)
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_header_crop()
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_header_add()
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_header_remove()
        {
        }
        /**
         * @param \WP_Customize_Manager $wp_customize
         * @phpstan-return void
         */
        public function customize_set_last_used($wp_customize)
        {
        }
        /**
         * @return array
         */
        public function get_default_header_images()
        {
        }
        /**
         * @return array
         */
        public function get_uploaded_header_images()
        {
        }
        /**
         * @param array $attachment
         * @return int|false
         */
        public function get_previous_crop($attachment)
        {
        }
    }
    #[\AllowDynamicProperties]
    class File_Upload_Upgrader
    {
        /**
         * @var string
         */
        public $package;
        /**
         * @var string
         */
        public $filename;
        /**
         * @var int
         */
        public $id = 0;
        /**
         * @param string $form
         * @param string $urlholder
         */
        public function __construct($form, $urlholder)
        {
        }
        /**
         * @return bool
         */
        public function cleanup()
        {
        }
    }
    class ftp_base
    {
        /* Public variables */
        var $LocalEcho;
        var $Verbose;
        var $OS_local;
        var $OS_remote;
        /* Private variables */
        var $_lastaction;
        var $_errors;
        var $_type;
        var $_umask;
        var $_timeout;
        var $_passive;
        var $_host;
        var $_fullhost;
        var $_port;
        var $_datahost;
        var $_dataport;
        var $_ftp_control_sock;
        var $_ftp_data_sock;
        var $_ftp_temp_sock;
        var $_ftp_buff_size;
        var $_login;
        var $_password;
        var $_connected;
        var $_ready;
        var $_code;
        var $_message;
        var $_can_restore;
        var $_port_available;
        var $_curtype;
        var $_features;
        var $_error_array;
        var $AuthorizedTransferMode;
        var $OS_FullName;
        var $_eol_code;
        var $AutoAsciiExt;
        /* Constructor */
        function __construct($port_mode = \FALSE, $verb = \FALSE, $le = \FALSE)
        {
        }
        function ftp_base($port_mode = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Public functions                                                                  -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function parselisting($line)
        {
        }
        function SendMSG($message = "", $crlf = \true)
        {
        }
        function SetType($mode = \FTP_AUTOASCII)
        {
        }
        function _settype($mode = \FTP_ASCII)
        {
        }
        function Passive($pasv = \NULL)
        {
        }
        function SetServer($host, $port = 21, $reconnect = \true)
        {
        }
        function SetUmask($umask = 022)
        {
        }
        function SetTimeout($timeout = 30)
        {
        }
        function connect($server = \NULL)
        {
        }
        function quit($force = \false)
        {
        }
        function login($user = \NULL, $pass = \NULL)
        {
        }
        function pwd()
        {
        }
        function cdup()
        {
        }
        function chdir($pathname)
        {
        }
        function rmdir($pathname)
        {
        }
        function mkdir($pathname)
        {
        }
        function rename($from, $to)
        {
        }
        function filesize($pathname)
        {
        }
        function abort()
        {
        }
        function mdtm($pathname)
        {
        }
        function systype()
        {
        }
        function delete($pathname)
        {
        }
        function site($command, $fnction = "site")
        {
        }
        function chmod($pathname, $mode)
        {
        }
        function restore($from)
        {
        }
        function features()
        {
        }
        function rawlist($pathname = "", $arg = "")
        {
        }
        function nlist($pathname = "", $arg = "")
        {
        }
        function is_exists($pathname)
        {
        }
        function file_exists($pathname)
        {
        }
        function fget($fp, $remotefile, $rest = 0)
        {
        }
        function get($remotefile, $localfile = \NULL, $rest = 0)
        {
        }
        function fput($remotefile, $fp, $rest = 0)
        {
        }
        function put($localfile, $remotefile = \NULL, $rest = 0)
        {
        }
        function mput($local = ".", $remote = \NULL, $continious = \false)
        {
        }
        function mget($remote, $local = ".", $continious = \false)
        {
        }
        function mdel($remote, $continious = \false)
        {
        }
        function mmkdir($dir, $mode = 0777)
        {
        }
        function glob($pattern, $handle = \NULL)
        {
        }
        function glob_pattern_match($pattern, $subject)
        {
        }
        function glob_regexp($pattern, $subject)
        {
        }
        function dirlist($remote)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _checkCode()
        {
        }
        function _list($arg = "", $cmd = "LIST", $fnction = "_list")
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!-- Partie : gestion des erreurs                                                            -->
        // <!-- --------------------------------------------------------------------------------------- -->
        // Gnre une erreur pour traitement externe  la classe
        function PushError($fctname, $msg, $desc = \false)
        {
        }
        // Rcupre une erreur externe
        function PopError()
        {
        }
    }
    class ftp_pure extends \ftp_base
    {
        function __construct($verb = \FALSE, $le = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _settimeout($sock)
        {
        }
        function _connect($host, $port)
        {
        }
        function _readmsg($fnction = "_readmsg")
        {
        }
        function _exec($cmd, $fnction = "_exec")
        {
        }
        function _data_prepare($mode = \FTP_ASCII)
        {
        }
        function _data_read($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write_block($mode, $block)
        {
        }
        function _data_close()
        {
        }
        function _quit($force = \FALSE)
        {
        }
    }
    class ftp_sockets extends \ftp_base
    {
        function __construct($verb = \FALSE, $le = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _settimeout($sock)
        {
        }
        function _connect($host, $port)
        {
        }
        function _readmsg($fnction = "_readmsg")
        {
        }
        function _exec($cmd, $fnction = "_exec")
        {
        }
        function _data_prepare($mode = \FTP_ASCII)
        {
        }
        function _data_read($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write_block($mode, $block)
        {
        }
        function _data_close()
        {
        }
        function _quit()
        {
        }
    }
    class ftp extends \ftp_sockets
    {
    }
    class Language_Pack_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        public $language_update = \null;
        public $done_header = \false;
        public $done_footer = \false;
        public $display_footer_actions = \true;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function before()
        {
        }
        /**
         * @param string|\WP_Error $errors
         */
        public function error($errors)
        {
        }
        public function after()
        {
        }
        public function bulk_footer()
        {
        }
    }
    class Language_Pack_Upgrader extends \WP_Upgrader
    {
        /**
         * @var array|\WP_Error
         */
        public $result;
        /**
         * @var bool
         */
        public $bulk = \true;
        /**
         * @param false|\WP_Upgrader $upgrader
         * @phpstan-return void
         */
        public static function async_upgrade($upgrader = \false)
        {
        }
        public function upgrade_strings()
        {
        }
        /**
         * @param string|false $update
         * @param array $args
         * @return array|bool|\WP_Error
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args See Language_Pack_Upgrader::bulk_upgrade()
         */
        public function upgrade($update = \false, $args = array())
        {
        }
        /**
         * @param object[] $language_updates
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return array|bool|\WP_Error
         */
        public function bulk_upgrade($language_updates = array(), $args = array())
        {
        }
        /**
         * @param string|\WP_Error $source
         * @param string $remote_source
         * @return string|\WP_Error
         */
        public function check_package($source, $remote_source)
        {
        }
        /**
         * @param object $update
         * @return string
         */
        public function get_name_for_update($update)
        {
        }
        /**
         * @param string $remote_destination
         * @return bool|\WP_Error
         */
        public function clear_destination($remote_destination)
        {
        }
    }
    /* For future use
      define( 'PCLZIP_CB_PRE_LIST', 78005 );
      define( 'PCLZIP_CB_POST_LIST', 78006 );
      define( 'PCLZIP_CB_PRE_DELETE', 78007 );
      define( 'PCLZIP_CB_POST_DELETE', 78008 );
      */
    // --------------------------------------------------------------------------------
    // Class : PclZip
    // Description :
    //   PclZip is the class that represent a Zip archive.
    //   The public methods allow the manipulation of the archive.
    // Attributes :
    //   Attributes must not be accessed directly.
    // Methods :
    //   PclZip() : Object creator
    //   create() : Creates the Zip archive
    //   listContent() : List the content of the Zip archive
    //   extract() : Extract the content of the archive
    //   properties() : List the properties of the archive
    // --------------------------------------------------------------------------------
    class PclZip
    {
        // ----- Filename of the zip file
        var $zipname = '';
        // ----- File descriptor of the zip file
        var $zip_fd = 0;
        // ----- Internal error handling
        var $error_code = 1;
        var $error_string = '';
        // ----- Current status of the magic_quotes_runtime
        // This value store the php configuration for magic_quotes
        // The class can then disable the magic_quotes and reset it after
        var $magic_quotes_status;
        // --------------------------------------------------------------------------------
        // Function : PclZip()
        // Description :
        //   Creates a PclZip object and set the name of the associated Zip archive
        //   filename.
        //   Note that no real action is taken, if the archive does not exist it is not
        //   created. Use create() for that.
        // --------------------------------------------------------------------------------
        function __construct($p_zipname)
        {
        }
        public function PclZip($p_zipname)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   create($p_filelist, $p_add_dir="", $p_remove_dir="")
        //   create($p_filelist, $p_option, $p_option_value, ...)
        // Description :
        //   This method supports two different synopsis. The first one is historical.
        //   This method creates a Zip Archive. The Zip file is created in the
        //   filesystem. The files and directories indicated in $p_filelist
        //   are added in the archive. See the parameters description for the
        //   supported format of $p_filelist.
        //   When a directory is in the list, the directory and its content is added
        //   in the archive.
        //   In this synopsis, the function takes an optional variable list of
        //   options. See below the supported options.
        // Parameters :
        //   $p_filelist : An array containing file or directory names, or
        //                 a string containing one filename or one directory name, or
        //                 a string containing a list of filenames and/or directory
        //                 names separated by spaces.
        //   $p_add_dir : A path to add before the real path of the archived file,
        //                in order to have it memorized in the archive.
        //   $p_remove_dir : A path to remove from the real path of the file to archive,
        //                   in order to have a shorter path memorized in the archive.
        //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir
        //                   is removed first, before $p_add_dir is added.
        // Options :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_COMMENT :
        //   PCLZIP_CB_PRE_ADD :
        //   PCLZIP_CB_POST_ADD :
        // Return Values :
        //   0 on failure,
        //   The list of the added files, with a status of the add action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function create($p_filelist)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   add($p_filelist, $p_add_dir="", $p_remove_dir="")
        //   add($p_filelist, $p_option, $p_option_value, ...)
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This methods add the list of files in an existing archive.
        //   If a file with the same name already exists, it is added at the end of the
        //   archive, the first one is still present.
        //   If the archive does not exist, it is created.
        // Parameters :
        //   $p_filelist : An array containing file or directory names, or
        //                 a string containing one filename or one directory name, or
        //                 a string containing a list of filenames and/or directory
        //                 names separated by spaces.
        //   $p_add_dir : A path to add before the real path of the archived file,
        //                in order to have it memorized in the archive.
        //   $p_remove_dir : A path to remove from the real path of the file to archive,
        //                   in order to have a shorter path memorized in the archive.
        //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir
        //                   is removed first, before $p_add_dir is added.
        // Options :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_COMMENT :
        //   PCLZIP_OPT_ADD_COMMENT :
        //   PCLZIP_OPT_PREPEND_COMMENT :
        //   PCLZIP_CB_PRE_ADD :
        //   PCLZIP_CB_POST_ADD :
        // Return Values :
        //   0 on failure,
        //   The list of the added files, with a status of the add action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function add($p_filelist)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : listContent()
        // Description :
        //   This public method, gives the list of the files and directories, with their
        //   properties.
        //   The properties of each entries in the list are (used also in other functions) :
        //     filename : Name of the file. For a create or add action it is the filename
        //                given by the user. For an extract function it is the filename
        //                of the extracted file.
        //     stored_filename : Name of the file / directory stored in the archive.
        //     size : Size of the stored file.
        //     compressed_size : Size of the file's data compressed in the archive
        //                       (without the headers overhead)
        //     mtime : Last known modification date of the file (UNIX timestamp)
        //     comment : Comment associated with the file
        //     folder : true | false
        //     index : index of the file in the archive
        //     status : status of the action (depending of the action) :
        //              Values are :
        //                ok : OK !
        //                filtered : the file / dir is not extracted (filtered by user)
        //                already_a_directory : the file can not be extracted because a
        //                                      directory with the same name already exists
        //                write_protected : the file can not be extracted because a file
        //                                  with the same name already exists and is
        //                                  write protected
        //                newer_exist : the file was not extracted because a newer file exists
        //                path_creation_fail : the file is not extracted because the folder
        //                                     does not exist and can not be created
        //                write_error : the file was not extracted because there was an
        //                              error while writing the file
        //                read_error : the file was not extracted because there was an error
        //                             while reading the file
        //                invalid_header : the file was not extracted because of an archive
        //                                 format error (bad file header)
        //   Note that each time a method can continue operating when there
        //   is an action error on a file, the error is only logged in the file status.
        // Return Values :
        //   0 on an unrecoverable failure,
        //   The list of the files in the archive.
        // --------------------------------------------------------------------------------
        function listContent()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   extract($p_path="./", $p_remove_path="")
        //   extract([$p_option, $p_option_value, ...])
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This method extract all the files / directories from the archive to the
        //   folder indicated in $p_path.
        //   If you want to ignore the 'root' part of path of the memorized files
        //   you can indicate this in the optional $p_remove_path parameter.
        //   By default, if a newer file with the same name already exists, the
        //   file is not extracted.
        //
        //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH options
        //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append
        //   at the end of the path value of PCLZIP_OPT_PATH.
        // Parameters :
        //   $p_path : Path where the files and directories are to be extracted
        //   $p_remove_path : First part ('root' part) of the memorized path
        //                    (if any similar) to remove while extracting.
        // Options :
        //   PCLZIP_OPT_PATH :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_CB_PRE_EXTRACT :
        //   PCLZIP_CB_POST_EXTRACT :
        // Return Values :
        //   0 or a negative value on failure,
        //   The list of the extracted files, with a status of the action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function extract()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   extractByIndex($p_index, $p_path="./", $p_remove_path="")
        //   extractByIndex($p_index, [$p_option, $p_option_value, ...])
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This method is doing a partial extract of the archive.
        //   The extracted files or folders are identified by their index in the
        //   archive (from 0 to n).
        //   Note that if the index identify a folder, only the folder entry is
        //   extracted, not all the files included in the archive.
        // Parameters :
        //   $p_index : A single index (integer) or a string of indexes of files to
        //              extract. The form of the string is "0,4-6,8-12" with only numbers
        //              and '-' for range or ',' to separate ranges. No spaces or ';'
        //              are allowed.
        //   $p_path : Path where the files and directories are to be extracted
        //   $p_remove_path : First part ('root' part) of the memorized path
        //                    (if any similar) to remove while extracting.
        // Options :
        //   PCLZIP_OPT_PATH :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and
        //     not as files.
        //     The resulting content is in a new field 'content' in the file
        //     structure.
        //     This option must be used alone (any other options are ignored).
        //   PCLZIP_CB_PRE_EXTRACT :
        //   PCLZIP_CB_POST_EXTRACT :
        // Return Values :
        //   0 on failure,
        //   The list of the extracted files, with a status of the action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        //function extractByIndex($p_index, options...)
        function extractByIndex($p_index)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   delete([$p_option, $p_option_value, ...])
        // Description :
        //   This method removes files from the archive.
        //   If no parameters are given, then all the archive is emptied.
        // Parameters :
        //   None or optional arguments.
        // Options :
        //   PCLZIP_OPT_BY_INDEX :
        //   PCLZIP_OPT_BY_NAME :
        //   PCLZIP_OPT_BY_EREG :
        //   PCLZIP_OPT_BY_PREG :
        // Return Values :
        //   0 on failure,
        //   The list of the files which are still present in the archive.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function delete()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : deleteByIndex()
        // Description :
        //   ***** Deprecated *****
        //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be preferred.
        // --------------------------------------------------------------------------------
        function deleteByIndex($p_index)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : properties()
        // Description :
        //   This method gives the properties of the archive.
        //   The properties are :
        //     nb : Number of files in the archive
        //     comment : Comment associated with the archive file
        //     status : not_exist, ok
        // Parameters :
        //   None
        // Return Values :
        //   0 on failure,
        //   An array with the archive properties.
        // --------------------------------------------------------------------------------
        function properties()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : duplicate()
        // Description :
        //   This method creates an archive by copying the content of an other one. If
        //   the archive already exist, it is replaced by the new one without any warning.
        // Parameters :
        //   $p_archive : The filename of a valid archive, or
        //                a valid PclZip object.
        // Return Values :
        //   1 on success.
        //   0 or a negative value on error (error code).
        // --------------------------------------------------------------------------------
        function duplicate($p_archive)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : merge()
        // Description :
        //   This method merge the $p_archive_to_add archive at the end of the current
        //   one ($this).
        //   If the archive ($this) does not exist, the merge becomes a duplicate.
        //   If the $p_archive_to_add archive does not exist, the merge is a success.
        // Parameters :
        //   $p_archive_to_add : It can be directly the filename of a valid zip archive,
        //                       or a PclZip object archive.
        // Return Values :
        //   1 on success,
        //   0 or negative values on error (see below).
        // --------------------------------------------------------------------------------
        function merge($p_archive_to_add)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorCode()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorCode()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorName()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorName($p_with_code = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorInfo()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorInfo($p_full = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // ***** UNDER THIS LINE ARE DEFINED PRIVATE INTERNAL FUNCTIONS *****
        // *****                                                        *****
        // *****       THESES FUNCTIONS MUST NOT BE USED DIRECTLY       *****
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCheckFormat()
        // Description :
        //   This method check that the archive exists and is a valid zip archive.
        //   Several level of check exists. (future)
        // Parameters :
        //   $p_level : Level of check. Default 0.
        //              0 : Check the first bytes (magic codes) (default value))
        //              1 : 0 + Check the central directory (future)
        //              2 : 1 + Check each file header (future)
        // Return Values :
        //   true on success,
        //   false on error, the error code is set.
        // --------------------------------------------------------------------------------
        function privCheckFormat($p_level = 0)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privParseOptions()
        // Description :
        //   This internal methods reads the variable list of arguments ($p_options_list,
        //   $p_size) and generate an array with the options and values ($v_result_list).
        //   $v_requested_options contains the options that can be present and those that
        //   must be present.
        //   $v_requested_options is an array, with the option value as key, and 'optional',
        //   or 'mandatory' as value.
        // Parameters :
        //   See above.
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privOptionDefaultThreshold()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privOptionDefaultThreshold(&$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privFileDescrParseAtt()
        // Description :
        // Parameters :
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privFileDescrExpand()
        // Description :
        //   This method look for each item of the list to see if its a file, a folder
        //   or a string to be added as file. For any other type of files (link, other)
        //   just ignore the item.
        //   Then prepare the information that will be stored for that file.
        //   When its a folder, expand the folder with all the files that are in that
        //   folder (recursively).
        // Parameters :
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privFileDescrExpand(&$p_filedescr_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCreate()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privCreate($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAdd()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAdd($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privOpenFd()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privOpenFd($p_mode)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCloseFd()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privCloseFd()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddList()
        // Description :
        //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is
        //   different from the real path of the file. This is useful if you want to have PclTar
        //   running in any directory, and memorize relative path from an other directory.
        // Parameters :
        //   $p_list : An array containing the file or directory names to add in the tar
        //   $p_result_list : list of added files with their properties (specially the status field)
        //   $p_add_dir : Path to add in the filename path archived
        //   $p_remove_dir : Path to remove in the filename path archived
        // Return Values :
        // --------------------------------------------------------------------------------
        //  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)
        function privAddList($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFileList()
        // Description :
        // Parameters :
        //   $p_filedescr_list : An array containing the file description
        //                      or directory names to add in the zip
        //   $p_result_list : list of added files with their properties (specially the status field)
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFile($p_filedescr, &$p_header, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFileUsingTempFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCalculateStoredFilename()
        // Description :
        //   Based on file descriptor properties and global options, this method
        //   calculate the filename that will be stored in the archive.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privCalculateStoredFilename(&$p_filedescr, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteCentralFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteCentralFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteCentralHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privList()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privList(&$p_list)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privConvertHeader2FileInfo()
        // Description :
        //   This function takes the file information from the central directory
        //   entries and extract the interesting parameters that will be given back.
        //   The resulting file infos are set in the array $p_info
        //     $p_info['filename'] : Filename with full path. Given by user (add),
        //                           extracted in the filesystem (extract).
        //     $p_info['stored_filename'] : Stored filename in the archive.
        //     $p_info['size'] = Size of the file.
        //     $p_info['compressed_size'] = Compressed size of the file.
        //     $p_info['mtime'] = Last modification date of the file.
        //     $p_info['comment'] = Comment associated with the file.
        //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.
        //     $p_info['status'] = status of the action on the file.
        //     $p_info['crc'] = CRC of the file content.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privConvertHeader2FileInfo($p_header, &$p_info)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractByRule()
        // Description :
        //   Extract a file or directory depending of rules (by index, by name, ...)
        // Parameters :
        //   $p_file_list : An array where will be placed the properties of each
        //                  extracted file
        //   $p_path : Path to add while writing the extracted files
        //   $p_remove_path : Path to remove (from the file memorized path) while writing the
        //                    extracted files. If the path does not match the file path,
        //                    the file is extracted with its memorized path.
        //                    $p_remove_path does not apply to 'list' mode.
        //                    $p_path and $p_remove_path are commulative.
        // Return Values :
        //   1 on success,0 or less on error (see error code list)
        // --------------------------------------------------------------------------------
        function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFile()
        // Description :
        // Parameters :
        // Return Values :
        //
        // 1 : ... ?
        // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback
        // --------------------------------------------------------------------------------
        function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileUsingTempFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileUsingTempFile(&$p_entry, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileInOutput()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileInOutput(&$p_entry, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileAsString()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadCentralFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadCentralFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCheckFileHeaders()
        // Description :
        // Parameters :
        // Return Values :
        //   1 on success,
        //   0 on error;
        // --------------------------------------------------------------------------------
        function privCheckFileHeaders(&$p_local_header, &$p_central_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadEndCentralDir()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadEndCentralDir(&$p_central_dir)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDeleteByRule()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDeleteByRule(&$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDirCheck()
        // Description :
        //   Check if a directory exists, if not it creates it and all the parents directory
        //   which may be useful.
        // Parameters :
        //   $p_dir : Directory path to check.
        // Return Values :
        //    1 : OK
        //   -1 : Unable to create directory
        // --------------------------------------------------------------------------------
        function privDirCheck($p_dir, $p_is_dir = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privMerge()
        // Description :
        //   If $p_archive_to_add does not exist, the function exit with a success result.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privMerge(&$p_archive_to_add)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDuplicate()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDuplicate($p_archive_filename)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privErrorLog()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privErrorLog($p_error_code = 0, $p_error_string = '')
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privErrorReset()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privErrorReset()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDisableMagicQuotes()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDisableMagicQuotes()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privSwapBackMagicQuotes()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privSwapBackMagicQuotes()
        {
        }
        // --------------------------------------------------------------------------------
    }
    class Plugin_Installer_Skin extends \WP_Upgrader_Skin
    {
        public $api;
        public $type;
        public $url;
        public $overwrite;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function before()
        {
        }
        /**
         * @param \WP_Error $wp_error
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
        /**
         * @phpstan-return void
         */
        public function after()
        {
        }
    }
    class Plugin_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        /**
         * @var string
         */
        public $plugin = '';
        /**
         * @var bool
         */
        public $plugin_active = \false;
        /**
         * @var bool
         */
        public $plugin_network_active = \false;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function after()
        {
        }
    }
    class Plugin_Upgrader extends \WP_Upgrader
    {
        /**
         * @var array|\WP_Error
         */
        public $result;
        /**
         * @var bool
         */
        public $bulk = \false;
        /**
         * @var array
         */
        public $new_plugin_data = array();
        public function upgrade_strings()
        {
        }
        public function install_strings()
        {
        }
        /**
         * @param string $package
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return bool|\WP_Error
         */
        public function install($package, $args = array())
        {
        }
        /**
         * @param string $plugin
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return bool|\WP_Error
         */
        public function upgrade($plugin, $args = array())
        {
        }
        /**
         * @param string[] $plugins
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return array|false
         */
        public function bulk_upgrade($plugins, $args = array())
        {
        }
        /**
         * @param string $source
         * @return string|\WP_Error
         */
        public function check_package($source)
        {
        }
        /**
         * @return string|false
         */
        public function plugin_info()
        {
        }
        /**
         * @param bool|\WP_Error $response
         * @param array $plugin
         * @return bool|\WP_Error
         */
        public function deactivate_plugin_before_upgrade($response, $plugin)
        {
        }
        /**
         * @param bool|\WP_Error $response
         * @param array $plugin
         * @return bool|\WP_Error
         */
        public function active_before($response, $plugin)
        {
        }
        /**
         * @param bool|\WP_Error $response
         * @param array $plugin
         * @return bool|\WP_Error
         */
        public function active_after($response, $plugin)
        {
        }
        /**
         * @param bool|\WP_Error $removed
         * @param string $local_destination
         * @param string $remote_destination
         * @param array $plugin
         * @return bool|\WP_Error
         */
        public function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin)
        {
        }
    }
    class Theme_Installer_Skin extends \WP_Upgrader_Skin
    {
        public $api;
        public $type;
        public $url;
        public $overwrite;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function before()
        {
        }
        /**
         * @param \WP_Error $wp_error
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
        /**
         * @phpstan-return void
         */
        public function after()
        {
        }
    }
    class Theme_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        /**
         * @var string
         */
        public $theme = '';
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        public function after()
        {
        }
    }
    class Theme_Upgrader extends \WP_Upgrader
    {
        /**
         * @var array|\WP_Error
         */
        public $result;
        /**
         * @var bool
         */
        public $bulk = \false;
        /**
         * @var array
         */
        public $new_theme_data = array();
        public function upgrade_strings()
        {
        }
        public function install_strings()
        {
        }
        /**
         * @param bool $install_result
         * @param array $hook_extra
         * @param array $child_result
         * @return bool
         */
        public function check_parent_theme_filter($install_result, $hook_extra, $child_result)
        {
        }
        /**
         * @param array $actions
         * @return array
         */
        public function hide_activate_preview_actions($actions)
        {
        }
        /**
         * @param string $package
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return bool|\WP_Error
         */
        public function install($package, $args = array())
        {
        }
        /**
         * @param string $theme
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return bool|\WP_Error
         */
        public function upgrade($theme, $args = array())
        {
        }
        /**
         * @param string[] $themes
         * @phpstan-param array{
         *   clear_update_cache?: bool,
         * } $args
         * @return array[]|false
         */
        public function bulk_upgrade($themes, $args = array())
        {
        }
        /**
         * @param string $source
         * @return string|\WP_Error
         */
        public function check_package($source)
        {
        }
        /**
         * @param bool|\WP_Error $response
         * @param array $theme
         * @return bool|\WP_Error
         */
        public function current_before($response, $theme)
        {
        }
        /**
         * @param bool|\WP_Error $response
         * @param array $theme
         * @return bool|\WP_Error
         */
        public function current_after($response, $theme)
        {
        }
        /**
         * @param bool $removed
         * @param string $local_destination
         * @param string $remote_destination
         * @param array $theme
         * @return bool
         */
        public function delete_old_theme($removed, $local_destination, $remote_destination, $theme)
        {
        }
        /**
         * @param string $theme
         * @return \WP_Theme|false
         */
        public function theme_info($theme = \null)
        {
        }
    }
    #[\AllowDynamicProperties]
    class Walker
    {
        /**
         * @var string
         */
        public $tree_type;
        /**
         * @var string[]
         */
        public $db_fields;
        /**
         * @var int
         */
        public $max_pages = 1;
        /**
         * @var bool
         */
        public $has_children;
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param object $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param object $data_object
         * @param int $depth
         * @param array $args
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
        /**
         * @param object $element
         * @param array $children_elements
         * @param int $max_depth
         * @param int $depth
         * @param array $args
         * @param string $output
         * @phpstan-return void
         */
        public function display_element($element, &$children_elements, $max_depth, $depth, $args, &$output)
        {
        }
        /**
         * @param array $elements
         * @param int $max_depth
         * @param mixed $args
         * @return string
         */
        public function walk($elements, $max_depth, ...$args)
        {
        }
        /**
         * @param array $elements
         * @param int $max_depth
         * @param int $page_num
         * @param int $per_page
         * @param mixed $args
         * @return string
         */
        public function paged_walk($elements, $max_depth, $page_num, $per_page, ...$args)
        {
        }
        /**
         * @param array $elements
         * @return int
         */
        public function get_number_of_root_elements($elements)
        {
        }
        /**
         * @param object $element
         * @param array $children_elements
         * @phpstan-return void
         */
        public function unset_children($element, &$children_elements)
        {
        }
    }
    class Walker_Category_Checklist extends \Walker
    {
        public $tree_type = 'category';
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        // TODO: Decouple this.
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         * @phpstan-param array{
         *   descendants_and_self?: int,
         *   selected_cats?: int[],
         *   popular_cats?: int[],
         *   walker?: Walker,
         *   taxonomy?: string,
         *   checked_ontop?: bool,
         *   echo?: bool,
         * } $args See wp_terms_checklist()
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         * @phpstan-param array{
         *   descendants_and_self?: int,
         *   selected_cats?: int[],
         *   popular_cats?: int[],
         *   walker?: Walker,
         *   taxonomy?: string,
         *   checked_ontop?: bool,
         *   echo?: bool,
         * } $args See wp_terms_checklist()
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param \WP_Term $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         * @phpstan-param array{
         *   descendants_and_self?: int,
         *   selected_cats?: int[],
         *   popular_cats?: int[],
         *   walker?: Walker,
         *   taxonomy?: string,
         *   checked_ontop?: bool,
         *   echo?: bool,
         * } $args See wp_terms_checklist()
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param \WP_Term $data_object
         * @param int $depth
         * @param array $args
         * @phpstan-param array{
         *   descendants_and_self?: int,
         *   selected_cats?: int[],
         *   popular_cats?: int[],
         *   walker?: Walker,
         *   taxonomy?: string,
         *   checked_ontop?: bool,
         *   echo?: bool,
         * } $args See wp_terms_checklist()
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    class Walker_Nav_Menu extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = array('post_type', 'taxonomy', 'custom');
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'menu_item_parent', 'id' => 'db_id');
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param \stdClass $args
         * @param int $current_object_id
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param \stdClass $args
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = \null)
        {
        }
        /**
         * @param array $atts
         * @return string
         */
        protected function build_atts($atts = array())
        {
        }
    }
    class Walker_Nav_Menu_Checklist extends \Walker_Nav_Menu
    {
        /**
         * @param array|false $fields
         */
        public function __construct($fields = \false)
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param \stdClass $args
         * @param int $current_object_id
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
    }
    class Walker_Nav_Menu_Edit extends \Walker_Nav_Menu
    {
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param \stdClass $args
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param \stdClass $args
         * @param int $current_object_id
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
    }
    class WP_Ajax_Upgrader_Skin extends \Automatic_Upgrader_Skin
    {
        /**
         * @var array
         */
        public $plugin_info = array();
        /**
         * @var \WP_Theme|false
         */
        public $theme_info = \false;
        /**
         * @var null|\WP_Error
         */
        protected $errors = \null;
        /**
         * @param array $args
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return \WP_Error
         */
        public function get_errors()
        {
        }
        /**
         * @return string
         */
        public function get_error_messages()
        {
        }
        /**
         * @param string|\WP_Error $errors
         * @param mixed $args
         */
        public function error($errors, ...$args)
        {
        }
        /**
         * @param string|array|\WP_Error $feedback
         * @param mixed $args
         */
        public function feedback($feedback, ...$args)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_List_Table
    {
        /**
         * @var array
         */
        public $items;
        /**
         * @var array
         */
        protected $_args;
        /**
         * @var array
         */
        protected $_pagination_args = array();
        /**
         * @var \WP_Screen
         */
        protected $screen;
        /**
         * @var array
         */
        protected $modes = array();
        /**
         * @var array
         */
        protected $_column_headers;
        /**
         * @var array
         */
        protected $compat_fields = array('_args', '_pagination_args', 'screen', '_actions', '_pagination');
        /**
         * @var array
         */
        protected $compat_methods = array('set_pagination_args', 'get_views', 'get_bulk_actions', 'bulk_actions', 'row_actions', 'months_dropdown', 'view_switcher', 'comments_bubble', 'get_items_per_page', 'pagination', 'get_sortable_columns', 'get_column_info', 'get_table_classes', 'display_tablenav', 'extra_tablenav', 'single_row_columns');
        /**
         * @phpstan-param array{
         *   plural?: string,
         *   singular?: string,
         *   ajax?: bool,
         *   screen?: string,
         * } $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @phpstan-return void
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|bool
         */
        public function __call($name, $arguments)
        {
        }
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param array|string $args
         * @phpstan-param array{total_items?: int, total_pages?: int, per_page?: int} $args
         * @phpstan-return void
         */
        protected function set_pagination_args($args)
        {
        }
        /**
         * @param string $key
         * @return int
         */
        public function get_pagination_arg($key)
        {
        }
        /**
         * @return bool
         */
        public function has_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @param string $text
         * @param string $input_id
         * @phpstan-return void
         */
        public function search_box($text, $input_id)
        {
        }
        /**
         * @phpstan-param array{
         *   url?: string,
         *   label?: string,
         *   current?: bool,
         * } $link_data
         * @return string[]
         */
        protected function get_views_links($link_data = array())
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @phpstan-return void
         */
        public function views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         * @phpstan-return void
         */
        protected function bulk_actions($which = '')
        {
        }
        /**
         * @return string|false
         */
        public function current_action()
        {
        }
        /**
         * @param string[] $actions
         * @param bool $always_visible
         * @return string
         */
        protected function row_actions($actions, $always_visible = \false)
        {
        }
        /**
         * @param string $post_type
         * @phpstan-return void
         */
        protected function months_dropdown($post_type)
        {
        }
        /**
         * @param string $current_mode
         */
        protected function view_switcher($current_mode)
        {
        }
        /**
         * @param int $post_id
         * @param int $pending_comments
         */
        protected function comments_bubble($post_id, $pending_comments)
        {
        }
        /**
         * @return int
         */
        public function get_pagenum()
        {
        }
        /**
         * @param string $option
         * @param int $default_value
         * @return int
         */
        protected function get_items_per_page($option, $default_value = 20)
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         * @phpstan-return void
         */
        protected function pagination($which)
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @return string
         */
        public function get_primary_column()
        {
        }
        /**
         * @return string
         */
        protected function get_primary_column_name()
        {
        }
        /**
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * @return int
         */
        public function get_column_count()
        {
        }
        /**
         * @param bool $with_id
         */
        public function print_column_headers($with_id = \true)
        {
        }
        /**
         * @phpstan-return void
         */
        public function print_table_description()
        {
        }
        public function display()
        {
        }
        /**
         * @return string[]
         */
        protected function get_table_classes()
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        public function display_rows_or_placeholder()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param object|array $item
         */
        public function single_row($item)
        {
        }
        /**
         * @param object|array $item
         * @param string $column_name
         */
        protected function column_default($item, $column_name)
        {
        }
        /**
         * @param object|array $item
         */
        protected function column_cb($item)
        {
        }
        /**
         * @param object|array $item
         */
        protected function single_row_columns($item)
        {
        }
        /**
         * @param object|array $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_response()
        {
        }
        public function _js_vars()
        {
        }
    }
    class WP_Application_Passwords_List_Table extends \WP_List_Table
    {
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param array $item
         */
        public function column_name($item)
        {
        }
        /**
         * @param array $item
         */
        public function column_created($item)
        {
        }
        /**
         * @param array $item
         */
        public function column_last_used($item)
        {
        }
        /**
         * @param array $item
         */
        public function column_last_ip($item)
        {
        }
        /**
         * @param array $item
         */
        public function column_revoke($item)
        {
        }
        /**
         * @param array $item
         * @param string $column_name
         */
        protected function column_default($item, $column_name)
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @param array $item
         */
        public function single_row($item)
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        public function print_js_template_row()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Automatic_Updater
    {
        /**
         * @var array
         */
        protected $update_results = array();
        /**
         * @return bool
         */
        public function is_disabled()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function is_allowed_dir($dir)
        {
        }
        /**
         * @param string $context
         * @return bool
         */
        public function is_vcs_checkout($context)
        {
        }
        /**
         * @param string $type
         * @param object $item
         * @param string $context
         * @return bool
         */
        public function should_update($type, $item, $context)
        {
        }
        /**
         * @param object $item
         * @return bool
         */
        protected function send_core_update_notification_email($item)
        {
        }
        /**
         * @param string $type
         * @param object $item
         * @return null|\WP_Error
         */
        public function update($type, $item)
        {
        }
        /**
         * @phpstan-return void
         */
        public function run()
        {
        }
        /**
         * @param object $update_result
         * @phpstan-return void
         */
        protected function after_core_update($update_result)
        {
        }
        /**
         * @param string $type
         * @param object $core_update
         * @param mixed $result
         * @phpstan-return void
         */
        protected function send_email($type, $core_update, $result = \null)
        {
        }
        /**
         * @param array $update_results
         * @phpstan-return void
         */
        protected function after_plugin_theme_update($update_results)
        {
        }
        /**
         * @param string $type
         * @param array $successful_updates
         * @param array $failed_updates
         * @phpstan-return void
         */
        protected function send_plugin_theme_email($type, $successful_updates, $failed_updates)
        {
        }
        protected function send_debug_email()
        {
        }
        /**
         * @return bool
         */
        protected function has_fatal_error()
        {
        }
    }
    class WP_Comments_List_Table extends \WP_List_Table
    {
        public $checkbox = \true;
        public $pending_count = array();
        public $extra_items;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @param string $name
         * @param int $comment_id
         * @return string
         */
        public function floated_admin_avatar($name, $comment_id)
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param string $comment_status
         * @return int
         */
        public function get_per_page($comment_status = 'all')
        {
        }
        public function no_items()
        {
        }
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string|false
         */
        public function current_action()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @param string $comment_type
         */
        protected function comment_type_dropdown($comment_type)
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        public function display()
        {
        }
        /**
         * @param \WP_Comment $item
         */
        public function single_row($item)
        {
        }
        /**
         * @param \WP_Comment $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * @param \WP_Comment $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_Comment $comment
         */
        public function column_comment($comment)
        {
        }
        /**
         * @param \WP_Comment $comment
         */
        public function column_author($comment)
        {
        }
        /**
         * @param \WP_Comment $comment
         */
        public function column_date($comment)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @phpstan-return void
         */
        public function column_response($comment)
        {
        }
        /**
         * @param \WP_Comment $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Community_Events
    {
        /**
         * @var int
         */
        protected $user_id = 0;
        /**
         * @var false|array
         */
        protected $user_location = \false;
        /**
         * @param int $user_id
         * @phpstan-param false|array{
         *   description?: string,
         *   latitude?: string,
         *   longitude?: string,
         *   country?: string,
         * } $user_location
         */
        public function __construct($user_id, $user_location = \false)
        {
        }
        /**
         * @param string $location_search
         * @param string $timezone
         * @return array|\WP_Error
         */
        public function get_events($location_search = '', $timezone = '')
        {
        }
        /**
         * @param string $search
         * @param string $timezone
         * @return array
         */
        protected function get_request_args($search = '', $timezone = '')
        {
        }
        /**
         * @return string|false
         */
        public static function get_unsafe_client_ip()
        {
        }
        /**
         * @param array $a
         * @param array $b
         * @return bool
         */
        protected function coordinates_match($a, $b)
        {
        }
        /**
         * @param array $location
         * @return string|false
         */
        protected function get_events_transient_key($location)
        {
        }
        /**
         * @param array $events
         * @param int|false $expiration
         * @return bool
         */
        protected function cache_events($events, $expiration = \false)
        {
        }
        /**
         * @return array|false
         */
        public function get_cached_events()
        {
        }
        /**
         * @param array $response_body
         * @return array
         */
        protected function format_event_data_time($response_body)
        {
        }
        /**
         * @param array $events
         * @return array
         */
        protected function trim_events(array $events)
        {
        }
        /**
         * @param string $message
         * @param array $details
         * @phpstan-return void
         */
        protected function maybe_log_events_response($message, $details)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Debug_Data
    {
        public static function check_for_updates()
        {
        }
        /**
         * @return array
         */
        public static function debug_data()
        {
        }
        /**
         * @param string $mysql_var
         * @return string|null
         */
        public static function get_mysql_var($mysql_var)
        {
        }
        /**
         * @param array $info_array
         * @phpstan-param 'info'|'debug' $data_type
         * @return string
         */
        public static function format($info_array, $data_type)
        {
        }
        /**
         * @return int
         */
        public static function get_database_size()
        {
        }
        /**
         * @return array
         */
        public static function get_sizes()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Filesystem_Base
    {
        /**
         * @var bool
         */
        public $verbose = \false;
        /**
         * @var array
         */
        public $cache = array();
        /**
         * @var string
         */
        public $method = '';
        /**
         * @var \WP_Error
         */
        public $errors = \null;
        public $options = array();
        /**
         * @return string
         */
        public function abspath()
        {
        }
        /**
         * @return string
         */
        public function wp_content_dir()
        {
        }
        /**
         * @return string
         */
        public function wp_plugins_dir()
        {
        }
        /**
         * @param string|false $theme
         * @return string
         */
        public function wp_themes_dir($theme = \false)
        {
        }
        /**
         * @return string
         */
        public function wp_lang_dir()
        {
        }
        /**
         * @param string $base
         * @param bool $verbose
         * @return string
         */
        public function find_base_dir($base = '.', $verbose = \false)
        {
        }
        /**
         * @param string $base
         * @param bool $verbose
         * @return string
         */
        public function get_base_dir($base = '.', $verbose = \false)
        {
        }
        /**
         * @param string $folder
         * @return string|false
         */
        public function find_folder($folder)
        {
        }
        /**
         * @param string $folder
         * @param string $base
         * @param bool $loop
         * @return string|false
         */
        public function search_for_folder($folder, $base = '.', $loop = \false)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function gethchmod($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function getchmod($file)
        {
        }
        /**
         * @param string $mode
         * @return string
         */
        public function getnumchmodfromh($mode)
        {
        }
        /**
         * @param string $text
         * @return bool
         */
        public function is_binary($text)
        {
        }
        /**
         * @param string $file
         * @param string|int $owner
         * @param bool $recursive
         * @return bool
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * @return bool
         */
        public function connect()
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function get_contents($file)
        {
        }
        /**
         * @param string $file
         * @return array|false
         */
        public function get_contents_array($file)
        {
        }
        /**
         * @param string $file
         * @param string $contents
         * @param int|false $mode
         * @return bool
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * @return string|false
         */
        public function cwd()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function chdir($dir)
        {
        }
        /**
         * @param string $file
         * @param string|int $group
         * @param bool $recursive
         * @return bool
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @param int|false $mode
         * @param bool $recursive
         * @return bool
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function owner($file)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function group($file)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @param int|false $mode
         * @return bool
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @return bool
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * @param string $file
         * @param bool $recursive
         * @param string|false $type
         * @return bool
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function exists($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_file($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_dir($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_readable($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_writable($path)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function atime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function mtime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function size($file)
        {
        }
        /**
         * @param string $file
         * @param int $time
         * @param int $atime
         * @return bool
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * @param string $path
         * @param int|false $chmod
         * @param string|int|false $chown
         * @param string|int|false $chgrp
         * @return bool
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $recursive
         * @return bool
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $include_hidden
         * @param bool $recursive
         * @phpstan-return false|array<int|string, array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: int|string|false,
         *   owner: string|false,
         *   group: string|false,
         *   size: int|string|false,
         *   lastmodunix: int|string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }>
         * @phpstan-return false|array<string, array{name: string, perms: string, permsn: string, owner: string|false, size: int|string|false, lastmodunix: int|string|false, lastmod: string|false, time: string|false, type: 'f'|'d'|'l', group: string|false, number: int|string|false, files?: array|false}>
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    class WP_Filesystem_Direct extends \WP_Filesystem_Base
    {
        /**
         * @param mixed $arg
         */
        public function __construct($arg)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function get_contents($file)
        {
        }
        /**
         * @param string $file
         * @return array|false
         */
        public function get_contents_array($file)
        {
        }
        /**
         * @param string $file
         * @param string $contents
         * @param int|false $mode
         * @return bool
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * @return string|false
         */
        public function cwd()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function chdir($dir)
        {
        }
        /**
         * @param string $file
         * @param string|int $group
         * @param bool $recursive
         * @return bool
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @param int|false $mode
         * @param bool $recursive
         * @return bool
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @param string|int $owner
         * @param bool $recursive
         * @return bool
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function owner($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function getchmod($file)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function group($file)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @param int|false $mode
         * @return bool
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @return bool
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * @param string $file
         * @param bool $recursive
         * @param string|false $type
         * @return bool
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function exists($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_file($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_dir($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_readable($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_writable($path)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function atime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function mtime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function size($file)
        {
        }
        /**
         * @param string $file
         * @param int $time
         * @param int $atime
         * @return bool
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * @param string $path
         * @param int|false $chmod
         * @param string|int|false $chown
         * @param string|int|false $chgrp
         * @return bool
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $recursive
         * @return bool
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $include_hidden
         * @param bool $recursive
         * @phpstan-return false|array<int|string, array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: false,
         *   owner: string|false,
         *   group: string|false,
         *   size: int|string|false,
         *   lastmodunix: int|string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }>
         * @phpstan-return false|array<string, array{name: string, perms: string, permsn: string, owner: string|false, size: int|string|false, lastmodunix: int|string|false, lastmod: string|false, time: string|false, type: 'f'|'d'|'l', group: string|false, number: int|string|false, files?: array|false}>
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    class WP_Filesystem_FTPext extends \WP_Filesystem_Base
    {
        /**
         * @var resource
         */
        public $link;
        /**
         * @param array $opt
         * @phpstan-return void
         */
        public function __construct($opt = '')
        {
        }
        /**
         * @return bool
         */
        public function connect()
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function get_contents($file)
        {
        }
        /**
         * @param string $file
         * @return array|false
         */
        public function get_contents_array($file)
        {
        }
        /**
         * @param string $file
         * @param string $contents
         * @param int|false $mode
         * @return bool
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * @return string|false
         */
        public function cwd()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function chdir($dir)
        {
        }
        /**
         * @param string $file
         * @param int|false $mode
         * @param bool $recursive
         * @return bool
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function owner($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function getchmod($file)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function group($file)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @param int|false $mode
         * @return bool
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @return bool
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * @param string $file
         * @param bool $recursive
         * @param string|false $type
         * @return bool
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function exists($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_file($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_dir($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_readable($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_writable($path)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function atime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function mtime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function size($file)
        {
        }
        /**
         * @param string $file
         * @param int $time
         * @param int $atime
         * @return bool
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * @param string $path
         * @param int|false $chmod
         * @param string|int|false $chown
         * @param string|int|false $chgrp
         * @return bool
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $recursive
         * @return bool
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $line
         * @phpstan-return array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: string|false,
         *   owner: string|false,
         *   group: string|false,
         *   size: string|false,
         *   lastmodunix: string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }
         */
        public function parselisting($line)
        {
        }
        /**
         * @param string $path
         * @param bool $include_hidden
         * @param bool $recursive
         * @phpstan-return false|array<int|string, array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: int|string|false,
         *   owner: string|false,
         *   group: string|false,
         *   size: int|string|false,
         *   lastmodunix: int|string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }>
         * @phpstan-return false|array<string, array{name: string, perms: string, permsn: string, owner: string|false, size: int|string|false, lastmodunix: int|string|false, lastmod: string|false, time: string|false, type: 'f'|'d'|'l', group: string|false, number: int|string|false, files?: array|false}>
         */
        public function dirlist($path = '.', $include_hidden = \true, $recursive = \false)
        {
        }
        public function __destruct()
        {
        }
    }
    class WP_Filesystem_ftpsockets extends \WP_Filesystem_Base
    {
        /**
         * @var \ftp
         */
        public $ftp;
        /**
         * @param array $opt
         * @phpstan-return void
         */
        public function __construct($opt = '')
        {
        }
        /**
         * @return bool
         */
        public function connect()
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function get_contents($file)
        {
        }
        /**
         * @param string $file
         * @return array|false
         */
        public function get_contents_array($file)
        {
        }
        /**
         * @param string $file
         * @param string $contents
         * @param int|false $mode
         * @return bool
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * @return string|false
         */
        public function cwd()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function chdir($dir)
        {
        }
        /**
         * @param string $file
         * @param int|false $mode
         * @param bool $recursive
         * @return bool
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function owner($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function getchmod($file)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function group($file)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @param int|false $mode
         * @return bool
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @return bool
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * @param string $file
         * @param bool $recursive
         * @param string|false $type
         * @return bool
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function exists($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_file($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_dir($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_readable($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_writable($path)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function atime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function mtime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function size($file)
        {
        }
        /**
         * @param string $file
         * @param int $time
         * @param int $atime
         * @return bool
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * @param string $path
         * @param int|false $chmod
         * @param string|int|false $chown
         * @param string|int|false $chgrp
         * @return bool
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $recursive
         * @return bool
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $include_hidden
         * @param bool $recursive
         * @phpstan-return false|array<int|string, array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: int|string|false,
         *   owner: string|false,
         *   group: string|false,
         *   size: int|string|false,
         *   lastmodunix: int|string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }>
         * @phpstan-return false|array<string, array{name: string, perms: string, permsn: string, owner: string|false, size: int|string|false, lastmodunix: int|string|false, lastmod: string|false, time: string|false, type: 'f'|'d'|'l', group: string|false, number: int|string|false, files?: array|false}>
         */
        public function dirlist($path = '.', $include_hidden = \true, $recursive = \false)
        {
        }
        public function __destruct()
        {
        }
    }
    class WP_Filesystem_SSH2 extends \WP_Filesystem_Base
    {
        /**
         * @var resource
         */
        public $link = \false;
        /**
         * @var resource
         */
        public $sftp_link;
        /**
         * @var bool
         */
        public $keys = \false;
        /**
         * @param array $opt
         * @phpstan-return void
         */
        public function __construct($opt = '')
        {
        }
        /**
         * @return bool
         */
        public function connect()
        {
        }
        /**
         * @param string $path
         * @return string
         */
        public function sftp_path($path)
        {
        }
        /**
         * @param string $command
         * @param bool $returnbool
         * @return bool|string
         */
        public function run_command($command, $returnbool = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function get_contents($file)
        {
        }
        /**
         * @param string $file
         * @return array|false
         */
        public function get_contents_array($file)
        {
        }
        /**
         * @param string $file
         * @param string $contents
         * @param int|false $mode
         * @return bool
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * @return string|false
         */
        public function cwd()
        {
        }
        /**
         * @param string $dir
         * @return bool
         */
        public function chdir($dir)
        {
        }
        /**
         * @param string $file
         * @param string|int $group
         * @param bool $recursive
         * @return bool
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @param int|false $mode
         * @param bool $recursive
         * @return bool
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @param string|int $owner
         * @param bool $recursive
         * @return bool
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function owner($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function getchmod($file)
        {
        }
        /**
         * @param string $file
         * @return string|false
         */
        public function group($file)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @param int|false $mode
         * @return bool
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * @param string $source
         * @param string $destination
         * @param bool $overwrite
         * @return bool
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * @param string $file
         * @param bool $recursive
         * @param string|false $type
         * @return bool
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function exists($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_file($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_dir($path)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function is_readable($file)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        public function is_writable($path)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function atime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function mtime($file)
        {
        }
        /**
         * @param string $file
         * @return int|false
         */
        public function size($file)
        {
        }
        /**
         * @param string $file
         * @param int $time
         * @param int $atime
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * @param string $path
         * @param int|false $chmod
         * @param string|int|false $chown
         * @param string|int|false $chgrp
         * @return bool
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $recursive
         * @return bool
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $path
         * @param bool $include_hidden
         * @param bool $recursive
         * @phpstan-return false|array<int|string, array{
         *   name: string,
         *   perms: string,
         *   permsn: string,
         *   number: false,
         *   owner: string|false,
         *   group: string|false,
         *   size: int|string|false,
         *   lastmodunix: int|string|false,
         *   lastmod: string|false,
         *   time: string|false,
         *   type: string,
         *   files: array|false,
         * }>
         * @phpstan-return false|array<string, array{name: string, perms: string, permsn: string, owner: string|false, size: int|string|false, lastmodunix: int|string|false, lastmod: string|false, time: string|false, type: 'f'|'d'|'l', group: string|false, number: int|string|false, files?: array|false}>
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Importer
    {
        public function __construct()
        {
        }
        /**
         * @param string $importer_name
         * @param string $blog_id
         * @return array
         */
        public function get_imported_posts($importer_name, $blog_id)
        {
        }
        /**
         * @param string $importer_name
         * @param string $blog_id
         * @return int
         */
        public function count_imported_posts($importer_name, $blog_id)
        {
        }
        /**
         * @param string $blog_id
         * @return array
         */
        public function get_imported_comments($blog_id)
        {
        }
        /**
         * @param int $blog_id
         * @return int|void
         */
        public function set_blog($blog_id)
        {
        }
        /**
         * @param int $user_id
         * @return int|void
         */
        public function set_user($user_id)
        {
        }
        /**
         * @param string $a
         * @param string $b
         * @return int
         */
        public function cmpr_strlen($a, $b)
        {
        }
        /**
         * @param string $url
         * @param string $username
         * @param string $password
         * @param bool $head
         * @return array
         */
        public function get_page($url, $username = '', $password = '', $head = \false)
        {
        }
        /**
         * @param int $val
         * @return int
         */
        public function bump_request_timeout($val)
        {
        }
        /**
         * @return bool
         */
        public function is_user_over_quota()
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public function min_whitespace($text)
        {
        }
        public function stop_the_insanity()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Internal_Pointers
    {
        /**
         * @param string $hook_suffix
         * @phpstan-return void
         */
        public static function enqueue_scripts($hook_suffix)
        {
        }
        public static function pointer_wp330_toolbar()
        {
        }
        public static function pointer_wp330_media_uploader()
        {
        }
        public static function pointer_wp330_saving_widgets()
        {
        }
        public static function pointer_wp340_customize_current_theme_link()
        {
        }
        public static function pointer_wp340_choose_image_from_library()
        {
        }
        public static function pointer_wp350_media()
        {
        }
        public static function pointer_wp360_revisions()
        {
        }
        public static function pointer_wp360_locks()
        {
        }
        public static function pointer_wp390_widgets()
        {
        }
        public static function pointer_wp410_dfw()
        {
        }
        public static function pointer_wp496_privacy()
        {
        }
        /**
         * @param int $user_id
         */
        public static function dismiss_pointers_for_new_users($user_id)
        {
        }
    }
    class WP_Links_List_Table extends \WP_List_Table
    {
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param object $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param object $link
         */
        public function column_name($link)
        {
        }
        /**
         * @param object $link
         */
        public function column_url($link)
        {
        }
        /**
         * @param object $link
         */
        public function column_categories($link)
        {
        }
        /**
         * @param object $link
         */
        public function column_rel($link)
        {
        }
        /**
         * @param object $link
         */
        public function column_visible($link)
        {
        }
        /**
         * @param object $link
         */
        public function column_rating($link)
        {
        }
        /**
         * @param object $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param object $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    class _WP_List_Table_Compat extends \WP_List_Table
    {
        public $_screen;
        public $_columns;
        /**
         * @param string|\WP_Screen $screen
         * @param string[] $columns
         */
        public function __construct($screen, $columns = array())
        {
        }
        /**
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
    }
    class WP_Media_List_Table extends \WP_List_Table
    {
        /**
         * @var array
         */
        protected $comment_pending_count = array();
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return bool
         */
        public function has_items()
        {
        }
        public function no_items()
        {
        }
        public function views()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param \WP_Post $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_title($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_author($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_desc($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_date($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_parent($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_comments($post)
        {
        }
        /**
         * @param \WP_Post $item
         * @param string $column_name
         * @phpstan-return void
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param \WP_Post $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    class WP_MS_Sites_List_Table extends \WP_List_Table
    {
        /**
         * @var array
         */
        public $status_list;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         */
        protected function pagination($which)
        {
        }
        /**
         * @phpstan-param 'top'|'bottom' $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param array $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param array $blog
         */
        public function column_id($blog)
        {
        }
        /**
         * @param array $blog
         */
        public function column_blogname($blog)
        {
        }
        /**
         * @param array $blog
         */
        public function column_lastupdated($blog)
        {
        }
        /**
         * @param array $blog
         */
        public function column_registered($blog)
        {
        }
        /**
         * @param array $blog
         */
        public function column_users($blog)
        {
        }
        /**
         * @param array $blog
         */
        public function column_plugins($blog)
        {
        }
        /**
         * @param array $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param array $site
         */
        protected function site_states($site)
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param array $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    class WP_MS_Themes_List_Table extends \WP_List_Table
    {
        public $site_id;
        public $is_site_themes;
        /**
         * @var bool
         */
        protected $show_autoupdates = \true;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param \WP_Theme $theme
         * @return bool
         */
        public function _search_callback($theme)
        {
        }
        // Not used by any core columns.
        /**
         * @param array $theme_a
         * @param array $theme_b
         * @return int
         */
        public function _order_callback($theme_a, $theme_b)
        {
        }
        public function no_items()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_primary_column_name()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param \WP_Theme $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_Theme $theme
         */
        public function column_name($theme)
        {
        }
        /**
         * @param \WP_Theme $theme
         */
        public function column_description($theme)
        {
        }
        /**
         * @param \WP_Theme $theme
         */
        public function column_autoupdates($theme)
        {
        }
        /**
         * @param \WP_Theme $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @param \WP_Theme $item
         */
        public function single_row_columns($item)
        {
        }
        /**
         * @param \WP_Theme $theme
         */
        public function single_row($theme)
        {
        }
    }
    class WP_MS_Users_List_Table extends \WP_List_Table
    {
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @param string $which
         */
        protected function pagination($which)
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param \WP_User $item
         * @phpstan-return void
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_User $user
         */
        public function column_id($user)
        {
        }
        /**
         * @param \WP_User $user
         */
        public function column_username($user)
        {
        }
        /**
         * @param \WP_User $user
         */
        public function column_name($user)
        {
        }
        /**
         * @param \WP_User $user
         */
        public function column_email($user)
        {
        }
        /**
         * @param \WP_User $user
         */
        public function column_registered($user)
        {
        }
        /**
         * @param \WP_User $user
         * @param string $classes
         * @param string $data
         * @param string $primary
         */
        protected function _column_blogs($user, $classes, $data, $primary)
        {
        }
        /**
         * @param \WP_User $user
         * @phpstan-return void
         */
        public function column_blogs($user)
        {
        }
        /**
         * @param \WP_User $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param \WP_User $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    class WP_Plugin_Install_List_Table extends \WP_List_Table
    {
        public $order = 'ASC';
        public $orderby = \null;
        public $groups = array();
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @return array
         */
        protected function get_installed_plugins()
        {
        }
        /**
         * @return array
         */
        protected function get_installed_plugin_slugs()
        {
        }
        /**
         * @phpstan-return void
         */
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        public function views()
        {
        }
        public function display()
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param array $plugin_data
         * @return string
         * @phpstan-param object|array{
         *   slug?: string,
         *   per_page?: int,
         *   page?: int,
         *   number?: int,
         *   search?: string,
         *   tag?: string,
         *   author?: string,
         *   user?: string,
         *   browse?: string,
         *   locale?: string,
         *   installed_plugins?: string,
         *   is_ssl?: bool,
         *   fields?: array{
         *     short_description?: bool,
         *     description?: bool,
         *     sections?: bool,
         *     tested?: bool,
         *     requires?: bool,
         *     requires_php?: bool,
         *     rating?: bool,
         *     ratings?: bool,
         *     downloaded?: bool,
         *     downloadlink?: bool,
         *     last_updated?: bool,
         *     added?: bool,
         *     tags?: bool,
         *     compatibility?: bool,
         *     homepage?: bool,
         *     versions?: bool,
         *     donate_link?: bool,
         *     reviews?: bool,
         *     banners?: bool,
         *     icons?: bool,
         *     active_installs?: bool,
         *     group?: bool,
         *     contributors?: bool,
         *   },
         * } $plugin_data See plugins_api()
         */
        protected function get_dependencies_notice($plugin_data)
        {
        }
        /**
         * @param string $name
         * @param string $slug
         * @return string
         */
        protected function get_more_details_link($name, $slug)
        {
        }
    }
    class WP_Plugins_List_Table extends \WP_List_Table
    {
        /**
         * @var bool
         */
        protected $show_autoupdates = \true;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param array $plugin
         * @return bool
         */
        public function _search_callback($plugin)
        {
        }
        /**
         * @param array $plugin_a
         * @param array $plugin_b
         * @return int
         */
        public function _order_callback($plugin_a, $plugin_b)
        {
        }
        public function no_items()
        {
        }
        /**
         * @param string $text
         * @param string $input_id
         * @phpstan-return void
         */
        public function search_box($text, $input_id)
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        public function bulk_actions($which = '')
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @phpstan-return void
         */
        public function display_rows()
        {
        }
        /**
         * @param array $item
         */
        public function single_row($item)
        {
        }
        /**
         * @return string
         */
        protected function get_primary_column_name()
        {
        }
        /**
         * @param string $dependency
         * @phpstan-return void
         */
        protected function add_dependents_to_dependency_plugin_row($dependency)
        {
        }
        /**
         * @param string $dependent
         * @phpstan-return void
         */
        protected function add_dependencies_to_dependent_plugin_row($dependent)
        {
        }
        /**
         * @param string $name
         * @param string $slug
         * @return string
         */
        protected function get_dependency_view_details_link($name, $slug)
        {
        }
        /**
         * @param string $name
         * @param string $slug
         * @return string
         */
        protected function get_view_details_link($name, $slug)
        {
        }
    }
    class WP_Post_Comments_List_Table extends \WP_Comments_List_Table
    {
        /**
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @param bool $output_empty
         */
        public function display($output_empty = \false)
        {
        }
        /**
         * @param bool $comment_status
         * @return int
         */
        public function get_per_page($comment_status = \false)
        {
        }
    }
    class WP_Posts_List_Table extends \WP_List_Table
    {
        /**
         * @var bool
         */
        protected $hierarchical_display;
        /**
         * @var array
         */
        protected $comment_pending_count;
        /**
         * @var int
         */
        protected $current_level = 0;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @param bool $display
         */
        public function set_hierarchical_display($display)
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @return bool
         */
        public function has_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return bool
         */
        protected function is_base_request()
        {
        }
        /**
         * @param string[] $args
         * @param string $link_text
         * @param string $css_class
         * @return string
         */
        protected function get_edit_link($args, $link_text, $css_class = '')
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $post_type
         * @phpstan-return void
         */
        protected function categories_dropdown($post_type)
        {
        }
        /**
         * @param string $post_type
         * @phpstan-return void
         */
        protected function formats_dropdown($post_type)
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param array $posts
         * @param int $level
         */
        public function display_rows($posts = array(), $level = 0)
        {
        }
        /**
         * @param \WP_Post $item
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_Post $post
         * @param string $classes
         * @param string $data
         * @param string $primary
         */
        protected function _column_title($post, $classes, $data, $primary)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_title($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_date($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_comments($post)
        {
        }
        /**
         * @param \WP_Post $post
         */
        public function column_author($post)
        {
        }
        /**
         * @param \WP_Post $item
         * @param string $column_name
         * @phpstan-return void
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @param int|\WP_Post $post
         * @param int $level
         */
        public function single_row($post, $level = 0)
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param \WP_Post $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        public function inline_edit()
        {
        }
    }
    abstract class WP_Privacy_Requests_Table extends \WP_List_Table
    {
        /**
         * @var string
         */
        protected $request_type = 'INVALID';
        /**
         * @var string
         */
        protected $post_type = 'INVALID';
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_admin_url()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @return object
         */
        protected function get_request_counts()
        {
        }
        /**
         * @return string[]
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @phpstan-return void
         */
        public function process_bulk_action()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_status($item)
        {
        }
        /**
         * @param int $timestamp
         * @return string
         */
        protected function get_timestamp_as_date($timestamp)
        {
        }
        /**
         * @param \WP_User_Request $item
         * @param string $column_name
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_created_timestamp($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_email($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         */
        public function column_next_steps($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         */
        public function single_row($item)
        {
        }
        public function embed_scripts()
        {
        }
    }
    class WP_Privacy_Data_Export_Requests_List_Table extends \WP_Privacy_Requests_Table
    {
        /**
         * @var string
         */
        protected $request_type = 'export_personal_data';
        /**
         * @var string
         */
        protected $post_type = 'user_request';
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_email($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         */
        public function column_next_steps($item)
        {
        }
    }
    class WP_Privacy_Data_Removal_Requests_List_Table extends \WP_Privacy_Requests_Table
    {
        /**
         * @var string
         */
        protected $request_type = 'remove_personal_data';
        /**
         * @var string
         */
        protected $post_type = 'user_request';
        /**
         * @param \WP_User_Request $item
         * @return string
         */
        public function column_email($item)
        {
        }
        /**
         * @param \WP_User_Request $item
         */
        public function column_next_steps($item)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Privacy_Policy_Content
    {
        /**
         * @param string $plugin_name
         * @param string $policy_text
         * @phpstan-return void
         */
        public static function add($plugin_name, $policy_text)
        {
        }
        public static function text_change_check()
        {
        }
        /**
         * @phpstan-return void
         */
        public static function policy_text_changed_notice()
        {
        }
        /**
         * @param int $post_id
         * @phpstan-return void
         */
        public static function _policy_page_updated($post_id)
        {
        }
        /**
         * @return array
         */
        public static function get_suggested_policy_text()
        {
        }
        /**
         * @param \WP_Post|null $post
         * @phpstan-return void
         */
        public static function notice($post = \null)
        {
        }
        public static function privacy_policy_guide()
        {
        }
        /**
         * @param bool $description
         * @param bool $blocks
         * @return string
         */
        public static function get_default_content($description = \false, $blocks = \true)
        {
        }
        public static function add_suggested_content()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Screen
    {
        /**
         * @var string
         */
        public $action;
        /**
         * @var string
         */
        public $base;
        /**
         * @var string
         */
        public $id;
        /**
         * @var bool
         */
        public $is_network;
        /**
         * @var bool
         */
        public $is_user;
        /**
         * @var string|null
         */
        public $parent_base;
        /**
         * @var string|null
         */
        public $parent_file;
        /**
         * @var string
         */
        public $post_type;
        /**
         * @var string
         */
        public $taxonomy;
        /**
         * @var bool
         */
        public $is_block_editor = \false;
        /**
         * @param string|\WP_Screen $hook_name
         * @return \WP_Screen
         */
        public static function get($hook_name = '')
        {
        }
        public function set_current_screen()
        {
        }
        /**
         * @param string $admin
         * @return bool
         */
        public function in_admin($admin = \null)
        {
        }
        /**
         * @param bool $set
         * @return bool
         */
        public function is_block_editor($set = \null)
        {
        }
        /**
         * @param \WP_Screen $screen
         * @param string $help
         */
        public static function add_old_compat_help($screen, $help)
        {
        }
        /**
         * @param string $parent_file
         */
        public function set_parentage($parent_file)
        {
        }
        /**
         * @param string $option
         * @param mixed $args
         */
        public function add_option($option, $args = array())
        {
        }
        /**
         * @param string $option
         */
        public function remove_option($option)
        {
        }
        public function remove_options()
        {
        }
        /**
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * @param string $option
         * @param string|false $key
         * @return string
         */
        public function get_option($option, $key = \false)
        {
        }
        /**
         * @return array
         */
        public function get_help_tabs()
        {
        }
        /**
         * @param string $id
         * @return array
         */
        public function get_help_tab($id)
        {
        }
        /**
         * @phpstan-param array{
         *   title?: string,
         *   id?: string,
         *   content?: string,
         *   callback?: callable,
         *   priority?: int,
         * } $args
         * @phpstan-return void
         */
        public function add_help_tab($args)
        {
        }
        /**
         * @param string $id
         */
        public function remove_help_tab($id)
        {
        }
        public function remove_help_tabs()
        {
        }
        /**
         * @return string
         */
        public function get_help_sidebar()
        {
        }
        /**
         * @param string $content
         */
        public function set_help_sidebar($content)
        {
        }
        /**
         * @return int
         */
        public function get_columns()
        {
        }
        /**
         * @return string[]
         */
        public function get_screen_reader_content()
        {
        }
        /**
         * @param string $key
         * @return string
         */
        public function get_screen_reader_text($key)
        {
        }
        /**
         * @phpstan-param array{
         *   heading_views?: string,
         *   heading_pagination?: string,
         *   heading_list?: string,
         * } $content
         */
        public function set_screen_reader_content($content = array())
        {
        }
        public function remove_screen_reader_content()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_screen_meta()
        {
        }
        /**
         * @return bool
         */
        public function show_screen_options()
        {
        }
        /**
         * @phpstan-param array{
         *   wrap?: bool,
         * } $options
         */
        public function render_screen_options($options = array())
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_meta_boxes_preferences()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_list_table_columns_preferences()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_screen_layout()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_per_page_options()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_view_mode()
        {
        }
        /**
         * @param string $key
         * @param string $tag
         * @phpstan-return void
         */
        public function render_screen_reader_content($key = '', $tag = 'h2')
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Site_Health_Auto_Updates
    {
        public function __construct()
        {
        }
        /**
         * @return array
         */
        public function run_tests()
        {
        }
        /**
         * @param string $constant
         * @param bool|string|array $value
         * @return array
         */
        public function test_constants($constant, $value)
        {
        }
        /**
         * @return array
         */
        public function test_wp_version_check_attached()
        {
        }
        /**
         * @return array
         */
        public function test_filters_automatic_updater_disabled()
        {
        }
        /**
         * @return array|false
         */
        public function test_wp_automatic_updates_disabled()
        {
        }
        /**
         * @return array|false
         */
        public function test_if_failed_update()
        {
        }
        /**
         * @return array
         */
        public function test_vcs_abspath()
        {
        }
        /**
         * @return array
         */
        public function test_check_wp_filesystem_method()
        {
        }
        /**
         * @return array|false
         */
        public function test_all_files_writable()
        {
        }
        /**
         * @return array|false
         */
        public function test_accepts_dev_updates()
        {
        }
        /**
         * @return array
         */
        public function test_accepts_minor_updates()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Site_Health
    {
        public $is_mariadb = \false;
        public $php_memory_limit;
        public $schedules;
        public $crons;
        public $last_missed_cron = \null;
        public $last_late_cron = \null;
        public function __construct()
        {
        }
        /**
         * @param string $tab
         */
        public function show_site_health_tab($tab)
        {
        }
        /**
         * @return \WP_Site_Health|null
         */
        public static function get_instance()
        {
        }
        /**
         * @phpstan-return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * @phpstan-return void
         */
        public function check_wp_version_check_exists()
        {
        }
        /**
         * @return array
         */
        public function get_test_wordpress_version()
        {
        }
        /**
         * @return array
         */
        public function get_test_plugin_version()
        {
        }
        /**
         * @return array
         */
        public function get_test_theme_version()
        {
        }
        /**
         * @return array
         */
        public function get_test_php_version()
        {
        }
        /**
         * @return array
         */
        public function get_test_php_extensions()
        {
        }
        /**
         * @return array
         */
        public function get_test_php_default_timezone()
        {
        }
        /**
         * @return array
         */
        public function get_test_php_sessions()
        {
        }
        /**
         * @return array
         */
        public function get_test_sql_server()
        {
        }
        /**
         * @return array
         */
        public function get_test_dotorg_communication()
        {
        }
        /**
         * @return array
         */
        public function get_test_is_in_debug_mode()
        {
        }
        /**
         * @return array
         */
        public function get_test_https_status()
        {
        }
        /**
         * @return array
         */
        public function get_test_ssl_support()
        {
        }
        /**
         * @return array
         */
        public function get_test_scheduled_events()
        {
        }
        /**
         * @return array
         */
        public function get_test_background_updates()
        {
        }
        /**
         * @return array
         */
        public function get_test_plugin_theme_auto_updates()
        {
        }
        /**
         * @return array
         */
        public function get_test_available_updates_disk_space()
        {
        }
        /**
         * @return array
         */
        public function get_test_update_temp_backup_writable()
        {
        }
        /**
         * @return array
         */
        public function get_test_loopback_requests()
        {
        }
        /**
         * @return array
         */
        public function get_test_http_requests()
        {
        }
        /**
         * @return array
         */
        public function get_test_rest_availability()
        {
        }
        /**
         * @return array
         */
        public function get_test_file_uploads()
        {
        }
        /**
         * @return array
         */
        public function get_test_authorization_header()
        {
        }
        /**
         * @return array
         */
        public function get_test_page_cache()
        {
        }
        /**
         * @return array
         */
        public function get_test_persistent_object_cache()
        {
        }
        /**
         * @return int
         */
        public function get_autoloaded_options_size()
        {
        }
        /**
         * @return array
         */
        public function get_test_autoloaded_options()
        {
        }
        /**
         * @return array
         */
        public static function get_tests()
        {
        }
        /**
         * @param string $body_class
         * @return string
         */
        public function admin_body_class($body_class)
        {
        }
        /**
         * @return bool|\WP_Error
         */
        public function has_missed_cron()
        {
        }
        /**
         * @return bool|\WP_Error
         */
        public function has_late_cron()
        {
        }
        /**
         * @return object
         */
        public function detect_plugin_theme_auto_update_issues()
        {
        }
        /**
         * @return object
         */
        public function can_perform_loopback()
        {
        }
        public function maybe_create_scheduled_event()
        {
        }
        public function wp_cron_scheduled_check()
        {
        }
        /**
         * @return bool
         */
        public function is_development_environment()
        {
        }
        /**
         * @return array
         */
        public function get_page_cache_headers()
        {
        }
        /**
         * @return bool
         */
        public function should_suggest_persistent_object_cache()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Site_Icon
    {
        /**
         * @var int
         */
        public $min_size = 512;
        /**
         * @var int
         */
        public $page_crop = 512;
        /**
         * @var int[]
         */
        public $site_icon_sizes = array(
            /*
             * Square, medium sized tiles for IE11+.
             *
             * See https://msdn.microsoft.com/library/dn455106(v=vs.85).aspx
             */
            270,
            /*
             * App icon for Android/Chrome.
             *
             * @link https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android
             * @link https://developer.chrome.com/multidevice/android/installtohomescreen
             */
            192,
            /*
             * App icons up to iPhone 6 Plus.
             *
             * See https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html
             */
            180,
            // Our regular Favicon.
            32,
        );
        public function __construct()
        {
        }
        /**
         * @param string $cropped
         * @param int $parent_attachment_id
         * @return array
         */
        public function create_attachment_object($cropped, $parent_attachment_id)
        {
        }
        /**
         * @param array $attachment
         * @param string $file
         * @return int
         */
        public function insert_attachment($attachment, $file)
        {
        }
        /**
         * @param array[] $sizes
         * @return array[]
         */
        public function additional_sizes($sizes = array())
        {
        }
        /**
         * @param string[] $sizes
         * @return string[]
         */
        public function intermediate_image_sizes($sizes = array())
        {
        }
        /**
         * @param int $post_id
         */
        public function delete_attachment_data($post_id)
        {
        }
        /**
         * @param null|array|string $value
         * @param int $post_id
         * @param string $meta_key
         * @param bool $single
         * @return array|null|string
         */
        public function get_post_metadata($value, $post_id, $meta_key, $single)
        {
        }
    }
    class WP_Terms_List_Table extends \WP_List_Table
    {
        public $callback_args;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @phpstan-return void
         */
        public function display_rows_or_placeholder()
        {
        }
        /**
         * @param \WP_Term $tag
         * @param int $level
         */
        public function single_row($tag, $level = 0)
        {
        }
        /**
         * @param \WP_Term $item
         * @return string
         */
        public function column_cb($item)
        {
        }
        /**
         * @param \WP_Term $tag
         * @return string
         */
        public function column_name($tag)
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param \WP_Term $item
         * @param string $column_name
         * @param string $primary
         * @return string
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * @param \WP_Term $tag
         * @return string
         */
        public function column_description($tag)
        {
        }
        /**
         * @param \WP_Term $tag
         * @return string
         */
        public function column_slug($tag)
        {
        }
        /**
         * @param \WP_Term $tag
         * @return string
         */
        public function column_posts($tag)
        {
        }
        /**
         * @param \WP_Term $tag
         * @return string
         */
        public function column_links($tag)
        {
        }
        /**
         * @param \WP_Term $item
         * @param string $column_name
         * @return string
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @phpstan-return void
         */
        public function inline_edit()
        {
        }
    }
    class WP_Themes_List_Table extends \WP_List_Table
    {
        protected $search_terms = array();
        public $features = array();
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        /**
         * @phpstan-return void
         */
        public function no_items()
        {
        }
        /**
         * @param string $which
         * @phpstan-return void
         */
        public function tablenav($which = 'top')
        {
        }
        public function display()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        public function display_rows_or_placeholder()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param \WP_Theme $theme
         * @return bool
         */
        public function search_theme($theme)
        {
        }
        /**
         * @param array $extra_args
         */
        public function _js_vars($extra_args = array())
        {
        }
    }
    class WP_Theme_Install_List_Table extends \WP_Themes_List_Table
    {
        public $features = array();
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @phpstan-return void
         */
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_views()
        {
        }
        public function display()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @phpstan-param object{
         *   name?: string,
         *   slug?: string,
         *   version?: string,
         *   author?: string,
         *   preview_url?: string,
         *   screenshot_url?: string,
         *   rating?: float,
         *   num_ratings?: int,
         *   homepage?: string,
         *   description?: string,
         *   download_link?: string,
         * } $theme
         * @phpstan-return void
         */
        public function single_row($theme)
        {
        }
        public function theme_installer()
        {
        }
        /**
         * @param \stdClass $theme
         */
        public function theme_installer_single($theme)
        {
        }
        /**
         * @param \stdClass $theme
         * @phpstan-return void
         */
        public function install_theme_info($theme)
        {
        }
        /**
         * @param array $extra_args
         */
        public function _js_vars($extra_args = array())
        {
        }
    }
    class WP_Users_List_Table extends \WP_List_Table
    {
        /**
         * @var int
         */
        public $site_id;
        /**
         * @var bool
         */
        public $is_site_users;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function prepare_items()
        {
        }
        public function no_items()
        {
        }
        /**
         * @return string[]
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return string[]
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        public function display_rows()
        {
        }
        /**
         * @param \WP_User $user_object
         * @param string $style
         * @param string $role
         * @param int $numposts
         * @return string
         */
        public function single_row($user_object, $style = '', $role = '', $numposts = 0)
        {
        }
        /**
         * @return string
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param \WP_User $user_object
         * @return string[]
         */
        protected function get_role_list($user_object)
        {
        }
    }
    class WP_User_Search
    {
        /**
         * @var mixed
         */
        var $results;
        /**
         * @var string
         */
        var $search_term;
        /**
         * @var int
         */
        var $page;
        /**
         * @var string
         */
        var $role;
        /**
         * @var int|bool
         */
        var $raw_page;
        /**
         * @var int
         */
        var $users_per_page = 50;
        /**
         * @var int
         */
        var $first_user;
        /**
         * @var int
         */
        var $last_user;
        /**
         * @var string
         */
        var $query_limit;
        /**
         * @var string
         */
        var $query_orderby;
        /**
         * @var string
         */
        var $query_from;
        /**
         * @var string
         */
        var $query_where;
        /**
         * @var int
         */
        var $total_users_for_query = 0;
        /**
         * @var bool
         */
        var $too_many_total_users = \false;
        /**
         * @var \WP_Error
         */
        var $search_errors;
        /**
         * @var string
         */
        var $paging_text;
        /**
         * @param string $search_term
         * @param int $page
         * @param string $role
         * @return \WP_User_Search
         */
        function __construct($search_term = '', $page = '', $role = '')
        {
        }
        /**
         * @param string $search_term
         * @param int $page
         * @param string $role
         * @return \WP_User_Search
         */
        public function WP_User_Search($search_term = '', $page = '', $role = '')
        {
        }
        public function prepare_query()
        {
        }
        public function query()
        {
        }
        function prepare_vars_for_template_usage()
        {
        }
        public function do_paging()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        function page_links()
        {
        }
        /**
         * @return bool
         */
        function results_are_paged()
        {
        }
        /**
         * @return bool
         */
        function is_search()
        {
        }
    }
    class WP_Privacy_Data_Export_Requests_Table extends \WP_Privacy_Data_Export_Requests_List_Table
    {
        function __construct($args)
        {
        }
    }
    class WP_Privacy_Data_Removal_Requests_Table extends \WP_Privacy_Data_Removal_Requests_List_Table
    {
        function __construct($args)
        {
        }
    }
    class getid3_lib
    {
        /**
         * @param string $string
         * @param bool $hex
         * @param bool $spaces
         * @param string|bool $htmlencoding
         * @return string
         */
        public static function PrintHexBytes($string, $hex = \true, $spaces = \true, $htmlencoding = 'UTF-8')
        {
        }
        /**
         * @param float $floatnumber
         * @return float|int
         */
        public static function trunc($floatnumber)
        {
        }
        /**
         * @param int|null $variable
         * @param int $increment
         * @return bool
         */
        public static function safe_inc(&$variable, $increment = 1)
        {
        }
        /**
         * @param int|float $floatnum
         * @return int|float
         */
        public static function CastAsInt($floatnum)
        {
        }
        /**
         * @param int $num
         * @return bool
         */
        public static function intValueSupported($num)
        {
        }
        /**
         * @param float|int $numerator
         * @param float|int $denominator
         * @param float|int $fallback
         * @return float|int
         */
        public static function SafeDiv($numerator, $denominator, $fallback = 0)
        {
        }
        /**
         * @param string $fraction
         * @return float
         */
        public static function DecimalizeFraction($fraction)
        {
        }
        /**
         * @param string $binarynumerator
         * @return float
         */
        public static function DecimalBinary2Float($binarynumerator)
        {
        }
        /**
         * @param string $binarypointnumber
         * @param int $maxbits
         * @return array
         */
        public static function NormalizeBinaryPoint($binarypointnumber, $maxbits = 52)
        {
        }
        /**
         * @param float $floatvalue
         * @return string
         */
        public static function Float2BinaryDecimal($floatvalue)
        {
        }
        /**
         * @param float $floatvalue
         * @param int $bits
         * @return string|false
         */
        public static function Float2String($floatvalue, $bits)
        {
        }
        /**
         * @param string $byteword
         * @return float|false
         */
        public static function LittleEndian2Float($byteword)
        {
        }
        /**
         * @param string $byteword
         * @return float|false
         */
        public static function BigEndian2Float($byteword)
        {
        }
        /**
         * @param string $byteword
         * @param bool $synchsafe
         * @param bool $signed
         * @return int|float|false
         */
        public static function BigEndian2Int($byteword, $synchsafe = \false, $signed = \false)
        {
        }
        /**
         * @param string $byteword
         * @param bool $signed
         * @return int|float|false
         */
        public static function LittleEndian2Int($byteword, $signed = \false)
        {
        }
        /**
         * @param string $byteword
         * @return string
         */
        public static function LittleEndian2Bin($byteword)
        {
        }
        /**
         * @param string $byteword
         * @return string
         */
        public static function BigEndian2Bin($byteword)
        {
        }
        /**
         * @param int $number
         * @param int $minbytes
         * @param bool $synchsafe
         * @param bool $signed
         * @return string
         */
        public static function BigEndian2String($number, $minbytes = 1, $synchsafe = \false, $signed = \false)
        {
        }
        /**
         * @param int $number
         * @return string
         */
        public static function Dec2Bin($number)
        {
        }
        /**
         * @param string $binstring
         * @param bool $signed
         * @return int|float
         */
        public static function Bin2Dec($binstring, $signed = \false)
        {
        }
        /**
         * @param string $binstring
         * @return string
         */
        public static function Bin2String($binstring)
        {
        }
        /**
         * @param int $number
         * @param int $minbytes
         * @param bool $synchsafe
         * @return string
         */
        public static function LittleEndian2String($number, $minbytes = 1, $synchsafe = \false)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         * @return array|false
         */
        public static function array_merge_clobber($array1, $array2)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         * @return array|false
         */
        public static function array_merge_noclobber($array1, $array2)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         * @return array|false|null
         */
        public static function flipped_array_merge_noclobber($array1, $array2)
        {
        }
        /**
         * @param array $theArray
         * @return bool
         */
        public static function ksort_recursive(&$theArray)
        {
        }
        /**
         * @param string $filename
         * @param int $numextensions
         * @return string
         */
        public static function fileextension($filename, $numextensions = 1)
        {
        }
        /**
         * @param int $seconds
         * @return string
         */
        public static function PlaytimeString($seconds)
        {
        }
        /**
         * @param int $macdate
         * @return int|float
         */
        public static function DateMac2Unix($macdate)
        {
        }
        /**
         * @param string $rawdata
         * @return float
         */
        public static function FixedPoint8_8($rawdata)
        {
        }
        /**
         * @param string $rawdata
         * @return float
         */
        public static function FixedPoint16_16($rawdata)
        {
        }
        /**
         * @param string $rawdata
         * @return float
         */
        public static function FixedPoint2_30($rawdata)
        {
        }
        /**
         * @param string $ArrayPath
         * @param string $Separator
         * @param mixed $Value
         * @return array
         */
        public static function CreateDeepArray($ArrayPath, $Separator, $Value)
        {
        }
        /**
         * @param array $arraydata
         * @param bool $returnkey
         * @return int|false
         */
        public static function array_max($arraydata, $returnkey = \false)
        {
        }
        /**
         * @param array $arraydata
         * @param bool $returnkey
         * @return int|false
         */
        public static function array_min($arraydata, $returnkey = \false)
        {
        }
        /**
         * @param string $XMLstring
         * @return array|false
         */
        public static function XML2array($XMLstring)
        {
        }
        /**
         * @param \SimpleXMLElement|array|mixed $XMLobject
         * @return mixed
         */
        public static function SimpleXMLelement2array($XMLobject)
        {
        }
        /**
         * @param string $file
         * @param int $offset
         * @param int $end
         * @param string $algorithm
         * @return string|false
         */
        public static function hash_data($file, $offset, $end, $algorithm)
        {
        }
        /**
         * @param string $filename_source
         * @param string $filename_dest
         * @param int $offset
         * @param int $length
         * @return bool
         */
        public static function CopyFileParts($filename_source, $filename_dest, $offset, $length)
        {
        }
        /**
         * @param int $charval
         * @return string
         */
        public static function iconv_fallback_int_utf8($charval)
        {
        }
        /**
         * @param string $string
         * @param bool $bom
         * @return string
         */
        public static function iconv_fallback_iso88591_utf8($string, $bom = \false)
        {
        }
        /**
         * @param string $string
         * @param bool $bom
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16be($string, $bom = \false)
        {
        }
        /**
         * @param string $string
         * @param bool $bom
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16le($string, $bom = \false)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf8_iso88591($string)
        {
        }
        /**
         * @param string $string
         * @param bool $bom
         * @return string
         */
        public static function iconv_fallback_utf8_utf16be($string, $bom = \false)
        {
        }
        /**
         * @param string $string
         * @param bool $bom
         * @return string
         */
        public static function iconv_fallback_utf8_utf16le($string, $bom = \false)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf8_utf16($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16be_utf8($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16le_utf8($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16be_iso88591($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16le_iso88591($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16_iso88591($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function iconv_fallback_utf16_utf8($string)
        {
        }
        /**
         * @param string $in_charset
         * @param string $out_charset
         * @param string $string
         * @return string
         */
        public static function iconv_fallback($in_charset, $out_charset, $string)
        {
        }
        /**
         * @param mixed $data
         * @param string $charset
         * @return mixed
         */
        public static function recursiveMultiByteCharString2HTML($data, $charset = 'ISO-8859-1')
        {
        }
        /**
         * @param string|int|float $string
         * @param string $charset
         * @return string
         */
        public static function MultiByteCharString2HTML($string, $charset = 'ISO-8859-1')
        {
        }
        /**
         * @param int $namecode
         * @return string
         */
        public static function RGADnameLookup($namecode)
        {
        }
        /**
         * @param int $originatorcode
         * @return string
         */
        public static function RGADoriginatorLookup($originatorcode)
        {
        }
        /**
         * @param int $rawadjustment
         * @param int $signbit
         * @return float
         */
        public static function RGADadjustmentLookup($rawadjustment, $signbit)
        {
        }
        /**
         * @param int $namecode
         * @param int $originatorcode
         * @param int $replaygain
         * @return string
         */
        public static function RGADgainString($namecode, $originatorcode, $replaygain)
        {
        }
        /**
         * @param float $amplitude
         * @return float
         */
        public static function RGADamplitude2dB($amplitude)
        {
        }
        /**
         * @param string $imgData
         * @param array $imageinfo
         * @return array|false
         */
        public static function GetDataImageSize($imgData, &$imageinfo = array())
        {
        }
        /**
         * @param string $mime_type
         * @return string
         */
        public static function ImageExtFromMime($mime_type)
        {
        }
        /**
         * @param array $ThisFileInfo
         * @param bool $option_tags_html
         * @return bool
         */
        public static function CopyTagsToComments(&$ThisFileInfo, $option_tags_html = \true)
        {
        }
        /**
         * @param string $key
         * @param int $begin
         * @param int $end
         * @param string $file
         * @param string $name
         * @return string
         */
        public static function EmbeddedLookup($key, $begin, $end, $file, $name)
        {
        }
        /**
         * @param string $filename
         * @param string $sourcefile
         * @param bool $DieOnFailure
         * @return bool
         */
        public static function IncludeDependency($filename, $sourcefile, $DieOnFailure = \false)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function trimNullByte($string)
        {
        }
        /**
         * @param string $path
         * @return float|bool
         */
        public static function getFileSizeSyscall($path)
        {
        }
        /**
         * @param string $filename
         * @return string|false
         */
        public static function truepath($filename)
        {
        }
        /**
         * @param string $path
         * @param string $suffix
         * @return string
         */
        public static function mb_basename($path, $suffix = '')
        {
        }
    }
    // End: Defines
    class getID3
    {
        /*
         * Settings
         */
        /**
         * @var string
         */
        public $encoding = 'UTF-8';
        /**
         * @var string
         */
        public $encoding_id3v1 = 'ISO-8859-1';
        /**
         * @var bool
         */
        public $encoding_id3v1_autodetect = \false;
        /*
         * Optional tag checks - disable for speed.
         */
        /**
         * @var bool
         */
        public $option_tag_id3v1 = \true;
        /**
         * @var bool
         */
        public $option_tag_id3v2 = \true;
        /**
         * @var bool
         */
        public $option_tag_lyrics3 = \true;
        /**
         * @var bool
         */
        public $option_tag_apetag = \true;
        /**
         * @var bool
         */
        public $option_tags_process = \true;
        /**
         * @var bool
         */
        public $option_tags_html = \true;
        /*
         * Optional tag/comment calculations
         */
        /**
         * @var bool
         */
        public $option_extra_info = \true;
        /*
         * Optional handling of embedded attachments (e.g. images)
         */
        /**
         * @var bool|string
         */
        public $option_save_attachments = \true;
        /*
         * Optional calculations
         */
        /**
         * @var bool
         */
        public $option_md5_data = \false;
        /**
         * @var bool
         */
        public $option_md5_data_source = \false;
        /**
         * @var bool
         */
        public $option_sha1_data = \false;
        /**
         * @var bool|null
         */
        public $option_max_2gb_check;
        /**
         * @var int
         */
        public $option_fread_buffer_size = 32768;
        // module-specific options
        /**
         * @var bool
         */
        public $options_archive_rar_use_php_rar_extension = \true;
        /**
         * @var bool
         */
        public $options_archive_gzip_parse_contents = \false;
        /**
         * @var bool
         */
        public $options_audio_midi_scanwholefile = \true;
        /**
         * @var bool
         */
        public $options_audio_mp3_allow_bruteforce = \false;
        /**
         * @var int
         */
        public $options_audio_mp3_mp3_valid_check_frames = 50;
        /**
         * @var bool
         */
        public $options_audio_wavpack_quick_parsing = \false;
        /**
         * @var int
         */
        public $options_audiovideo_flv_max_frames = 100000;
        /**
         * @var bool
         */
        public $options_audiovideo_matroska_hide_clusters = \true;
        /**
         * @var bool
         */
        public $options_audiovideo_matroska_parse_whole_file = \false;
        /**
         * @var bool
         */
        public $options_audiovideo_quicktime_ReturnAtomData = \false;
        /**
         * @var bool
         */
        public $options_audiovideo_quicktime_ParseAllPossibleAtoms = \false;
        /**
         * @var bool
         */
        public $options_audiovideo_swf_ReturnAllTagData = \false;
        /**
         * @var bool
         */
        public $options_graphic_bmp_ExtractPalette = \false;
        /**
         * @var bool
         */
        public $options_graphic_bmp_ExtractData = \false;
        /**
         * @var int
         */
        public $options_graphic_png_max_data_bytes = 10000000;
        /**
         * @var bool
         */
        public $options_misc_pdf_returnXREF = \false;
        /**
         * @var int
         */
        public $options_misc_torrent_max_torrent_filesize = 1048576;
        // Public variables
        /**
         * @var string
         */
        public $filename;
        /**
         * @var resource
         */
        public $fp;
        /**
         * @var array
         */
        public $info;
        /**
         * @var string
         */
        public $tempdir = \GETID3_TEMP_DIR;
        /**
         * @var int
         */
        public $memory_limit = 0;
        /**
         * @var string
         */
        protected $startup_error = '';
        /**
         * @var string
         */
        protected $startup_warning = '';
        const VERSION = '1.9.23-202310190849';
        const FREAD_BUFFER_SIZE = 32768;
        const ATTACHMENTS_NONE = \false;
        const ATTACHMENTS_INLINE = \true;
        /**
         * @phpstan-return void
         */
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function version()
        {
        }
        /**
         * @return int
         */
        public function fread_buffer_size()
        {
        }
        /**
         * @param array $optArray
         * @return bool
         */
        public function setOption($optArray)
        {
        }
        /**
         * @param string $filename
         * @param int $filesize
         * @param resource $fp
         * @return bool
         */
        public function openfile($filename, $filesize = \null, $fp = \null)
        {
        }
        /**
         * @param string $filename
         * @param int $filesize
         * @param string $original_filename
         * @param resource $fp
         * @return array
         */
        public function analyze($filename, $filesize = \null, $original_filename = '', $fp = \null)
        {
        }
        /**
         * @param string $message
         * @return array
         */
        public function error($message)
        {
        }
        /**
         * @param string $message
         * @return bool
         */
        public function warning($message)
        {
        }
        /**
         * @return array
         */
        public function GetFileFormatArray()
        {
        }
        /**
         * @param string $filedata
         * @param string $filename
         * @return mixed|false
         */
        public function GetFileFormat(&$filedata, $filename = '')
        {
        }
        /**
         * @param array $array
         * @param string $encoding
         * @phpstan-return void
         */
        public function CharConvert(&$array, $encoding)
        {
        }
        /**
         * @return bool
         */
        public function HandleAllTags()
        {
        }
        /**
         * @param array $ThisFileInfo
         * @return bool
         */
        public function CopyTagsToComments(&$ThisFileInfo)
        {
        }
        /**
         * @param string $algorithm
         * @return array|bool
         */
        public function getHashdata($algorithm)
        {
        }
        public function ChannelsBitratePlaytimeCalculations()
        {
        }
        /**
         * @return bool
         */
        public function CalculateCompressionRatioVideo()
        {
        }
        /**
         * @return bool
         */
        public function CalculateCompressionRatioAudio()
        {
        }
        /**
         * @return bool
         */
        public function CalculateReplayGain()
        {
        }
        /**
         * @return bool
         */
        public function ProcessAudioStreams()
        {
        }
        /**
         * @return string|bool
         */
        public function getid3_tempnam()
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function include_module($name)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public static function is_writable($filename)
        {
        }
    }
    abstract class getid3_handler
    {
        /**
         * @var \getID3
         */
        protected $getid3;
        // pointer
        /**
         * @var bool
         */
        protected $data_string_flag = \false;
        /**
         * @var string
         */
        protected $data_string = '';
        /**
         * @var int
         */
        protected $data_string_position = 0;
        /**
         * @var int
         */
        protected $data_string_length = 0;
        /**
         * @param \getID3 $getid3
         * @param string $call_module
         */
        public function __construct(\getID3 $getid3, $call_module = \null)
        {
        }
        /**
         * @return bool
         */
        public abstract function Analyze();
        /**
         * @param string $string
         */
        public function AnalyzeString($string)
        {
        }
        /**
         * @param string $string
         */
        public function setStringMode($string)
        {
        }
        /**
         * @return int|bool
         */
        protected function ftell()
        {
        }
        /**
         * @param int $bytes
         * @return string|false
         */
        protected function fread($bytes)
        {
        }
        /**
         * @param int $bytes
         * @param int $whence
         * @return int
         */
        protected function fseek($bytes, $whence = \SEEK_SET)
        {
        }
        /**
         * @return string|false
         */
        protected function fgets()
        {
        }
        /**
         * @return bool
         */
        protected function feof()
        {
        }
        /**
         * @param string $module
         * @return bool
         */
        protected final function isDependencyFor($module)
        {
        }
        /**
         * @param string $text
         * @return bool
         */
        protected function error($text)
        {
        }
        /**
         * @param string $text
         * @return bool
         */
        protected function warning($text)
        {
        }
        /**
         * @param string $text
         */
        protected function notice($text)
        {
        }
        /**
         * @param string $name
         * @param int $offset
         * @param int $length
         * @param string $image_mime
         * @return string|null
         */
        public function saveAttachment($name, $offset, $length, $image_mime = \null)
        {
        }
    }
    class getid3_exception extends \Exception
    {
        public $message;
    }
    class getid3_asf extends \getid3_handler
    {
        protected static $ASFIndexParametersObjectIndexSpecifiersIndexTypes = array(1 => 'Nearest Past Data Packet', 2 => 'Nearest Past Media Object', 3 => 'Nearest Past Cleanpoint');
        protected static $ASFMediaObjectIndexParametersObjectIndexSpecifiersIndexTypes = array(1 => 'Nearest Past Data Packet', 2 => 'Nearest Past Media Object', 3 => 'Nearest Past Cleanpoint', 0xff => 'Frame Number Offset');
        protected static $ASFTimecodeIndexParametersObjectIndexSpecifiersIndexTypes = array(2 => 'Nearest Past Media Object', 3 => 'Nearest Past Cleanpoint');
        /**
         * @param \getID3 $getid3
         */
        public function __construct(\getID3 $getid3)
        {
        }
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $CodecListType
         * @return string
         */
        public static function codecListObjectTypeLookup($CodecListType)
        {
        }
        /**
         * @return array
         */
        public static function KnownGUIDs()
        {
        }
        /**
         * @param string $GUIDstring
         * @return string|false
         */
        public static function GUIDname($GUIDstring)
        {
        }
        /**
         * @param int $id
         * @return string
         */
        public static function ASFIndexObjectIndexTypeLookup($id)
        {
        }
        /**
         * @param string $GUIDstring
         * @return string
         */
        public static function GUIDtoBytestring($GUIDstring)
        {
        }
        /**
         * @param string $Bytestring
         * @return string
         */
        public static function BytestringToGUID($Bytestring)
        {
        }
        /**
         * @param int $FILETIME
         * @param bool $round
         * @return float|int
         */
        public static function FILETIMEtoUNIXtime($FILETIME, $round = \true)
        {
        }
        /**
         * @param int $WMpictureType
         * @return string
         */
        public static function WMpictureTypeLookup($WMpictureType)
        {
        }
        /**
         * @param string $asf_header_extension_object_data
         * @param int $unhandled_sections
         * @return array
         */
        public function HeaderExtensionObjectDataParse(&$asf_header_extension_object_data, &$unhandled_sections)
        {
        }
        /**
         * @param int $id
         * @return string
         */
        public static function metadataLibraryObjectDataTypeLookup($id)
        {
        }
        /**
         * @param string $data
         * @return array
         */
        public function ASF_WMpicture(&$data)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function TrimConvert($string)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function TrimTerm($string)
        {
        }
    }
    class getid3_flv extends \getid3_handler
    {
        const magic = 'FLV';
        /**
         * @var int
         */
        public $max_frames = 100000;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $id
         * @return string|false
         */
        public static function audioFormatLookup($id)
        {
        }
        /**
         * @param int $id
         * @return int|false
         */
        public static function audioRateLookup($id)
        {
        }
        /**
         * @param int $id
         * @return int|false
         */
        public static function audioBitDepthLookup($id)
        {
        }
        /**
         * @param int $id
         * @return string|false
         */
        public static function videoCodecLookup($id)
        {
        }
    }
    class AMFStream
    {
        /**
         * @var string
         */
        public $bytes;
        /**
         * @var int
         */
        public $pos;
        /**
         * @param string $bytes
         */
        public function __construct(&$bytes)
        {
        }
        /**
         * @return int
         */
        public function readByte()
        {
        }
        /**
         * @return int
         */
        public function readInt()
        {
        }
        /**
         * @return int
         */
        public function readLong()
        {
        }
        /**
         * @return float|false
         */
        public function readDouble()
        {
        }
        /**
         * @return string
         */
        public function readUTF()
        {
        }
        /**
         * @return string
         */
        public function readLongUTF()
        {
        }
        /**
         * @param int $length
         * @return string
         */
        public function read($length)
        {
        }
        /**
         * @return int
         */
        public function peekByte()
        {
        }
        /**
         * @return int
         */
        public function peekInt()
        {
        }
        /**
         * @return int
         */
        public function peekLong()
        {
        }
        /**
         * @return float|false
         */
        public function peekDouble()
        {
        }
        /**
         * @return string
         */
        public function peekUTF()
        {
        }
        /**
         * @return string
         */
        public function peekLongUTF()
        {
        }
    }
    class AMFReader
    {
        /**
         * @var \AMFStream
         */
        public $stream;
        /**
         * @param \AMFStream $stream
         */
        public function __construct(\AMFStream $stream)
        {
        }
        /**
         * @return mixed
         */
        public function readData()
        {
        }
        /**
         * @return float|false
         */
        public function readDouble()
        {
        }
        /**
         * @return bool
         */
        public function readBoolean()
        {
        }
        /**
         * @return string
         */
        public function readString()
        {
        }
        /**
         * @return array
         */
        public function readObject()
        {
        }
        /**
         * @return array
         */
        public function readMixedArray()
        {
        }
        /**
         * @return array
         */
        public function readArray()
        {
        }
        /**
         * @return float|false
         */
        public function readDate()
        {
        }
        /**
         * @return string
         */
        public function readLongString()
        {
        }
        /**
         * @return string
         */
        public function readXML()
        {
        }
        /**
         * @return array
         */
        public function readTypedObject()
        {
        }
    }
    class AVCSequenceParameterSetReader
    {
        /**
         * @var string
         */
        public $sps;
        public $start = 0;
        public $currentBytes = 0;
        public $currentBits = 0;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @param string $sps
         */
        public function __construct($sps)
        {
        }
        public function readData()
        {
        }
        /**
         * @param int $bits
         */
        public function skipBits($bits)
        {
        }
        /**
         * @return int
         */
        public function getBit()
        {
        }
        /**
         * @param int $bits
         * @return int
         */
        public function getBits($bits)
        {
        }
        /**
         * @return int
         */
        public function expGolombUe()
        {
        }
        /**
         * @return int
         */
        public function expGolombSe()
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
    }
    class getid3_matroska extends \getid3_handler
    {
        /**
         * @var bool
         */
        public $hide_clusters = \true;
        /**
         * @var bool
         */
        public $parse_whole_file = \false;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $target_type
         * @return string|int
         */
        public static function TargetTypeValue($target_type)
        {
        }
        /**
         * @param int $lacingtype
         * @return string|int
         */
        public static function BlockLacingType($lacingtype)
        {
        }
        /**
         * @param string $codecid
         * @return string
         */
        public static function CodecIDtoCommonName($codecid)
        {
        }
        /**
         * @param int $value
         * @return string
         */
        public static function displayUnit($value)
        {
        }
    }
    // needed for ISO 639-2 language code lookup
    class getid3_quicktime extends \getid3_handler
    {
        /**
         * @var bool
         */
        public $ReturnAtomData = \false;
        /**
         * @var bool
         */
        public $ParseAllPossibleAtoms = \false;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $atomname
         * @param int $atomsize
         * @param string $atom_data
         * @param int $baseoffset
         * @param array $atomHierarchy
         * @param bool $ParseAllPossibleAtoms
         * @return array|false
         */
        public function QuicktimeParseAtom($atomname, $atomsize, $atom_data, $baseoffset, &$atomHierarchy, $ParseAllPossibleAtoms)
        {
        }
        /**
         * @param string $atom_data
         * @param int $baseoffset
         * @param array $atomHierarchy
         * @param bool $ParseAllPossibleAtoms
         * @return array|false
         */
        public function QuicktimeParseContainerAtom($atom_data, $baseoffset, &$atomHierarchy, $ParseAllPossibleAtoms)
        {
        }
        /**
         * @param string $data
         * @param int $offset
         * @return int
         */
        public function quicktime_read_mp4_descr_length($data, &$offset)
        {
        }
        /**
         * @param int $languageid
         * @return string
         */
        public function QuicktimeLanguageLookup($languageid)
        {
        }
        /**
         * @param string $codecid
         * @return string
         */
        public function QuicktimeVideoCodecLookup($codecid)
        {
        }
        /**
         * @param string $codecid
         * @return mixed|string
         */
        public function QuicktimeAudioCodecLookup($codecid)
        {
        }
        /**
         * @param string $compressionid
         * @return string
         */
        public function QuicktimeDCOMLookup($compressionid)
        {
        }
        /**
         * @param int $colordepthid
         * @return string
         */
        public function QuicktimeColorNameLookup($colordepthid)
        {
        }
        /**
         * @param int $stik
         * @return string
         */
        public function QuicktimeSTIKLookup($stik)
        {
        }
        /**
         * @param int $audio_profile_id
         * @return string
         */
        public function QuicktimeIODSaudioProfileName($audio_profile_id)
        {
        }
        /**
         * @param int $video_profile_id
         * @return string
         */
        public function QuicktimeIODSvideoProfileName($video_profile_id)
        {
        }
        /**
         * @param int $rtng
         * @return string
         */
        public function QuicktimeContentRatingLookup($rtng)
        {
        }
        /**
         * @param int $akid
         * @return string
         */
        public function QuicktimeStoreAccountTypeLookup($akid)
        {
        }
        /**
         * @param int $sfid
         * @return string
         */
        public function QuicktimeStoreFrontCodeLookup($sfid)
        {
        }
        /**
         * @param string $keyname
         * @param string|array $data
         * @param string $boxname
         * @return bool
         */
        public function CopyToAppropriateCommentsSection($keyname, $data, $boxname = '')
        {
        }
        /**
         * @param string $lstring
         * @param int $count
         * @return string
         */
        public function LociString($lstring, &$count)
        {
        }
        /**
         * @param string $nullterminatedstring
         * @return string
         */
        public function NoNullString($nullterminatedstring)
        {
        }
        /**
         * @param string $pascalstring
         * @return string
         */
        public function Pascal2String($pascalstring)
        {
        }
        /**
         * @param string $pascalstring
         * @return string
         */
        public function MaybePascal2String($pascalstring)
        {
        }
        /**
         * @param array $info
         * @param string $tag
         * @param string $history
         * @param array $result
         */
        public function search_tag_by_key($info, $tag, $history, &$result)
        {
        }
        /**
         * @param array $info
         * @param string $k
         * @param string $v
         * @param string $history
         * @param array $result
         */
        public function search_tag_by_pair($info, $k, $v, $history, &$result)
        {
        }
        /**
         * @param array $info
         * @return array
         */
        public function quicktime_time_to_sample_table($info)
        {
        }
        /**
         * @param array $info
         * @return int
         */
        public function quicktime_bookmark_time_scale($info)
        {
        }
        /*
        // END helper functions for m4b audiobook chapters
        */
    }
    class getid3_riff extends \getid3_handler
    {
        protected $container = 'riff';
        // default
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $startoffset
         * @param int $maxoffset
         * @return array|false
         */
        public function ParseRIFFAMV($startoffset, $maxoffset)
        {
        }
        /**
         * @param int $startoffset
         * @param int $maxoffset
         * @return array|false
         */
        public function ParseRIFF($startoffset, $maxoffset)
        {
        }
        /**
         * @param string $RIFFdata
         * @return bool
         */
        public function ParseRIFFdata(&$RIFFdata)
        {
        }
        /**
         * @param array $RIFFinfoArray
         * @param array $CommentsTargetArray
         * @return bool
         */
        public static function parseComments(&$RIFFinfoArray, &$CommentsTargetArray)
        {
        }
        /**
         * @param string $WaveFormatExData
         * @return array
         */
        public static function parseWAVEFORMATex($WaveFormatExData)
        {
        }
        /**
         * @param string $WavPackChunkData
         * @return bool
         */
        public function parseWavPackHeader($WavPackChunkData)
        {
        }
        /**
         * @param string $BITMAPINFOHEADER
         * @param bool $littleEndian
         * @return array
         */
        public static function ParseBITMAPINFOHEADER($BITMAPINFOHEADER, $littleEndian = \true)
        {
        }
        /**
         * @param string $DIVXTAG
         * @param bool $raw
         * @return array
         */
        public static function ParseDIVXTAG($DIVXTAG, $raw = \false)
        {
        }
        /**
         * @param string $tagshortname
         * @return string
         */
        public static function waveSNDMtagLookup($tagshortname)
        {
        }
        /**
         * @param int $wFormatTag
         * @return string
         */
        public static function wFormatTagLookup($wFormatTag)
        {
        }
        /**
         * @param string $fourcc
         * @return string
         */
        public static function fourccLookup($fourcc)
        {
        }
    }
    class getid3_ac3 extends \getid3_handler
    {
        const syncword = 0xb77;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $fscod
         * @return int|string|false
         */
        public static function sampleRateCodeLookup($fscod)
        {
        }
        /**
         * @param int $fscod2
         * @return int|string|false
         */
        public static function sampleRateCodeLookup2($fscod2)
        {
        }
        /**
         * @param int $bsmod
         * @param int $acmod
         * @return string|false
         */
        public static function serviceTypeLookup($bsmod, $acmod)
        {
        }
        /**
         * @param int $acmod
         * @return array|false
         */
        public static function audioCodingModeLookup($acmod)
        {
        }
        /**
         * @param int $cmixlev
         * @return int|float|string|false
         */
        public static function centerMixLevelLookup($cmixlev)
        {
        }
        /**
         * @param int $surmixlev
         * @return int|float|string|false
         */
        public static function surroundMixLevelLookup($surmixlev)
        {
        }
        /**
         * @param int $dsurmod
         * @return string|false
         */
        public static function dolbySurroundModeLookup($dsurmod)
        {
        }
        /**
         * @param int $acmod
         * @param bool $lfeon
         * @return array
         */
        public static function channelsEnabledLookup($acmod, $lfeon)
        {
        }
        /**
         * @param int $compre
         * @return float|int
         */
        public static function heavyCompression($compre)
        {
        }
        /**
         * @param int $roomtyp
         * @return string|false
         */
        public static function roomTypeLookup($roomtyp)
        {
        }
        /**
         * @param int $frmsizecod
         * @param int $fscod
         * @return int|false
         */
        public static function frameSizeLookup($frmsizecod, $fscod)
        {
        }
        /**
         * @param int $frmsizecod
         * @return int|false
         */
        public static function bitrateLookup($frmsizecod)
        {
        }
        /**
         * @param int $numblkscod
         * @return int|false
         */
        public static function blocksPerSyncFrame($numblkscod)
        {
        }
    }
    class getid3_dts extends \getid3_handler
    {
        /**
         * Default DTS syncword used in native .cpt or .dts formats.
         */
        const syncword = "\xfe\x80\x01";
        public static $syncwords = array(
            0 => "\xfe\x80\x01",
            // raw big-endian
            1 => "\xfe\x01\x80",
            // raw little-endian
            2 => "\x1f\xff\xe8\x00",
            // 14-bit big-endian
            3 => "\xff\x1f\x00\xe8",
        );
        // 14-bit little-endian
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $index
         * @return int|string|false
         */
        public static function bitrateLookup($index)
        {
        }
        /**
         * @param int $index
         * @return int|string|false
         */
        public static function sampleRateLookup($index)
        {
        }
        /**
         * @param int $index
         * @return int|false
         */
        public static function bitPerSampleLookup($index)
        {
        }
        /**
         * @param int $index
         * @return int|false
         */
        public static function numChannelsLookup($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public static function channelArrangementLookup($index)
        {
        }
        /**
         * @param int $index
         * @param int $version
         * @return int|false
         */
        public static function dialogNormalization($index, $version)
        {
        }
    }
    class getid3_flac extends \getid3_handler
    {
        const syncword = 'fLaC';
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @return bool
         */
        public function parseMETAdata()
        {
        }
        /**
         * @param string $BlockData
         * @return array
         */
        public static function parseSTREAMINFOdata($BlockData)
        {
        }
        /**
         * @return bool
         */
        public function parsePICTURE()
        {
        }
        /**
         * @param int $blocktype
         * @return string
         */
        public static function metaBlockTypeLookup($blocktype)
        {
        }
        /**
         * @param int $applicationid
         * @return string
         */
        public static function applicationIDLookup($applicationid)
        {
        }
        /**
         * @param int $type_id
         * @return string
         */
        public static function pictureTypeLookup($type_id)
        {
        }
    }
    class getid3_mp3 extends \getid3_handler
    {
        /**
         * @var bool
         */
        public $allow_bruteforce = \false;
        /**
         * @var int
         */
        public $mp3_valid_check_frames = 50;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @return string
         */
        public function GuessEncoderOptions()
        {
        }
        /**
         * @param int $offset
         * @param array $info
         * @param bool $recursivesearch
         * @param bool $ScanAsCBR
         * @param bool $FastMPEGheaderScan
         * @return bool
         */
        public function decodeMPEGaudioHeader($offset, &$info, $recursivesearch = \true, $ScanAsCBR = \false, $FastMPEGheaderScan = \false)
        {
        }
        /**
         * @param int $offset
         * @param int $nextframetestoffset
         * @param bool $ScanAsCBR
         * @return bool
         */
        public function RecursiveFrameScanning(&$offset, &$nextframetestoffset, $ScanAsCBR)
        {
        }
        /**
         * @param int $offset
         * @param bool $deepscan
         * @return int|false
         */
        public function FreeFormatFrameLength($offset, $deepscan = \false)
        {
        }
        /**
         * @return bool
         */
        public function getOnlyMPEGaudioInfoBruteForce()
        {
        }
        /**
         * @param int $avdataoffset
         * @param bool $BitrateHistogram
         * @return bool
         */
        public function getOnlyMPEGaudioInfo($avdataoffset, $BitrateHistogram = \false)
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioVersionArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioLayerArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioBitrateArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioFrequencyArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioChannelModeArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioModeExtensionArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioEmphasisArray()
        {
        }
        /**
         * @param string $head4
         * @param bool $allowBitrate15
         * @return bool
         */
        public static function MPEGaudioHeaderBytesValid($head4, $allowBitrate15 = \false)
        {
        }
        /**
         * @param array $rawarray
         * @param bool $echoerrors
         * @param bool $allowBitrate15
         * @return bool
         */
        public static function MPEGaudioHeaderValid($rawarray, $echoerrors = \false, $allowBitrate15 = \false)
        {
        }
        /**
         * @param string $Header4Bytes
         * @return array|false
         */
        public static function MPEGaudioHeaderDecode($Header4Bytes)
        {
        }
        /**
         * @param int|string $bitrate
         * @param string $version
         * @param string $layer
         * @param bool $padding
         * @param int $samplerate
         * @return int|false
         */
        public static function MPEGaudioFrameLength(&$bitrate, &$version, &$layer, $padding, &$samplerate)
        {
        }
        /**
         * @param float|int $bit_rate
         * @return int|float|string
         */
        public static function ClosestStandardMP3Bitrate($bit_rate)
        {
        }
        /**
         * @param string $version
         * @param string $channelmode
         * @return int
         */
        public static function XingVBRidOffset($version, $channelmode)
        {
        }
        /**
         * @param int $VBRmethodID
         * @return string
         */
        public static function LAMEvbrMethodLookup($VBRmethodID)
        {
        }
        /**
         * @param int $StereoModeID
         * @return string
         */
        public static function LAMEmiscStereoModeLookup($StereoModeID)
        {
        }
        /**
         * @param int $SourceSampleFrequencyID
         * @return string
         */
        public static function LAMEmiscSourceSampleFrequencyLookup($SourceSampleFrequencyID)
        {
        }
        /**
         * @param int $SurroundInfoID
         * @return string
         */
        public static function LAMEsurroundInfoLookup($SurroundInfoID)
        {
        }
        /**
         * @param array $LAMEtag
         * @return string
         */
        public static function LAMEpresetUsedLookup($LAMEtag)
        {
        }
    }
    class getid3_ogg extends \getid3_handler
    {
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $filedata
         * @param int $filedataoffset
         * @param array $oggpageinfo
         * @return bool
         */
        public function ParseVorbisPageHeader(&$filedata, &$filedataoffset, &$oggpageinfo)
        {
        }
        /**
         * @param string $filedata
         * @param int $filedataoffset
         * @param array $oggpageinfo
         * @return bool
         */
        public function ParseOpusPageHeader(&$filedata, &$filedataoffset, &$oggpageinfo)
        {
        }
        /**
         * @return array|false
         */
        public function ParseOggPageHeader()
        {
        }
        /**
         * @return bool
         */
        public function ParseVorbisComments()
        {
        }
        /**
         * @param int $mode
         * @return string|null
         */
        public static function SpeexBandModeLookup($mode)
        {
        }
        /**
         * @param array $OggInfoArray
         * @param int $SegmentNumber
         * @return int
         */
        public static function OggPageSegmentLength($OggInfoArray, $SegmentNumber = 1)
        {
        }
        /**
         * @param int $nominal_bitrate
         * @return float
         */
        public static function get_quality_from_nominal_bitrate($nominal_bitrate)
        {
        }
        /**
         * @param int $colorspace_id
         * @return string|null
         */
        public static function TheoraColorSpace($colorspace_id)
        {
        }
        /**
         * @param int $pixelformat_id
         * @return string|null
         */
        public static function TheoraPixelFormat($pixelformat_id)
        {
        }
    }
    class getid3_apetag extends \getid3_handler
    {
        /**
         * @var int|bool|string
         */
        public $inline_attachments = \true;
        public $overrideendoffset = 0;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $APEheaderFooterData
         * @return array|false
         */
        public function parseAPEheaderFooter($APEheaderFooterData)
        {
        }
        /**
         * @param int $rawflagint
         * @return array
         */
        public function parseAPEtagFlags($rawflagint)
        {
        }
        /**
         * @param int $contenttypeid
         * @return string
         */
        public function APEcontentTypeFlagLookup($contenttypeid)
        {
        }
        /**
         * @param string $itemkey
         * @return bool
         */
        public function APEtagItemIsUTF8Lookup($itemkey)
        {
        }
    }
    class getid3_id3v1 extends \getid3_handler
    {
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $str
         * @return string
         */
        public static function cutfield($str)
        {
        }
        /**
         * @param bool $allowSCMPXextended
         * @return string[]
         */
        public static function ArrayOfGenres($allowSCMPXextended = \false)
        {
        }
        /**
         * @param string $genreid
         * @param bool $allowSCMPXextended
         * @return string|false
         */
        public static function LookupGenreName($genreid, $allowSCMPXextended = \true)
        {
        }
        /**
         * @param string $genre
         * @param bool $allowSCMPXextended
         * @return string|false
         */
        public static function LookupGenreID($genre, $allowSCMPXextended = \false)
        {
        }
        /**
         * @param string $OriginalGenre
         * @return string|false
         */
        public static function StandardiseID3v1GenreName($OriginalGenre)
        {
        }
        /**
         * @param string $title
         * @param string $artist
         * @param string $album
         * @param string $year
         * @param int $genreid
         * @param string $comment
         * @param int|string $track
         * @return string
         */
        public static function GenerateID3v1Tag($title, $artist, $album, $year, $genreid, $comment, $track = '')
        {
        }
    }
    class getid3_id3v2 extends \getid3_handler
    {
        public $StartingOffset = 0;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $genrestring
         * @return array
         */
        public function ParseID3v2GenreString($genrestring)
        {
        }
        /**
         * @param array $parsedFrame
         * @return bool
         */
        public function ParseID3v2Frame(&$parsedFrame)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public function DeUnsynchronise($data)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTagSizeLimits($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTextEncodings($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTextFieldSize($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsImageEncoding($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsImageSizeSize($index)
        {
        }
        /**
         * @param string $currencyid
         * @return string
         */
        public function LookupCurrencyUnits($currencyid)
        {
        }
        /**
         * @param string $currencyid
         * @return string
         */
        public function LookupCurrencyCountry($currencyid)
        {
        }
        /**
         * @param string $languagecode
         * @param bool $casesensitive
         * @return string
         */
        public static function LanguageLookup($languagecode, $casesensitive = \false)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public static function ETCOEventLookup($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public static function SYTLContentTypeLookup($index)
        {
        }
        /**
         * @param int $index
         * @param bool $returnarray
         * @return array|string
         */
        public static function APICPictureTypeLookup($index, $returnarray = \false)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public static function COMRReceivedAsLookup($index)
        {
        }
        /**
         * @param int $index
         * @return string
         */
        public static function RVA2ChannelTypeLookup($index)
        {
        }
        /**
         * @param string $framename
         * @return string
         */
        public static function FrameNameLongLookup($framename)
        {
        }
        /**
         * @param string $framename
         * @return string
         */
        public static function FrameNameShortLookup($framename)
        {
        }
        /**
         * @param string $encoding
         * @return string
         */
        public static function TextEncodingTerminatorLookup($encoding)
        {
        }
        /**
         * @param int $encoding
         * @return string
         */
        public static function TextEncodingNameLookup($encoding)
        {
        }
        /**
         * @param string $string
         * @param string $terminator
         * @return string
         */
        public static function RemoveStringTerminator($string, $terminator)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function MakeUTF16emptyStringEmpty($string)
        {
        }
        /**
         * @param string $framename
         * @param int $id3v2majorversion
         * @return bool|int
         */
        public static function IsValidID3v2FrameName($framename, $id3v2majorversion)
        {
        }
        /**
         * @param string $numberstring
         * @param bool $allowdecimal
         * @param bool $allownegative
         * @return bool
         */
        public static function IsANumber($numberstring, $allowdecimal = \false, $allownegative = \false)
        {
        }
        /**
         * @param string $datestamp
         * @return bool
         */
        public static function IsValidDateStampString($datestamp)
        {
        }
        /**
         * @param int $majorversion
         * @return int
         */
        public static function ID3v2HeaderLength($majorversion)
        {
        }
        /**
         * @param string $frame_name
         * @return string|false
         */
        public static function ID3v22iTunesBrokenFrameName($frame_name)
        {
        }
    }
    class getid3_lyrics3 extends \getid3_handler
    {
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $endoffset
         * @param int $version
         * @param int $length
         * @return bool
         */
        public function getLyrics3Data($endoffset, $version, $length)
        {
        }
        /**
         * @param string $rawtimestamp
         * @return int|false
         */
        public function Lyrics3Timestamp2Seconds($rawtimestamp)
        {
        }
        /**
         * @param array $Lyrics3data
         * @return bool
         */
        public function Lyrics3LyricsTimestampParse(&$Lyrics3data)
        {
        }
        /**
         * @param string $char
         * @return bool|null
         */
        public function IntString2Bool($char)
        {
        }
    }
    class IXR_Base64
    {
        var $data;
        function __construct($data)
        {
        }
        public function IXR_Base64($data)
        {
        }
        function getXml()
        {
        }
    }
    class IXR_Client
    {
        var $server;
        var $port;
        var $path;
        var $useragent;
        var $response;
        var $message = \false;
        var $debug = \false;
        var $timeout;
        var $headers = array();
        // Storage place for an error message
        var $error = \false;
        function __construct($server, $path = \false, $port = 80, $timeout = 15)
        {
        }
        public function IXR_Client($server, $path = \false, $port = 80, $timeout = 15)
        {
        }
        /**
         * @return bool
         */
        function query(...$args)
        {
        }
        function getResponse()
        {
        }
        function isError()
        {
        }
        function getErrorCode()
        {
        }
        function getErrorMessage()
        {
        }
    }
    class IXR_ClientMulticall extends \IXR_Client
    {
        var $calls = array();
        function __construct($server, $path = \false, $port = 80)
        {
        }
        public function IXR_ClientMulticall($server, $path = \false, $port = 80)
        {
        }
        function addCall(...$args)
        {
        }
        /**
         * @return bool
         */
        function query(...$args)
        {
        }
    }
    class IXR_Date
    {
        var $year;
        var $month;
        var $day;
        var $hour;
        var $minute;
        var $second;
        var $timezone;
        function __construct($time)
        {
        }
        public function IXR_Date($time)
        {
        }
        function parseTimestamp($timestamp)
        {
        }
        function parseIso($iso)
        {
        }
        function getIso()
        {
        }
        function getXml()
        {
        }
        function getTimestamp()
        {
        }
    }
    class IXR_Error
    {
        var $code;
        var $message;
        function __construct($code, $message)
        {
        }
        public function IXR_Error($code, $message)
        {
        }
        function getXml()
        {
        }
    }
    class IXR_Server
    {
        var $data;
        var $callbacks = array();
        var $message;
        var $capabilities;
        function __construct($callbacks = \false, $data = \false, $wait = \false)
        {
        }
        public function IXR_Server($callbacks = \false, $data = \false, $wait = \false)
        {
        }
        function serve($data = \false)
        {
        }
        function call($methodname, $args)
        {
        }
        function error($error, $message = \false)
        {
        }
        function output($xml)
        {
        }
        function hasMethod($method)
        {
        }
        function setCapabilities()
        {
        }
        function getCapabilities($args)
        {
        }
        function setCallbacks()
        {
        }
        function listMethods($args)
        {
        }
        function multiCall($methodcalls)
        {
        }
    }
    class IXR_IntrospectionServer extends \IXR_Server
    {
        var $signatures;
        var $help;
        function __construct()
        {
        }
        public function IXR_IntrospectionServer()
        {
        }
        function addCallback($method, $callback, $args, $help)
        {
        }
        function call($methodname, $args)
        {
        }
        function methodSignature($method)
        {
        }
        function methodHelp($method)
        {
        }
    }
    class IXR_Message
    {
        var $message = \false;
        var $messageType = \false;
        // methodCall / methodResponse / fault
        var $faultCode = \false;
        var $faultString = \false;
        var $methodName = '';
        var $params = array();
        // Current variable stacks
        var $_arraystructs = array();
        // The stack used to keep track of the current array/struct
        var $_arraystructstypes = array();
        // Stack keeping track of if things are structs or array
        var $_currentStructName = array();
        // A stack as well
        var $_param;
        var $_value;
        var $_currentTag;
        var $_currentTagContents;
        // The XML parser
        var $_parser;
        function __construct($message)
        {
        }
        public function IXR_Message($message)
        {
        }
        function parse()
        {
        }
        function tag_open($parser, $tag, $attr)
        {
        }
        function cdata($parser, $cdata)
        {
        }
        function tag_close($parser, $tag)
        {
        }
    }
    class IXR_Request
    {
        var $method;
        var $args;
        var $xml;
        function __construct($method, $args)
        {
        }
        public function IXR_Request($method, $args)
        {
        }
        function getLength()
        {
        }
        function getXml()
        {
        }
    }
    class IXR_Value
    {
        var $data;
        var $type;
        function __construct($data, $type = \false)
        {
        }
        public function IXR_Value($data, $type = \false)
        {
        }
        function calculateType()
        {
        }
        function getXml()
        {
        }
        /**
         * @param array $array
         * @return bool
         */
        function isStruct($array)
        {
        }
    }
}
namespace PHPMailer\PHPMailer {
    class Exception extends \Exception
    {
        /**
         * @return string
         */
        public function errorMessage()
        {
        }
    }
    class PHPMailer
    {
        const CHARSET_ASCII = 'us-ascii';
        const CHARSET_ISO88591 = 'iso-8859-1';
        const CHARSET_UTF8 = 'utf-8';
        const CONTENT_TYPE_PLAINTEXT = 'text/plain';
        const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar';
        const CONTENT_TYPE_TEXT_HTML = 'text/html';
        const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative';
        const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed';
        const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related';
        const ENCODING_7BIT = '7bit';
        const ENCODING_8BIT = '8bit';
        const ENCODING_BASE64 = 'base64';
        const ENCODING_BINARY = 'binary';
        const ENCODING_QUOTED_PRINTABLE = 'quoted-printable';
        const ENCRYPTION_STARTTLS = 'tls';
        const ENCRYPTION_SMTPS = 'ssl';
        const ICAL_METHOD_REQUEST = 'REQUEST';
        const ICAL_METHOD_PUBLISH = 'PUBLISH';
        const ICAL_METHOD_REPLY = 'REPLY';
        const ICAL_METHOD_ADD = 'ADD';
        const ICAL_METHOD_CANCEL = 'CANCEL';
        const ICAL_METHOD_REFRESH = 'REFRESH';
        const ICAL_METHOD_COUNTER = 'COUNTER';
        const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER';
        /**
         * @var int|null
         */
        public $Priority;
        /**
         * @var string
         */
        public $CharSet = self::CHARSET_ISO88591;
        /**
         * @var string
         */
        public $ContentType = self::CONTENT_TYPE_PLAINTEXT;
        /**
         * @var string
         */
        public $Encoding = self::ENCODING_8BIT;
        /**
         * @var string
         */
        public $ErrorInfo = '';
        /**
         * @var string
         */
        public $From = '';
        /**
         * @var string
         */
        public $FromName = '';
        /**
         * @var string
         */
        public $Sender = '';
        /**
         * @var string
         */
        public $Subject = '';
        /**
         * @var string
         */
        public $Body = '';
        /**
         * @var string
         */
        public $AltBody = '';
        /**
         * @var string
         */
        public $Ical = '';
        /**
         * @var string[]
         */
        protected static $IcalMethods = [self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER];
        /**
         * @var string
         */
        protected $MIMEBody = '';
        /**
         * @var string
         */
        protected $MIMEHeader = '';
        /**
         * @var string
         */
        protected $mailHeader = '';
        /**
         * @var int
         */
        public $WordWrap = 0;
        /**
         * @var string
         */
        public $Mailer = 'mail';
        /**
         * @var string
         */
        public $Sendmail = '/usr/sbin/sendmail';
        /**
         * @var bool
         */
        public $UseSendmailOptions = true;
        /**
         * @var string
         */
        public $ConfirmReadingTo = '';
        /**
         * @var string
         */
        public $Hostname = '';
        /**
         * @var string
         */
        public $MessageID = '';
        /**
         * @var string
         */
        public $MessageDate = '';
        /**
         * @var string
         */
        public $Host = 'localhost';
        /**
         * @var int
         */
        public $Port = 25;
        /**
         * @var string
         */
        public $Helo = '';
        /**
         * @var string
         */
        public $SMTPSecure = '';
        /**
         * @var bool
         */
        public $SMTPAutoTLS = true;
        /**
         * @var bool
         */
        public $SMTPAuth = false;
        /**
         * @var array
         */
        public $SMTPOptions = [];
        /**
         * @var string
         */
        public $Username = '';
        /**
         * @var string
         */
        public $Password = '';
        /**
         * @var string
         */
        public $AuthType = '';
        /**
         * @var array
         */
        protected $SMTPXClient = [];
        /**
         * @var \OAuthTokenProvider
         */
        protected $oauth;
        /**
         * @var int
         */
        public $Timeout = 300;
        public $dsn = '';
        /**
         * @var int
         */
        public $SMTPDebug = 0;
        /**
         * @var string|callable|\Psr\Log\LoggerInterface
         */
        public $Debugoutput = 'echo';
        /**
         * @var bool
         */
        public $SMTPKeepAlive = false;
        /**
         * @var bool
         */
        public $SingleTo = false;
        /**
         * @var array
         */
        protected $SingleToArray = [];
        /**
         * @var bool
         */
        public $do_verp = false;
        /**
         * @var bool
         */
        public $AllowEmpty = false;
        /**
         * @var string
         */
        public $DKIM_selector = '';
        /**
         * @var string
         */
        public $DKIM_identity = '';
        /**
         * @var string
         */
        public $DKIM_passphrase = '';
        /**
         * @var string
         */
        public $DKIM_domain = '';
        /**
         * @var bool
         */
        public $DKIM_copyHeaderFields = true;
        /**
         * @var array
         */
        public $DKIM_extraHeaders = [];
        /**
         * @var string
         */
        public $DKIM_private = '';
        /**
         * @var string
         */
        public $DKIM_private_string = '';
        /**
         * @var string
         */
        public $action_function = '';
        /**
         * @var string|null
         */
        public $XMailer = '';
        /**
         * @var string|callable
         */
        public static $validator = 'php';
        /**
         * @var \SMTP
         */
        protected $smtp;
        /**
         * @var array
         */
        protected $to = [];
        /**
         * @var array
         */
        protected $cc = [];
        /**
         * @var array
         */
        protected $bcc = [];
        /**
         * @var array
         */
        protected $ReplyTo = [];
        /**
         * @var array
         */
        protected $all_recipients = [];
        /**
         * @var array
         */
        protected $RecipientsQueue = [];
        /**
         * @var array
         */
        protected $ReplyToQueue = [];
        /**
         * @var array
         */
        protected $attachment = [];
        /**
         * @var array
         */
        protected $CustomHeader = [];
        /**
         * @var string
         */
        protected $lastMessageID = '';
        /**
         * @var string
         */
        protected $message_type = '';
        /**
         * @var array
         */
        protected $boundary = [];
        /**
         * @var array
         */
        protected $language = [];
        /**
         * @var int
         */
        protected $error_count = 0;
        /**
         * @var string
         */
        protected $sign_cert_file = '';
        /**
         * @var string
         */
        protected $sign_key_file = '';
        /**
         * @var string
         */
        protected $sign_extracerts_file = '';
        /**
         * @var string
         */
        protected $sign_key_pass = '';
        /**
         * @var bool
         */
        protected $exceptions = false;
        /**
         * @var string
         */
        protected $uniqueid = '';
        /**
         * The PHPMailer Version number.
         *
         * @var string
         */
        const VERSION = '6.9.1';
        /**
         * Error severity: message only, continue processing.
         *
         * @var int
         */
        const STOP_MESSAGE = 0;
        /**
         * Error severity: message, likely ok to continue processing.
         *
         * @var int
         */
        const STOP_CONTINUE = 1;
        /**
         * Error severity: message, plus full stop, critical error reached.
         *
         * @var int
         */
        const STOP_CRITICAL = 2;
        /**
         * The SMTP standard CRLF line break.
         * If you want to change line break format, change static::$LE, not this.
         */
        const CRLF = "\r\n";
        /**
         * "Folding White Space" a white space string used for line folding.
         */
        const FWS = ' ';
        /**
         * @var string
         */
        protected static $LE = self::CRLF;
        /**
         * The maximum line length supported by mail().
         *
         * Background: mail() will sometimes corrupt messages
         * with headers longer than 65 chars, see #818.
         *
         * @var int
         */
        const MAIL_MAX_LINE_LENGTH = 63;
        /**
         * The maximum line length allowed by RFC 2822 section 2.1.1.
         *
         * @var int
         */
        const MAX_LINE_LENGTH = 998;
        /**
         * The lower maximum line length allowed by RFC 2822 section 2.1.1.
         * This length does NOT include the line break
         * 76 means that lines will be 77 or 78 chars depending on whether
         * the line break format is LF or CRLF; both are valid.
         *
         * @var int
         */
        const STD_LINE_LENGTH = 76;
        /**
         * @param bool $exceptions
         */
        public function __construct($exceptions = null)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string $str
         * @phpstan-return void
         */
        protected function edebug($str)
        {
        }
        /**
         * @param bool $isHtml
         */
        public function isHTML($isHtml = true)
        {
        }
        public function isSMTP()
        {
        }
        public function isMail()
        {
        }
        public function isSendmail()
        {
        }
        public function isQmail()
        {
        }
        /**
         * @param string $address
         * @param string $name
         * @return bool
         */
        public function addAddress($address, $name = '')
        {
        }
        /**
         * @param string $address
         * @param string $name
         * @return bool
         */
        public function addCC($address, $name = '')
        {
        }
        /**
         * @param string $address
         * @param string $name
         * @return bool
         */
        public function addBCC($address, $name = '')
        {
        }
        /**
         * @param string $address
         * @param string $name
         * @return bool
         */
        public function addReplyTo($address, $name = '')
        {
        }
        /**
         * @phpstan-param 'to'|'cc'|'bcc'|'ReplyTo' $kind
         * @param string $address
         * @param string $name
         * @return bool
         */
        protected function addOrEnqueueAnAddress($kind, $address, $name)
        {
        }
        /**
         * @return void
         */
        public function setBoundaries()
        {
        }
        /**
         * @phpstan-param 'to'|'cc'|'bcc'|'ReplyTo' $kind
         * @param string $address
         * @param string $name
         * @return bool
         */
        protected function addAnAddress($kind, $address, $name = '')
        {
        }
        /**
         * @param string $addrstr
         * @param bool $useimap
         * @param string $charset
         * @return array
         */
        public static function parseAddresses($addrstr, $useimap = true, $charset = self::CHARSET_ISO88591)
        {
        }
        /**
         * @param string $address
         * @param string $name
         * @param bool $auto
         * @return bool
         */
        public function setFrom($address, $name = '', $auto = true)
        {
        }
        /**
         * @return string
         */
        public function getLastMessageID()
        {
        }
        /**
         * @param string $address
         * @param string|callable $patternselect
         * @return bool
         */
        public static function validateAddress($address, $patternselect = null)
        {
        }
        /**
         * @return bool
         */
        public static function idnSupported()
        {
        }
        /**
         * @param string $address
         * @return string
         */
        public function punyencodeAddress($address)
        {
        }
        /**
         * @return bool
         */
        public function send()
        {
        }
        /**
         * @return bool
         */
        public function preSend()
        {
        }
        /**
         * @return bool
         */
        public function postSend()
        {
        }
        /**
         * @param string $header
         * @param string $body
         * @return bool
         */
        protected function sendmailSend($header, $body)
        {
        }
        /**
         * @param string $string
         * @return bool
         */
        protected static function isShellSafe($string)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        protected static function isPermittedPath($path)
        {
        }
        /**
         * @param string $path
         * @return bool
         */
        protected static function fileIsAccessible($path)
        {
        }
        /**
         * @param string $header
         * @param string $body
         * @return bool
         */
        protected function mailSend($header, $body)
        {
        }
        /**
         * @return \SMTP
         */
        public function getSMTPInstance()
        {
        }
        /**
         * @return \SMTP
         */
        public function setSMTPInstance(\PHPMailer\PHPMailer\SMTP $smtp)
        {
        }
        /**
         * @param string $name
         * @param ?string $value
         * @return bool
         */
        public function setSMTPXclientAttribute($name, $value)
        {
        }
        /**
         * @return array
         */
        public function getSMTPXclientAttributes()
        {
        }
        /**
         * @param string $header
         * @param string $body
         * @return bool
         */
        protected function smtpSend($header, $body)
        {
        }
        /**
         * @param array $options
         * @return bool
         */
        public function smtpConnect($options = null)
        {
        }
        public function smtpClose()
        {
        }
        /**
         * @param string $langcode
         * @param string $lang_path
         * @return bool
         */
        public function setLanguage($langcode = 'en', $lang_path = '')
        {
        }
        /**
         * @return array
         */
        public function getTranslations()
        {
        }
        /**
         * @param string $type
         * @param array $addr
         * @return string
         */
        public function addrAppend($type, $addr)
        {
        }
        /**
         * @param array $addr
         * @return string
         */
        public function addrFormat($addr)
        {
        }
        /**
         * @param string $message
         * @param int $length
         * @param bool $qp_mode
         * @return string
         */
        public function wrapText($message, $length, $qp_mode = false)
        {
        }
        /**
         * @param string $encodedText
         * @param int $maxLength
         * @return int
         */
        public function utf8CharBoundary($encodedText, $maxLength)
        {
        }
        /**
         * @phpstan-return void
         */
        public function setWordWrap()
        {
        }
        /**
         * @return string
         */
        public function createHeader()
        {
        }
        /**
         * @return string
         */
        public function getMailMIME()
        {
        }
        /**
         * @return string
         */
        public function getSentMIMEMessage()
        {
        }
        /**
         * @return string
         */
        protected function generateId()
        {
        }
        /**
         * @return string
         */
        public function createBody()
        {
        }
        /**
         * @return array
         */
        public function getBoundaries()
        {
        }
        /**
         * @param string $boundary
         * @param string $charSet
         * @param string $contentType
         * @param string $encoding
         * @return string
         */
        protected function getBoundary($boundary, $charSet, $contentType, $encoding)
        {
        }
        /**
         * @param string $boundary
         * @return string
         */
        protected function endBoundary($boundary)
        {
        }
        protected function setMessageType()
        {
        }
        /**
         * @param string $name
         * @param string|int $value
         * @return string
         */
        public function headerLine($name, $value)
        {
        }
        /**
         * @param string $value
         * @return string
         */
        public function textLine($value)
        {
        }
        /**
         * @param string $path
         * @param string $name
         * @param string $encoding
         * @param string $type
         * @param string $disposition
         * @return bool
         */
        public function addAttachment($path, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'attachment')
        {
        }
        /**
         * @return array
         */
        public function getAttachments()
        {
        }
        /**
         * @param string $disposition_type
         * @param string $boundary
         * @return string
         */
        protected function attachAll($disposition_type, $boundary)
        {
        }
        /**
         * @param string $path
         * @param string $encoding
         * @return string
         */
        protected function encodeFile($path, $encoding = self::ENCODING_BASE64)
        {
        }
        /**
         * @param string $str
         * @param string $encoding
         * @return string
         */
        public function encodeString($str, $encoding = self::ENCODING_BASE64)
        {
        }
        /**
         * @param string $str
         * @param string $position
         * @return string
         */
        public function encodeHeader($str, $position = 'text')
        {
        }
        /**
         * @param string $str
         * @return bool
         */
        public function hasMultiBytes($str)
        {
        }
        /**
         * @param string $text
         * @return bool
         */
        public function has8bitChars($text)
        {
        }
        /**
         * @param string $str
         * @param string $linebreak
         * @return string
         */
        public function base64EncodeWrapMB($str, $linebreak = null)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public function encodeQP($string)
        {
        }
        /**
         * @param string $str
         * @param string $position
         * @return string
         */
        public function encodeQ($str, $position = 'text')
        {
        }
        /**
         * @param string $string
         * @param string $filename
         * @param string $encoding
         * @param string $type
         * @param string $disposition
         * @return bool
         */
        public function addStringAttachment($string, $filename, $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'attachment')
        {
        }
        /**
         * @param string $path
         * @param string $cid
         * @param string $name
         * @param string $encoding
         * @param string $type
         * @param string $disposition
         * @return bool
         */
        public function addEmbeddedImage($path, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'inline')
        {
        }
        /**
         * @param string $string
         * @param string $cid
         * @param string $name
         * @param string $encoding
         * @param string $type
         * @param string $disposition
         * @return bool
         */
        public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'inline')
        {
        }
        /**
         * @param string $encoding
         * @return bool
         */
        protected function validateEncoding($encoding)
        {
        }
        /**
         * @param string $cid
         * @return bool
         */
        protected function cidExists($cid)
        {
        }
        /**
         * @return bool
         */
        public function inlineImageExists()
        {
        }
        /**
         * @return bool
         */
        public function attachmentExists()
        {
        }
        /**
         * @return bool
         */
        public function alternativeExists()
        {
        }
        /**
         * @param string $kind
         */
        public function clearQueuedAddresses($kind)
        {
        }
        public function clearAddresses()
        {
        }
        public function clearCCs()
        {
        }
        public function clearBCCs()
        {
        }
        public function clearReplyTos()
        {
        }
        public function clearAllRecipients()
        {
        }
        public function clearAttachments()
        {
        }
        public function clearCustomHeaders()
        {
        }
        /**
         * @param string $name
         * @param string|null $value
         * @return bool
         */
        public function clearCustomHeader($name, $value = null)
        {
        }
        /**
         * @param string $name
         * @param string|null $value
         * @return bool
         */
        public function replaceCustomHeader($name, $value = null)
        {
        }
        /**
         * @param string $msg
         */
        protected function setError($msg)
        {
        }
        /**
         * @return string
         */
        public static function rfcDate()
        {
        }
        /**
         * @return string
         */
        protected function serverHostname()
        {
        }
        /**
         * @param string $host
         * @return bool
         */
        public static function isValidHost($host)
        {
        }
        /**
         * @param string $key
         * @return string
         */
        protected function lang($key)
        {
        }
        /**
         * @return bool
         */
        public function isError()
        {
        }
        /**
         * @param string $name
         * @param string|null $value
         * @return bool
         */
        public function addCustomHeader($name, $value = null)
        {
        }
        /**
         * @return array
         */
        public function getCustomHeaders()
        {
        }
        /**
         * @param string $message
         * @param string $basedir
         * @param bool|callable $advanced
         * @return string
         */
        public function msgHTML($message, $basedir = '', $advanced = false)
        {
        }
        /**
         * @param string $html
         * @param bool|callable $advanced
         * @return string
         */
        public function html2text($html, $advanced = false)
        {
        }
        /**
         * @param string $ext
         * @return string
         */
        public static function _mime_types($ext = '')
        {
        }
        /**
         * @param string $filename
         * @return string
         */
        public static function filenameToType($filename)
        {
        }
        /**
         * @param string $path
         * @param int|string $options
         * @return string|array
         */
        public static function mb_pathinfo($path, $options = null)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @return bool
         */
        public function set($name, $value = '')
        {
        }
        /**
         * @param string $str
         * @return string
         */
        public function secureHeader($str)
        {
        }
        /**
         * @param string $text
         * @param string $breaktype
         * @return string
         */
        public static function normalizeBreaks($text, $breaktype = null)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public static function stripTrailingWSP($text)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public static function stripTrailingBreaks($text)
        {
        }
        /**
         * @return string
         */
        public static function getLE()
        {
        }
        /**
         * @param string $le
         */
        protected static function setLE($le)
        {
        }
        /**
         * @param string $cert_filename
         * @param string $key_filename
         * @param string $key_pass
         * @param string $extracerts_filename
         */
        public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '')
        {
        }
        /**
         * @param string $txt
         * @return string
         */
        public function DKIM_QP($txt)
        {
        }
        /**
         * @param string $signHeader
         * @return string
         */
        public function DKIM_Sign($signHeader)
        {
        }
        /**
         * @param string $signHeader
         * @return string
         */
        public function DKIM_HeaderC($signHeader)
        {
        }
        /**
         * @param string $body
         * @return string
         */
        public function DKIM_BodyC($body)
        {
        }
        /**
         * @param string $headers_line
         * @param string $subject
         * @param string $body
         * @return string
         */
        public function DKIM_Add($headers_line, $subject, $body)
        {
        }
        /**
         * @param string $str
         * @return bool
         */
        public static function hasLineLongerThanMax($str)
        {
        }
        /**
         * @param string $str
         * @return string
         */
        public static function quotedString($str)
        {
        }
        /**
         * @return array
         */
        public function getToAddresses()
        {
        }
        /**
         * @return array
         */
        public function getCcAddresses()
        {
        }
        /**
         * @return array
         */
        public function getBccAddresses()
        {
        }
        /**
         * @return array
         */
        public function getReplyToAddresses()
        {
        }
        /**
         * @return array
         */
        public function getAllRecipientAddresses()
        {
        }
        /**
         * @param bool $isSent
         * @param array $to
         * @param array $cc
         * @param array $bcc
         * @param string $subject
         * @param string $body
         * @param string $from
         * @param array $extra
         */
        protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra)
        {
        }
        /**
         * @return \OAuthTokenProvider
         */
        public function getOAuth()
        {
        }
        public function setOAuth(\PHPMailer\PHPMailer\OAuthTokenProvider $oauth)
        {
        }
    }
    class SMTP
    {
        /**
         * The PHPMailer SMTP version number.
         *
         * @var string
         */
        const VERSION = '6.9.1';
        /**
         * SMTP line break constant.
         *
         * @var string
         */
        const LE = "\r\n";
        /**
         * The SMTP port to use if one is not specified.
         *
         * @var int
         */
        const DEFAULT_PORT = 25;
        /**
         * The SMTPs port to use if one is not specified.
         *
         * @var int
         */
        const DEFAULT_SECURE_PORT = 465;
        /**
         * The maximum line length allowed by RFC 5321 section 4.5.3.1.6,
         * *excluding* a trailing CRLF break.
         *
         * @see https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6
         *
         * @var int
         */
        const MAX_LINE_LENGTH = 998;
        /**
         * The maximum line length allowed for replies in RFC 5321 section 4.5.3.1.5,
         * *including* a trailing CRLF line break.
         *
         * @see https://tools.ietf.org/html/rfc5321#section-4.5.3.1.5
         *
         * @var int
         */
        const MAX_REPLY_LENGTH = 512;
        /**
         * Debug level for no output.
         *
         * @var int
         */
        const DEBUG_OFF = 0;
        /**
         * Debug level to show client -> server messages.
         *
         * @var int
         */
        const DEBUG_CLIENT = 1;
        /**
         * Debug level to show client -> server and server -> client messages.
         *
         * @var int
         */
        const DEBUG_SERVER = 2;
        /**
         * Debug level to show connection status, client -> server and server -> client messages.
         *
         * @var int
         */
        const DEBUG_CONNECTION = 3;
        /**
         * Debug level to show all messages.
         *
         * @var int
         */
        const DEBUG_LOWLEVEL = 4;
        /**
         * @var int
         */
        public $do_debug = self::DEBUG_OFF;
        /**
         * @var string|callable|\Psr\Log\LoggerInterface
         */
        public $Debugoutput = 'echo';
        /**
         * @var bool
         */
        public $do_verp = false;
        /**
         * @var int
         */
        public $Timeout = 300;
        /**
         * @var int
         */
        public $Timelimit = 300;
        /**
         * @var string[]
         */
        protected $smtp_transaction_id_patterns = ['exim' => '/[\\d]{3} OK id=(.*)/', 'sendmail' => '/[\\d]{3} 2.0.0 (.*) Message/', 'postfix' => '/[\\d]{3} 2.0.0 Ok: queued as (.*)/', 'Microsoft_ESMTP' => '/[0-9]{3} 2.[\\d].0 (.*)@(?:.*) Queued mail for delivery/', 'Amazon_SES' => '/[\\d]{3} Ok (.*)/', 'SendGrid' => '/[\\d]{3} Ok: queued as (.*)/', 'CampaignMonitor' => '/[\\d]{3} 2.0.0 OK:([a-zA-Z\\d]{48})/', 'Haraka' => '/[\\d]{3} Message Queued \\((.*)\\)/', 'ZoneMTA' => '/[\\d]{3} Message queued as (.*)/', 'Mailjet' => '/[\\d]{3} OK queued as (.*)/'];
        /**
         * @var array
         */
        public static $xclient_allowed_attributes = ['NAME', 'ADDR', 'PORT', 'PROTO', 'HELO', 'LOGIN', 'DESTADDR', 'DESTPORT'];
        /**
         * @var string|bool|null
         */
        protected $last_smtp_transaction_id;
        /**
         * @var ?resource
         */
        protected $smtp_conn;
        /**
         * @var array
         */
        protected $error = ['error' => '', 'detail' => '', 'smtp_code' => '', 'smtp_code_ex' => ''];
        /**
         * @var string|null
         */
        protected $helo_rply;
        /**
         * @var array|null
         */
        protected $server_caps;
        /**
         * @var string
         */
        protected $last_reply = '';
        /**
         * @param string $str
         * @param int $level
         * @phpstan-return void
         */
        protected function edebug($str, $level = 0)
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param int $timeout
         * @param array $options
         * @return bool
         */
        public function connect($host, $port = null, $timeout = 30, $options = [])
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param int $timeout
         * @param array $options
         * @return false|resource
         */
        protected function getSMTPConnection($host, $port = null, $timeout = 30, $options = [])
        {
        }
        /**
         * @return bool
         */
        public function startTLS()
        {
        }
        /**
         * @param string $username
         * @param string $password
         * @param string $authtype
         * @param \OAuthTokenProvider $OAuth
         * @return bool
         */
        public function authenticate($username, $password, $authtype = null, $OAuth = null)
        {
        }
        /**
         * @param string $data
         * @param string $key
         * @return string
         */
        protected function hmac($data, $key)
        {
        }
        /**
         * @return bool
         */
        public function connected()
        {
        }
        public function close()
        {
        }
        /**
         * @param string $msg_data
         * @return bool
         */
        public function data($msg_data)
        {
        }
        /**
         * @param string $host
         * @return bool
         */
        public function hello($host = '')
        {
        }
        /**
         * @param string $hello
         * @param string $host
         * @return bool
         */
        protected function sendHello($hello, $host)
        {
        }
        /**
         * @param string $type
         */
        protected function parseHelloFields($type)
        {
        }
        /**
         * @param string $from
         * @return bool
         */
        public function mail($from)
        {
        }
        /**
         * @param bool $close_on_error
         * @return bool
         */
        public function quit($close_on_error = true)
        {
        }
        /**
         * @param string $address
         * @param string $dsn
         * @return bool
         */
        public function recipient($address, $dsn = '')
        {
        }
        /**
         * @return bool
         */
        public function xclient(array $vars)
        {
        }
        /**
         * @return bool
         */
        public function reset()
        {
        }
        /**
         * @param string $command
         * @param string $commandstring
         * @param int|array $expect
         * @return bool
         */
        protected function sendCommand($command, $commandstring, $expect)
        {
        }
        /**
         * @param string $from
         * @return bool
         */
        public function sendAndMail($from)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function verify($name)
        {
        }
        /**
         * @return bool
         */
        public function noop()
        {
        }
        /**
         * @return bool
         */
        public function turn()
        {
        }
        /**
         * @param string $data
         * @param string $command
         * @return int|bool
         */
        public function client_send($data, $command = '')
        {
        }
        /**
         * @return array
         */
        public function getError()
        {
        }
        /**
         * @return array|null
         */
        public function getServerExtList()
        {
        }
        /**
         * @param string $name
         * @return string|bool|null
         */
        public function getServerExt($name)
        {
        }
        /**
         * @return string
         */
        public function getLastReply()
        {
        }
        /**
         * @return string
         */
        protected function get_lines()
        {
        }
        /**
         * @param bool $enabled
         */
        public function setVerp($enabled = false)
        {
        }
        /**
         * @return bool
         */
        public function getVerp()
        {
        }
        /**
         * @param string $message
         * @param string $detail
         * @param string $smtp_code
         * @param string $smtp_code_ex
         */
        protected function setError($message, $detail = '', $smtp_code = '', $smtp_code_ex = '')
        {
        }
        /**
         * @param string|callable $method
         */
        public function setDebugOutput($method = 'echo')
        {
        }
        /**
         * @return string
         */
        public function getDebugOutput()
        {
        }
        /**
         * @param int $level
         */
        public function setDebugLevel($level = 0)
        {
        }
        /**
         * @return int
         */
        public function getDebugLevel()
        {
        }
        /**
         * @param int $timeout
         */
        public function setTimeout($timeout = 0)
        {
        }
        /**
         * @return int
         */
        public function getTimeout()
        {
        }
        /**
         * @param int $errno
         * @param string $errmsg
         * @param string $errfile
         * @param int $errline
         */
        protected function errorHandler($errno, $errmsg, $errfile = '', $errline = 0)
        {
        }
        /**
         * @return bool|string|null
         */
        protected function recordLastTransactionID()
        {
        }
        /**
         * @return bool|string|null
         */
        public function getLastTransactionID()
        {
        }
    }
}
namespace WpOrg\Requests {
    /**
     * Authentication provider interface
     *
     * Implement this interface to act as an authentication provider.
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see \WpOrg\Requests\Hooks
     *
     * @package Requests\Authentication
     */
    interface Auth
    {
        /**
         * @param \WpOrg\Requests\Hooks $hooks
         */
        public function register(\WpOrg\Requests\Hooks $hooks);
    }
}
namespace WpOrg\Requests\Auth {
    class Basic implements \WpOrg\Requests\Auth
    {
        /**
         * @var string
         */
        public $user;
        /**
         * @var string
         */
        public $pass;
        /**
         * @param array|null $args
         * @phpstan-return void
         */
        public function __construct($args = null)
        {
        }
        /**
         * @param \WpOrg\Requests\Hooks $hooks
         */
        public function register(\WpOrg\Requests\Hooks $hooks)
        {
        }
        /**
         * @param resource|\CurlHandle $handle
         */
        public function curl_before_send(&$handle)
        {
        }
        /**
         * @param string $out
         */
        public function fsockopen_header(&$out)
        {
        }
        /**
         * @return string
         */
        public function getAuthString()
        {
        }
    }
}
namespace WpOrg\Requests {
    final class Autoload
    {
        /**
         * @return void
         */
        public static function register()
        {
        }
        /**
         * @param string $class_name
         * @return bool
         */
        public static function load($class_name)
        {
        }
    }
    /**
     * Capability interface declaring the known capabilities.
     *
     * This is used as the authoritative source for which capabilities can be queried.
     *
     * @package Requests\Utilities
     */
    interface Capability
    {
        /**
         * Support for SSL.
         *
         * @var string
         */
        const SSL = 'ssl';
        /**
         * Collection of all capabilities supported in Requests.
         *
         * Note: this does not automatically mean that the capability will be supported for your chosen transport!
         *
         * @var string[]
         */
        const ALL = [self::SSL];
    }
    class Cookie
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $value;
        /**
         * @var \WpOrg\Requests\Utility\CaseInsensitiveDictionary|array
         */
        public $attributes = [];
        /**
         * @var array
         */
        public $flags = [];
        /**
         * @var int
         */
        public $reference_time = 0;
        /**
         * @param string $name
         * @param string $value
         * @param array|\WpOrg\Requests\Utility\CaseInsensitiveDictionary $attributes
         * @param array $flags
         * @param int|null $reference_time
         */
        public function __construct($name, $value, $attributes = [], $flags = [], $reference_time = null)
        {
        }
        public function __toString()
        {
        }
        /**
         * @return bool
         */
        public function is_expired()
        {
        }
        /**
         * @param \WpOrg\Requests\Iri $uri
         * @return bool
         */
        public function uri_matches(\WpOrg\Requests\Iri $uri)
        {
        }
        /**
         * @param string $domain
         * @return bool
         */
        public function domain_matches($domain)
        {
        }
        /**
         * @param string $request_path
         * @return bool
         */
        public function path_matches($request_path)
        {
        }
        /**
         * @return bool
         */
        public function normalize()
        {
        }
        /**
         * @param string $name
         * @param string|int|bool $value
         * @return mixed
         */
        protected function normalize_attribute($name, $value)
        {
        }
        /**
         * @return string
         */
        public function format_for_header()
        {
        }
        /**
         * @return string
         */
        public function format_for_set_cookie()
        {
        }
        /**
         * @param string $cookie_header
         * @param string $name
         * @param int|null $reference_time
         * @return \WpOrg\Requests\Cookie
         */
        public static function parse($cookie_header, $name = '', $reference_time = null)
        {
        }
        /**
         * @param \WpOrg\Requests\Response\Headers $headers
         * @param \WpOrg\Requests\Iri|null $origin
         * @param int|null $time
         * @return array
         */
        public static function parse_from_headers(\WpOrg\Requests\Response\Headers $headers, $origin = null, $time = null)
        {
        }
    }
}
namespace WpOrg\Requests\Cookie {
    class Jar implements \ArrayAccess, \IteratorAggregate
    {
        /**
         * @var array
         */
        protected $cookies = [];
        /**
         * @param array $cookies
         */
        public function __construct($cookies = [])
        {
        }
        /**
         * @param string|\WpOrg\Requests\Cookie $cookie
         * @param string $key
         * @return \WpOrg\Requests\Cookie
         */
        public function normalize_cookie($cookie, $key = '')
        {
        }
        /**
         * @param string $offset
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         * @return string|null
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param string $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * @return \ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * @param \WpOrg\Requests\HookManager $hooks
         */
        public function register(\WpOrg\Requests\HookManager $hooks)
        {
        }
        /**
         * @param string $url
         * @param array $headers
         * @param array $data
         * @param string $type
         * @param array $options
         */
        public function before_request($url, &$headers, &$data, &$type, &$options)
        {
        }
        /**
         * @param \WpOrg\Requests\Response $response
         */
        public function before_redirect_check(\WpOrg\Requests\Response $response)
        {
        }
    }
}
namespace WpOrg\Requests {
    class Exception extends \Exception
    {
        /**
         * @var string
         */
        protected $type;
        /**
         * @var mixed
         */
        protected $data;
        /**
         * @param string $message
         * @param string $type
         * @param mixed $data
         * @param int $code
         */
        public function __construct($message, $type, $data = null, $code = 0)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return mixed
         */
        public function getData()
        {
        }
    }
}
namespace WpOrg\Requests\Exception {
    final class ArgumentCount extends \WpOrg\Requests\Exception
    {
        /**
         * @param string $expected
         * @param int $received
         * @param string $type
         * @return \WpOrg\Requests\Exception\ArgumentCount
         */
        public static function create($expected, $received, $type)
        {
        }
    }
    class Http extends \WpOrg\Requests\Exception
    {
        /**
         * @var int
         */
        protected $code = 0;
        /**
         * @var string
         */
        protected $reason = 'Unknown';
        /**
         * @param string|null $reason
         * @param mixed $data
         * @param array|string|null $args
         */
        public function __construct($reason = null, $data = null)
        {
        }
        /**
         * @return string
         */
        public function getReason()
        {
        }
        /**
         * @param int|bool $code
         * @return string
         */
        public static function get_class($code)
        {
        }
    }
}
namespace WpOrg\Requests\Exception\Http {
    final class Status304 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status305 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status306 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status400 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status401 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status402 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status403 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status404 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status405 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status406 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status407 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status408 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status409 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status410 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status411 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status412 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status413 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status414 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status415 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status416 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status417 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status418 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status428 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status429 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status431 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status500 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status501 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status502 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status503 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status504 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status505 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class Status511 extends \WpOrg\Requests\Exception\Http
    {
    }
    final class StatusUnknown extends \WpOrg\Requests\Exception\Http
    {
        /**
         * @param string|null $reason
         * @param mixed $data
         */
        public function __construct($reason = null, $data = null)
        {
        }
    }
}
namespace WpOrg\Requests\Exception {
    final class InvalidArgument extends \InvalidArgumentException
    {
        /**
         * @param int $position
         * @param string $name
         * @param string $expected
         * @param string $received
         * @return \WpOrg\Requests\Exception\InvalidArgument
         */
        public static function create($position, $name, $expected, $received)
        {
        }
    }
    class Transport extends \WpOrg\Requests\Exception
    {
    }
}
namespace WpOrg\Requests\Exception\Transport {
    final class Curl extends \WpOrg\Requests\Exception\Transport
    {
        const EASY = 'cURLEasy';
        const MULTI = 'cURLMulti';
        const SHARE = 'cURLShare';
        /**
         * @param string $message
         * @param string $type
         * @param mixed $data
         * @param int $code
         */
        public function __construct($message, $type, $data = null, $code = 0)
        {
        }
        /**
         * @return string
         */
        public function getReason()
        {
        }
    }
}
namespace WpOrg\Requests {
    /**
     * Event dispatcher
     *
     * @package Requests\EventDispatcher
     */
    interface HookManager
    {
        /**
         * @param string $hook
         * @param callable $callback
         * @param int $priority
         */
        public function register($hook, $callback, $priority = 0);
        /**
         * @param string $hook
         * @param array $parameters
         * @return bool
         */
        public function dispatch($hook, $parameters = []);
    }
    class Hooks implements \WpOrg\Requests\HookManager
    {
        /**
         * @var array
         */
        protected $hooks = [];
        /**
         * @param string $hook
         * @param callable $callback
         * @param int $priority
         */
        public function register($hook, $callback, $priority = 0)
        {
        }
        /**
         * @param string $hook
         * @param array $parameters
         * @return bool
         */
        public function dispatch($hook, $parameters = [])
        {
        }
        public function __wakeup()
        {
        }
    }
    class IdnaEncoder
    {
        /**
         * ACE prefix used for IDNA
         *
         * @link https://tools.ietf.org/html/rfc3490#section-5
         * @var string
         */
        const ACE_PREFIX = 'xn--';
        /**
         * Maximum length of a IDNA URL in ASCII.
         *
         * @see \WpOrg\Requests\IdnaEncoder::to_ascii()
         *
         * @since 2.0.0
         *
         * @var int
         */
        const MAX_LENGTH = 64;
        /**#@+
         * Bootstrap constant for Punycode
         *
         * @link https://tools.ietf.org/html/rfc3492#section-5
         * @var int
         */
        const BOOTSTRAP_BASE = 36;
        const BOOTSTRAP_TMIN = 1;
        const BOOTSTRAP_TMAX = 26;
        const BOOTSTRAP_SKEW = 38;
        const BOOTSTRAP_DAMP = 700;
        const BOOTSTRAP_INITIAL_BIAS = 72;
        const BOOTSTRAP_INITIAL_N = 128;
        /**#@-*/
        /**
         * @param string|\Stringable $hostname
         * @return string
         */
        public static function encode($hostname)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public static function to_ascii($text)
        {
        }
        /**
         * @param string $text
         * @return bool
         */
        protected static function is_ascii($text)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        protected static function nameprep($text)
        {
        }
        /**
         * @param string $input
         * @return array
         */
        protected static function utf8_to_codepoints($input)
        {
        }
        /**
         * @param string $input
         * @return string
         */
        public static function punycode_encode($input)
        {
        }
        /**
         * @param int $digit
         * @return string
         */
        protected static function digit_to_char($digit)
        {
        }
        /**
         * @param int $delta
         * @param int $numpoints
         * @param bool $firsttime
         * @return int|float
         */
        protected static function adapt($delta, $numpoints, $firsttime)
        {
        }
    }
    final class Ipv6
    {
        /**
         * @param string|\Stringable $ip
         * @return string
         */
        public static function uncompress($ip)
        {
        }
        /**
         * @param string $ip
         * @return string
         */
        public static function compress($ip)
        {
        }
        /**
         * @param string $ip
         * @return bool
         */
        public static function check_ipv6($ip)
        {
        }
    }
    class Iri
    {
        /**
         * @var string|null
         */
        protected $scheme = null;
        /**
         * @var string|null
         */
        protected $iuserinfo = null;
        /**
         * @var string|null
         */
        protected $ihost = null;
        /**
         * @var string|null
         */
        protected $port = null;
        /**
         * @var string
         */
        protected $ipath = '';
        /**
         * @var string|null
         */
        protected $iquery = null;
        /**
         * @var string
         */
        protected $ifragment = null;
        /**
         * @var array
         */
        protected $normalization = array('acap' => array('port' => \WpOrg\Requests\Port::ACAP), 'dict' => array('port' => \WpOrg\Requests\Port::DICT), 'file' => array('ihost' => 'localhost'), 'http' => array('port' => \WpOrg\Requests\Port::HTTP), 'https' => array('port' => \WpOrg\Requests\Port::HTTPS));
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        /**
         * @param string|\Stringable|null $iri
         */
        public function __construct($iri = null)
        {
        }
        /**
         * @param \WpOrg\Requests\Iri|string $base
         * @param \WpOrg\Requests\Iri|string $relative
         * @return \WpOrg\Requests\Iri|false
         */
        public static function absolutize($base, $relative)
        {
        }
        /**
         * @param string $iri
         * @return array
         */
        protected function parse_iri($iri)
        {
        }
        /**
         * @param string $input
         * @return string
         */
        protected function remove_dot_segments($input)
        {
        }
        /**
         * @param string $text
         * @param string $extra_chars
         * @param bool $iprivate
         * @return string
         */
        protected function replace_invalid_with_pct_encoding($text, $extra_chars, $iprivate = false)
        {
        }
        /**
         * @param array $regex_match
         * @return string
         */
        protected function remove_iunreserved_percent_encoded($regex_match)
        {
        }
        protected function scheme_normalization()
        {
        }
        /**
         * @return bool
         */
        public function is_valid()
        {
        }
        public function __wakeup()
        {
        }
        /**
         * @param string $iri
         * @return bool
         */
        protected function set_iri($iri)
        {
        }
        /**
         * @param string $scheme
         * @return bool
         */
        protected function set_scheme($scheme)
        {
        }
        /**
         * @param string $authority
         * @return bool
         */
        protected function set_authority($authority)
        {
        }
        /**
         * @param string $iuserinfo
         * @return bool
         */
        protected function set_userinfo($iuserinfo)
        {
        }
        /**
         * @param string $ihost
         * @return bool
         */
        protected function set_host($ihost)
        {
        }
        /**
         * @param string $port
         * @return bool
         */
        protected function set_port($port)
        {
        }
        /**
         * @param string $ipath
         * @return bool
         */
        protected function set_path($ipath)
        {
        }
        /**
         * @param string $iquery
         * @return bool
         */
        protected function set_query($iquery)
        {
        }
        /**
         * @param string $ifragment
         * @return bool
         */
        protected function set_fragment($ifragment)
        {
        }
        /**
         * @param string|bool $iri
         * @return string|false
         */
        protected function to_uri($iri)
        {
        }
        /**
         * @return string|false
         */
        protected function get_iri()
        {
        }
        /**
         * @return string
         */
        protected function get_uri()
        {
        }
        /**
         * @return string|null
         */
        protected function get_iauthority()
        {
        }
        /**
         * @return string
         */
        protected function get_authority()
        {
        }
    }
    final class Port
    {
        /**
         * Port to use with Acap requests.
         *
         * @var int
         */
        const ACAP = 674;
        /**
         * Port to use with Dictionary requests.
         *
         * @var int
         */
        const DICT = 2628;
        /**
         * Port to use with HTTP requests.
         *
         * @var int
         */
        const HTTP = 80;
        /**
         * Port to use with HTTP over SSL requests.
         *
         * @var int
         */
        const HTTPS = 443;
        /**
         * @phpstan-param 'acap'|'dict'|'http'|'https' $type
         * @return int
         */
        public static function get($type)
        {
        }
    }
    /**
     * Proxy connection interface
     *
     * Implement this interface to handle proxy settings and authentication
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see \WpOrg\Requests\Hooks
     *
     * @package Requests\Proxy
     * @since   1.6
     */
    interface Proxy
    {
        /**
         * @param \WpOrg\Requests\Hooks $hooks
         */
        public function register(\WpOrg\Requests\Hooks $hooks);
    }
}
namespace WpOrg\Requests\Proxy {
    final class Http implements \WpOrg\Requests\Proxy
    {
        /**
         * @var string
         */
        public $proxy;
        /**
         * @var string
         */
        public $user;
        /**
         * @var string
         */
        public $pass;
        /**
         * @var bool
         */
        public $use_authentication;
        /**
         * @param string|null $reason
         * @param mixed $data
         * @param array|string|null $args
         */
        public function __construct($args = null)
        {
        }
        /**
         * @param \WpOrg\Requests\Hooks $hooks
         */
        public function register(\WpOrg\Requests\Hooks $hooks)
        {
        }
        /**
         * @param resource|\CurlHandle $handle
         */
        public function curl_before_send(&$handle)
        {
        }
        /**
         * @param string $remote_socket
         */
        public function fsockopen_remote_socket(&$remote_socket)
        {
        }
        /**
         * @param string $path
         * @param string $url
         */
        public function fsockopen_remote_host_path(&$path, $url)
        {
        }
        /**
         * @param string $out
         */
        public function fsockopen_header(&$out)
        {
        }
        /**
         * @return string
         */
        public function get_auth_string()
        {
        }
    }
}
namespace WpOrg\Requests {
    class Requests
    {
        /**
         * POST method
         *
         * @var string
         */
        const POST = 'POST';
        /**
         * PUT method
         *
         * @var string
         */
        const PUT = 'PUT';
        /**
         * GET method
         *
         * @var string
         */
        const GET = 'GET';
        /**
         * HEAD method
         *
         * @var string
         */
        const HEAD = 'HEAD';
        /**
         * DELETE method
         *
         * @var string
         */
        const DELETE = 'DELETE';
        /**
         * OPTIONS method
         *
         * @var string
         */
        const OPTIONS = 'OPTIONS';
        /**
         * TRACE method
         *
         * @var string
         */
        const TRACE = 'TRACE';
        /**
         * PATCH method
         *
         * @link https://tools.ietf.org/html/rfc5789
         * @var string
         */
        const PATCH = 'PATCH';
        /**
         * Default size of buffer size to read streams
         *
         * @var integer
         */
        const BUFFER_SIZE = 1160;
        /**
         * Option defaults.
         *
         * @see \WpOrg\Requests\Requests::get_default_options()
         * @see \WpOrg\Requests\Requests::request() for values returned by this method
         *
         * @since 2.0.0
         *
         * @var array
         */
        const OPTION_DEFAULTS = ['timeout' => 10, 'connect_timeout' => 10, 'useragent' => 'php-requests/' . self::VERSION, 'protocol_version' => 1.1, 'redirected' => 0, 'redirects' => 10, 'follow_redirects' => true, 'blocking' => true, 'type' => self::GET, 'filename' => false, 'auth' => false, 'proxy' => false, 'cookies' => false, 'max_bytes' => false, 'idn' => true, 'hooks' => null, 'transport' => null, 'verify' => null, 'verifyname' => true];
        /**
         * Default supported Transport classes.
         *
         * @since 2.0.0
         *
         * @var array
         */
        const DEFAULT_TRANSPORTS = [\WpOrg\Requests\Transport\Curl::class => \WpOrg\Requests\Transport\Curl::class, \WpOrg\Requests\Transport\Fsockopen::class => \WpOrg\Requests\Transport\Fsockopen::class];
        /**
         * Current version of Requests
         *
         * @var string
         */
        const VERSION = '2.0.11';
        /**
         * @var array
         */
        public static $transport = [];
        /**
         * @var array
         */
        protected static $transports = [];
        /**
         * @var string
         */
        protected static $certificate_path = __DIR__ . '/../certificates/cacert.pem';
        /**
         * @param string $transport
         */
        public static function add_transport($transport)
        {
        }
        /**
         * @param array<string,bool> $capabilities
         * @return string
         */
        protected static function get_transport_class(array $capabilities = [])
        {
        }
        /**
         * @param array<string,bool> $capabilities
         * @return \WpOrg\Requests\Transport
         */
        protected static function get_transport(array $capabilities = [])
        {
        }
        /**
         * @param array<string,bool> $capabilities
         * @return bool
         */
        public static function has_capabilities(array $capabilities = [])
        {
        }
        public static function get($url, $headers = [], $options = [])
        {
        }
        public static function head($url, $headers = [], $options = [])
        {
        }
        public static function delete($url, $headers = [], $options = [])
        {
        }
        public static function trace($url, $headers = [], $options = [])
        {
        }
        public static function post($url, $headers = [], $data = [], $options = [])
        {
        }
        public static function put($url, $headers = [], $data = [], $options = [])
        {
        }
        public static function options($url, $headers = [], $data = [], $options = [])
        {
        }
        public static function patch($url, $headers, $data = [], $options = [])
        {
        }
        /**#@-*/
        /**
         * @param string|\Stringable $url
         * @param array $headers
         * @param array|null $data
         * @param string $type
         * @param array $options
         * @return \WpOrg\Requests\Response
         */
        public static function request($url, $headers = [], $data = [], $type = self::GET, $options = [])
        {
        }
        /**
         * @param array $requests
         * @param array $options
         * @return array
         */
        public static function request_multiple($requests, $options = [])
        {
        }
        /**
         * @param bool $multirequest
         * @return array
         */
        protected static function get_default_options($multirequest = false)
        {
        }
        /**
         * @return string
         */
        public static function get_certificate_path()
        {
        }
        /**
         * @param string|\Stringable|bool $path
         */
        public static function set_certificate_path($path)
        {
        }
        /**
         * @param string $url
         * @param array $headers
         * @param array|null $data
         * @param string $type
         * @param array $options
         * @return void
         */
        protected static function set_defaults(&$url, &$headers, &$data, &$type, &$options)
        {
        }
        /**
         * @param string $headers
         * @param string $url
         * @param array $req_headers
         * @param array $req_data
         * @param array $options
         * @return \WpOrg\Requests\Response
         */
        protected static function parse_response($headers, $url, $req_headers, $req_data, $options)
        {
        }
        /**
         * @param string $response
         * @param array $request
         * @return void
         */
        public static function parse_multiple(&$response, $request)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        protected static function decode_chunked($data)
        {
        }
        // @codeCoverageIgnoreEnd
        /**
         * @param iterable $dictionary
         * @return array
         */
        public static function flatten($dictionary)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public static function decompress($data)
        {
        }
        /**
         * @param string $gz_data
         * @return string|bool
         */
        public static function compatible_gzinflate($gz_data)
        {
        }
    }
    class Response
    {
        /**
         * @var string
         */
        public $body = '';
        /**
         * @var string
         */
        public $raw = '';
        /**
         * @var \WpOrg\Requests\Response\Headers
         */
        public $headers = [];
        /**
         * @var int|bool
         */
        public $status_code = false;
        /**
         * @var float|bool
         */
        public $protocol_version = false;
        /**
         * @var bool
         */
        public $success = false;
        /**
         * @var int
         */
        public $redirects = 0;
        /**
         * @var string
         */
        public $url = '';
        /**
         * @var array
         */
        public $history = [];
        /**
         * @var \WpOrg\Requests\Cookie\Jar
         */
        public $cookies = [];
        public function __construct()
        {
        }
        /**
         * @return bool
         */
        public function is_redirect()
        {
        }
        /**
         * @param bool $allow_redirects
         */
        public function throw_for_status($allow_redirects = true)
        {
        }
        /**
         * @param bool|null $associative
         * @param int $depth
         * @param int $options
         * @return array
         */
        public function decode_body($associative = true, $depth = 512, $options = 0)
        {
        }
    }
}
namespace WpOrg\Requests\Utility {
    class CaseInsensitiveDictionary implements \ArrayAccess, \IteratorAggregate
    {
        /**
         * @var array
         */
        protected $data = [];
        /**
         * @param array $data
         */
        public function __construct(array $data = [])
        {
        }
        /**
         * @param string $offset
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         * @return string|null
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param string $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * @return \ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * @return array
         */
        public function getAll()
        {
        }
    }
}
namespace WpOrg\Requests\Response {
    class Headers extends \WpOrg\Requests\Utility\CaseInsensitiveDictionary
    {
        /**
         * @param string $offset
         * @return string|null
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param string $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         * @return array|null
         */
        public function getValues($offset)
        {
        }
        /**
         * @param string|array $value
         * @return string
         */
        public function flatten($value)
        {
        }
        /**
         * @return \ArrayIterator
         */
        public function getIterator()
        {
        }
    }
}
namespace WpOrg\Requests {
    class Session
    {
        /**
         * @var string|null
         */
        public $url = null;
        /**
         * @var array
         */
        public $headers = [];
        /**
         * @var array
         */
        public $data = [];
        /**
         * @var array
         */
        public $options = [];
        /**
         * @param string|\Stringable|null $url
         * @param array $headers
         * @param array $data
         * @param array $options
         */
        public function __construct($url = null, $headers = [], $data = [], $options = [])
        {
        }
        /**
         * @param string $name
         * @return mixed|null
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        public function get($url, $headers = [], $options = [])
        {
        }
        public function head($url, $headers = [], $options = [])
        {
        }
        public function delete($url, $headers = [], $options = [])
        {
        }
        public function post($url, $headers = [], $data = [], $options = [])
        {
        }
        public function put($url, $headers = [], $data = [], $options = [])
        {
        }
        public function patch($url, $headers, $data = [], $options = [])
        {
        }
        /**#@-*/
        /**
         * @param string $url
         * @param array $headers
         * @param array|null $data
         * @param string $type
         * @param array $options
         * @return \WpOrg\Requests\Response
         */
        public function request($url, $headers = [], $data = [], $type = \WpOrg\Requests\Requests::GET, $options = [])
        {
        }
        /**
         * @param array $requests
         * @param array $options
         * @return array
         */
        public function request_multiple($requests, $options = [])
        {
        }
        public function __wakeup()
        {
        }
        /**
         * @param array $request
         * @param bool $merge_options
         * @return array
         */
        protected function merge_request($request, $merge_options = true)
        {
        }
    }
    final class Ssl
    {
        /**
         * @param string|\Stringable $host
         * @param array $cert
         * @return bool
         */
        public static function verify_certificate($host, $cert)
        {
        }
        /**
         * @param string|\Stringable $reference
         * @return bool
         */
        public static function verify_reference_name($reference)
        {
        }
        /**
         * @param string|\Stringable $host
         * @param string|\Stringable $reference
         * @return bool
         */
        public static function match_domain($host, $reference)
        {
        }
    }
    /**
     * Base HTTP transport
     *
     * @package Requests\Transport
     */
    interface Transport
    {
        /**
         * @param string $url
         * @param array $headers
         * @param string|array $data
         * @param array $options
         * @return string
         */
        public function request($url, $headers = [], $data = [], $options = []);
        /**
         * @param array $requests
         * @param array $options
         * @return array
         */
        public function request_multiple($requests, $options);
        /**
         * @param array<string,bool> $capabilities
         * @return bool
         */
        public static function test($capabilities = []);
    }
}
namespace WpOrg\Requests\Transport {
    final class Curl implements \WpOrg\Requests\Transport
    {
        const CURL_7_10_5 = 0x70a05;
        const CURL_7_16_2 = 0x71002;
        /**
         * @var string
         */
        public $headers = '';
        /**
         * @var string
         */
        public $response_data = '';
        /**
         * @var array
         */
        public $info;
        /**
         * @var int
         */
        public $version;
        /**
         * @param string $message
         * @param string $type
         * @param mixed $data
         * @param int $code
         */
        public function __construct()
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string|\Stringable $url
         * @param array $headers
         * @param string|array $data
         * @param array $options
         * @return string
         */
        public function request($url, $headers = [], $data = [], $options = [])
        {
        }
        /**
         * @param array $requests
         * @param array $options
         * @return array
         */
        public function request_multiple($requests, $options)
        {
        }
        /**
         * @param string $url
         * @param array $headers
         * @param string|array $data
         * @param array $options
         * @return resource|\CurlHandle
         */
        public function &get_subrequest_handle($url, $headers, $data, $options)
        {
        }
        /**
         * @param string $response
         * @param array $options
         * @return string|false
         */
        public function process_response($response, $options)
        {
        }
        /**
         * @param resource|\CurlHandle $handle
         * @param string $headers
         * @return int
         */
        public function stream_headers($handle, $headers)
        {
        }
        /**
         * @param resource|\CurlHandle $handle
         * @param string $data
         * @return int
         */
        public function stream_body($handle, $data)
        {
        }
        /**
         * @param array<string,bool> $capabilities
         * @return bool
         */
        public static function test($capabilities = [])
        {
        }
    }
    final class Fsockopen implements \WpOrg\Requests\Transport
    {
        /**
         * Second to microsecond conversion
         *
         * @var integer
         */
        const SECOND_IN_MICROSECONDS = 1000000;
        /**
         * @var string
         */
        public $headers = '';
        /**
         * @var array
         */
        public $info;
        /**
         * @param string|\Stringable $url
         * @param array $headers
         * @param string|array $data
         * @param array $options
         * @return string
         */
        public function request($url, $headers = [], $data = [], $options = [])
        {
        }
        /**
         * @param array $requests
         * @param array $options
         * @return array
         */
        public function request_multiple($requests, $options)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         */
        public function connect_error_handler($errno, $errstr)
        {
        }
        /**
         * @param string $host
         * @param resource $context
         * @return bool
         */
        public function verify_certificate_from_context($host, $context)
        {
        }
        /**
         * @param array<string,bool> $capabilities
         * @return bool
         */
        public static function test($capabilities = [])
        {
        }
    }
}
namespace WpOrg\Requests\Utility {
    final class FilteredIterator extends \ArrayIterator
    {
        /**
         * @param array $data
         * @param callable $callback
         */
        public function __construct($data, $callback)
        {
        }
        /**
         * @param array $data
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function __unserialize($data)
        {
        }
        // phpcs:enable
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return string
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * @param string $data
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function unserialize($data)
        {
        }
    }
    final class InputValidator
    {
        /**
         * @param mixed $input
         * @return bool
         */
        public static function is_string_or_stringable($input)
        {
        }
        /**
         * @param mixed $input
         * @return bool
         */
        public static function is_numeric_array_key($input)
        {
        }
        /**
         * @param mixed $input
         * @return bool
         */
        public static function is_stringable_object($input)
        {
        }
        /**
         * @param mixed $input
         * @return bool
         */
        public static function has_array_access($input)
        {
        }
        /**
         * @param mixed $input
         * @return bool
         */
        public static function is_iterable($input)
        {
        }
        /**
         * @param mixed $input
         * @return bool
         */
        public static function is_curl_handle($input)
        {
        }
    }
}
namespace {
    class SimplePie_Author
    {
        /**
         * @var string
         */
        var $name;
        /**
         * @var string
         */
        var $link;
        /**
         * @var string
         */
        var $email;
        /**
         * @param string $name
         * @param string $link
         * @param string $email
         */
        public function __construct($name = \null, $link = \null, $email = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_name()
        {
        }
        /**
         * @return string|null
         */
        public function get_link()
        {
        }
        /**
         * @return string|null
         */
        public function get_email()
        {
        }
    }
    class SimplePie_Cache
    {
        /**
         * @var array
         */
        protected static $handlers = array('mysql' => 'SimplePie_Cache_MySQL', 'memcache' => 'SimplePie_Cache_Memcache', 'memcached' => 'SimplePie_Cache_Memcached', 'redis' => 'SimplePie_Cache_Redis');
        /**
         * @param string $location
         * @param string $filename
         * @param string $extension
         * @return \SimplePie_Cache_Base
         */
        public static function get_handler($location, $filename, $extension)
        {
        }
        public function create($location, $filename, $extension)
        {
        }
        /**
         * @param string $type
         * @param string $class
         */
        public static function register($type, $class)
        {
        }
        /**
         * @param string $url
         * @return array
         */
        public static function parse_URL($url)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Base for cache objects
     *
     * Classes to be used with {@see SimplePie_Cache::register()} are expected
     * to implement this interface.
     *
     * @package SimplePie
     * @subpackage Caching
     */
    interface SimplePie_Cache_Base
    {
        /**
         * Feed cache type
         *
         * @var string
         */
        const TYPE_FEED = 'spc';
        /**
         * Image cache type
         *
         * @var string
         */
        const TYPE_IMAGE = 'spi';
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         */
        public function __construct($location, $name, $type);
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data);
        /**
         * @return array
         */
        public function load();
        /**
         * @return int
         */
        public function mtime();
        /**
         * @return bool
         */
        public function touch();
        /**
         * @return bool
         */
        public function unlink();
    }
    abstract class SimplePie_Cache_DB implements \SimplePie_Cache_Base
    {
        /**
         * @param \SimplePie $data
         * @return array
         */
        protected static function prepare_simplepie_object_for_cache($data)
        {
        }
    }
    class SimplePie_Cache_File implements \SimplePie_Cache_Base
    {
        /**
         * @var string
         */
        protected $location;
        /**
         * @var string
         */
        protected $filename;
        /**
         * @var string
         */
        protected $extension;
        /**
         * @var string
         */
        protected $name;
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data)
        {
        }
        /**
         * @return array
         */
        public function load()
        {
        }
        /**
         * @return int
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return bool
         */
        public function unlink()
        {
        }
    }
    class SimplePie_Cache_Memcache implements \SimplePie_Cache_Base
    {
        /**
         * @var \Memcache
         */
        protected $cache;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var string
         */
        protected $name;
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data)
        {
        }
        /**
         * @return array
         */
        public function load()
        {
        }
        /**
         * @return int
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return bool
         */
        public function unlink()
        {
        }
    }
    class SimplePie_Cache_Memcached implements \SimplePie_Cache_Base
    {
        /**
         * @var \Memcached
         */
        protected $cache;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var string
         */
        protected $name;
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data)
        {
        }
        /**
         * @return array
         */
        public function load()
        {
        }
        /**
         * @return int
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return bool
         */
        public function unlink()
        {
        }
    }
    class SimplePie_Cache_MySQL extends \SimplePie_Cache_DB
    {
        /**
         * @var \PDO
         */
        protected $mysql;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var string
         */
        protected $id;
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         * @phpstan-return void
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data)
        {
        }
        /**
         * @return array
         */
        public function load()
        {
        }
        /**
         * @return int
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return bool
         */
        public function unlink()
        {
        }
    }
    class SimplePie_Cache_Redis implements \SimplePie_Cache_Base
    {
        /**
         * @var \Redis
         */
        protected $cache;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var \type
         */
        protected $data;
        /**
         * @param string $location
         * @param string $name
         * @param string $type
         */
        public function __construct($location, $name, $options = \null)
        {
        }
        /**
         * @param \Redis $cache
         */
        public function setRedisClient(\Redis $cache)
        {
        }
        /**
         * @param array|\SimplePie $data
         * @return bool
         */
        public function save($data)
        {
        }
        /**
         * @return array
         */
        public function load()
        {
        }
        /**
         * @return int
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return bool
         */
        public function unlink()
        {
        }
    }
    class SimplePie_Caption
    {
        /**
         * @var string
         */
        var $type;
        /**
         * @var string
         */
        var $lang;
        /**
         * @var string
         */
        var $startTime;
        /**
         * @var string
         */
        var $endTime;
        /**
         * @var string
         */
        var $text;
        public function __construct($type = \null, $lang = \null, $startTime = \null, $endTime = \null, $text = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_endtime()
        {
        }
        /**
         * @return string|null
         */
        public function get_language()
        {
        }
        /**
         * @return string|null
         */
        public function get_starttime()
        {
        }
        /**
         * @return string|null
         */
        public function get_text()
        {
        }
        /**
         * @return string|null
         */
        public function get_type()
        {
        }
    }
    class SimplePie_Category
    {
        /**
         * @var string|null
         */
        var $term;
        /**
         * @var string|null
         */
        var $scheme;
        /**
         * @var string|null
         */
        var $label;
        /**
         * @var string|null
         */
        var $type;
        /**
         * @param string|null $term
         * @param string|null $scheme
         * @param string|null $label
         * @param string|null $type
         */
        public function __construct($term = \null, $scheme = \null, $label = \null, $type = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_term()
        {
        }
        /**
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * @param bool $strict
         * @return string|null
         */
        public function get_label($strict = \false)
        {
        }
        /**
         * @return string|null
         */
        public function get_type()
        {
        }
    }
    class SimplePie_Content_Type_Sniffer
    {
        /**
         * @var \SimplePie_File
         */
        var $file;
        /**
         * @param \SimplePie_Content_Type_Sniffer $file
         */
        public function __construct($file)
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function text_or_binary()
        {
        }
        /**
         * @return string
         */
        public function unknown()
        {
        }
        /**
         * @return string
         */
        public function image()
        {
        }
        /**
         * @return string
         */
        public function feed_or_html()
        {
        }
    }
    class SimplePie_Copyright
    {
        /**
         * @var string
         */
        var $url;
        /**
         * @var string
         */
        var $label;
        public function __construct($url = \null, $label = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_url()
        {
        }
        /**
         * @return string|null
         */
        public function get_attribution()
        {
        }
    }
    class SimplePie
    {
        /**
         * @var array
         */
        public $data = array();
        /**
         * @var mixed
         */
        public $error;
        /**
         * @var int
         */
        public $status_code;
        /**
         * @var object
         */
        public $sanitize;
        /**
         * @var string
         */
        public $useragent = \SIMPLEPIE_USERAGENT;
        /**
         * @var string
         */
        public $feed_url;
        /**
         * @var string
         */
        public $permanent_url = \null;
        /**
         * @var object
         */
        public $file;
        /**
         * @var string
         */
        public $raw_data;
        /**
         * @var int
         */
        public $timeout = 10;
        /**
         * @var array
         */
        public $curl_options = array();
        /**
         * @var bool
         */
        public $force_fsockopen = \false;
        /**
         * @var bool
         */
        public $force_feed = \false;
        /**
         * @var bool
         */
        public $cache = \true;
        /**
         * @var bool
         */
        public $force_cache_fallback = \false;
        /**
         * @var int
         */
        public $cache_duration = 3600;
        /**
         * @var int
         */
        public $autodiscovery_cache_duration = 604800;
        // 7 Days.
        /**
         * @var string
         */
        public $cache_location = './cache';
        /**
         * @var string
         */
        public $cache_name_function = 'md5';
        /**
         * @var bool
         */
        public $order_by_date = \true;
        /**
         * @var mixed
         */
        public $input_encoding = \false;
        /**
         * @var int
         */
        public $autodiscovery = \SIMPLEPIE_LOCATOR_ALL;
        /**
         * @var \SimplePie_Registry
         */
        public $registry;
        /**
         * @var int
         */
        public $max_checked_feeds = 10;
        /**
         * @var array
         */
        public $all_discovered_feeds = array();
        /**
         * @var string
         */
        public $image_handler = '';
        /**
         * @var array
         */
        public $multifeed_url = array();
        /**
         * @var array
         */
        public $multifeed_objects = array();
        /**
         * @var array
         */
        public $config_settings = \null;
        /**
         * @var int
         */
        public $item_limit = 0;
        /**
         * @var bool
         */
        public $check_modified = \false;
        /**
         * @var array
         */
        public $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');
        /**
         * @var array
         */
        public $add_attributes = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none'));
        /**
         * @var array
         */
        public $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');
        /**
         * @var bool
         */
        public $enable_exceptions = \false;
        public function __construct()
        {
        }
        public function __toString()
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param bool $enable
         */
        public function force_feed($enable = \false)
        {
        }
        /**
         * @param string|array $url
         */
        public function set_feed_url($url)
        {
        }
        /**
         * @param \SimplePie_File $file
         * @return bool
         */
        public function set_file(&$file)
        {
        }
        /**
         * @param string $data
         */
        public function set_raw_data($data)
        {
        }
        /**
         * @param int $timeout
         */
        public function set_timeout($timeout = 10)
        {
        }
        /**
         * @param array $curl_options
         */
        public function set_curl_options(array $curl_options = array())
        {
        }
        /**
         * @param bool $enable
         */
        public function force_fsockopen($enable = \false)
        {
        }
        /**
         * @param bool $enable
         */
        public function enable_cache($enable = \true)
        {
        }
        /**
         * @param bool $enable
         */
        public function force_cache_fallback($enable = \false)
        {
        }
        /**
         * @param int $seconds
         */
        public function set_cache_duration($seconds = 3600)
        {
        }
        /**
         * @param int $seconds
         */
        public function set_autodiscovery_cache_duration($seconds = 604800)
        {
        }
        /**
         * @param string $location
         */
        public function set_cache_location($location = './cache')
        {
        }
        /**
         * @param string $url
         * @return string
         */
        public function get_cache_filename($url)
        {
        }
        /**
         * @param bool $enable
         */
        public function enable_order_by_date($enable = \true)
        {
        }
        /**
         * @param string $encoding
         */
        public function set_input_encoding($encoding = \false)
        {
        }
        /**
         * @param int $level
         */
        public function set_autodiscovery_level($level = \SIMPLEPIE_LOCATOR_ALL)
        {
        }
        /**
         * @return \SimplePie_Registry
         */
        public function &get_registry()
        {
        }
        public function set_cache_class($class = 'SimplePie_Cache')
        {
        }
        public function set_locator_class($class = 'SimplePie_Locator')
        {
        }
        public function set_parser_class($class = 'SimplePie_Parser')
        {
        }
        public function set_file_class($class = 'SimplePie_File')
        {
        }
        public function set_sanitize_class($class = 'SimplePie_Sanitize')
        {
        }
        public function set_item_class($class = 'SimplePie_Item')
        {
        }
        public function set_author_class($class = 'SimplePie_Author')
        {
        }
        public function set_category_class($class = 'SimplePie_Category')
        {
        }
        public function set_enclosure_class($class = 'SimplePie_Enclosure')
        {
        }
        public function set_caption_class($class = 'SimplePie_Caption')
        {
        }
        public function set_copyright_class($class = 'SimplePie_Copyright')
        {
        }
        public function set_credit_class($class = 'SimplePie_Credit')
        {
        }
        public function set_rating_class($class = 'SimplePie_Rating')
        {
        }
        public function set_restriction_class($class = 'SimplePie_Restriction')
        {
        }
        public function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')
        {
        }
        public function set_source_class($class = 'SimplePie_Source')
        {
        }
        /**#@-*/
        /**
         * @param string $ua
         */
        public function set_useragent($ua = \SIMPLEPIE_USERAGENT)
        {
        }
        /**
         * @param mixed $function
         */
        public function set_cache_name_function($function = 'md5')
        {
        }
        /**
         * @param bool $set
         */
        public function set_stupidly_fast($set = \false)
        {
        }
        /**
         * @param int $max
         */
        public function set_max_checked_feeds($max = 10)
        {
        }
        public function remove_div($enable = \true)
        {
        }
        public function strip_htmltags($tags = '', $encode = \null)
        {
        }
        public function encode_instead_of_strip($enable = \true)
        {
        }
        public function strip_attributes($attribs = '')
        {
        }
        public function add_attributes($attribs = '')
        {
        }
        /**
         * @param string $encoding
         */
        public function set_output_encoding($encoding = 'UTF-8')
        {
        }
        public function strip_comments($strip = \false)
        {
        }
        /**
         * @param array|null $element_attribute
         */
        public function set_url_replacements($element_attribute = \null)
        {
        }
        public function set_https_domains($domains = array())
        {
        }
        /**
         * @param string $page
         * @param string $qs
         */
        public function set_image_handler($page = \false, $qs = 'i')
        {
        }
        /**
         * @param int $limit
         */
        public function set_item_limit($limit = 0)
        {
        }
        /**
         * @param bool $enable
         */
        public function enable_exceptions($enable = \true)
        {
        }
        /**
         * @return bool
         */
        public function init()
        {
        }
        /**
         * @param \SimplePie_Cache_Base|false $cache
         * @return array|true
         */
        protected function fetch_data(&$cache)
        {
        }
        /**
         * @return string|array
         */
        public function error()
        {
        }
        /**
         * @return int
         */
        public function status_code()
        {
        }
        /**
         * @return string|bool
         */
        public function get_raw_data()
        {
        }
        /**
         * @return string
         */
        public function get_encoding()
        {
        }
        /**
         * @param string $mime
         */
        public function handle_content_type($mime = 'text/html')
        {
        }
        /**
         * @return int
         */
        public function get_type()
        {
        }
        /**
         * @param bool $permanent
         * @return string|null
         */
        public function subscribe_url($permanent = \false)
        {
        }
        /**
         * @param string $namespace
         * @param string $tag
         * @return array
         */
        public function get_feed_tags($namespace, $tag)
        {
        }
        /**
         * @param string $namespace
         * @param string $tag
         * @return array
         */
        public function get_channel_tags($namespace, $tag)
        {
        }
        /**
         * @param string $namespace
         * @param string $tag
         * @return array
         */
        public function get_image_tags($namespace, $tag)
        {
        }
        /**
         * @param array $element
         * @return string
         */
        public function get_base($element = array())
        {
        }
        /**
         * @param string $data
         * @param int $type
         * @param string $base
         * @return string
         */
        public function sanitize($data, $type, $base = '')
        {
        }
        /**
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_categories()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Author|null
         */
        public function get_author($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_authors()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Author|null
         */
        public function get_contributor($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_contributors()
        {
        }
        /**
         * @param int $key
         * @param string $rel
         * @return string|null
         */
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        /**
         * @return string|null
         */
        public function get_permalink()
        {
        }
        /**
         * @param string $rel
         * @return array|null
         */
        public function get_links($rel = 'alternate')
        {
        }
        public function get_all_discovered_feeds()
        {
        }
        /**
         * @return string|null
         */
        public function get_description()
        {
        }
        /**
         * @return string|null
         */
        public function get_copyright()
        {
        }
        /**
         * @return string|null
         */
        public function get_language()
        {
        }
        /**
         * @return string|null
         */
        public function get_latitude()
        {
        }
        /**
         * @return string|null
         */
        public function get_longitude()
        {
        }
        /**
         * @return string|null
         */
        public function get_image_title()
        {
        }
        /**
         * @return string|null
         */
        public function get_image_url()
        {
        }
        /**
         * @return string|null
         */
        public function get_image_link()
        {
        }
        /**
         * @return int|float|null
         */
        public function get_image_width()
        {
        }
        /**
         * @return int|float|null
         */
        public function get_image_height()
        {
        }
        /**
         * @param int $max
         * @return int
         */
        public function get_item_quantity($max = 0)
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Item|null
         */
        public function get_item($key = 0)
        {
        }
        /**
         * @param int $start
         * @param int $end
         * @return \SimplePie_Item[]|null
         */
        public function get_items($start = 0, $end = 0)
        {
        }
        public function set_favicon_handler($page = \false, $qs = 'i')
        {
        }
        public function get_favicon()
        {
        }
        /**
         * @param string $method
         * @param array $args
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param \SimplePie $a
         * @param \SimplePie $b
         * @return bool
         */
        public static function sort_items($a, $b)
        {
        }
        /**
         * @param array $urls
         * @param int $start
         * @param int $end
         * @param int $limit
         * @return array
         */
        public static function merge_items($urls, $start = 0, $end = 0, $limit = 0)
        {
        }
    }
    class SimplePie_Core extends \SimplePie
    {
    }
    class SimplePie_Credit
    {
        /**
         * @var string
         */
        var $role;
        /**
         * @var string
         */
        var $scheme;
        /**
         * @var string
         */
        var $name;
        public function __construct($role = \null, $scheme = \null, $name = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_role()
        {
        }
        /**
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * @return string|null
         */
        public function get_name()
        {
        }
    }
    class SimplePie_Decode_HTML_Entities
    {
        /**
         * @var string
         */
        var $data = '';
        /**
         * @var string
         */
        var $consumed = '';
        /**
         * @var int
         */
        var $position = 0;
        /**
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * @return string
         */
        public function parse()
        {
        }
        /**
         * @return mixed
         */
        public function consume()
        {
        }
        /**
         * @param string $chars
         * @return mixed
         */
        public function consume_range($chars)
        {
        }
        public function unconsume()
        {
        }
        public function entity()
        {
        }
    }
    class SimplePie_Enclosure
    {
        /**
         * @var string
         */
        var $bitrate;
        /**
         * @var array
         */
        var $captions;
        /**
         * @var array
         */
        var $categories;
        /**
         * @var int
         */
        var $channels;
        /**
         * @var \SimplePie_Copyright
         */
        var $copyright;
        /**
         * @var array
         */
        var $credits;
        /**
         * @var string
         */
        var $description;
        /**
         * @var int
         */
        var $duration;
        /**
         * @var string
         */
        var $expression;
        /**
         * @var string
         */
        var $framerate;
        /**
         * @var string
         */
        var $handler;
        /**
         * @var array
         */
        var $hashes;
        /**
         * @var string
         */
        var $height;
        /**
         * @var null
         */
        var $javascript;
        /**
         * @var array
         */
        var $keywords;
        /**
         * @var string
         */
        var $lang;
        /**
         * @var string
         */
        var $length;
        /**
         * @var string
         */
        var $link;
        /**
         * @var string
         */
        var $medium;
        /**
         * @var string
         */
        var $player;
        /**
         * @var array
         */
        var $ratings;
        /**
         * @var array
         */
        var $restrictions;
        /**
         * @var string
         */
        var $samplingrate;
        /**
         * @var array
         */
        var $thumbnails;
        /**
         * @var string
         */
        var $title;
        /**
         * @var string
         */
        var $type;
        /**
         * @var string
         */
        var $width;
        public function __construct($link = \null, $type = \null, $length = \null, $javascript = \null, $bitrate = \null, $captions = \null, $categories = \null, $channels = \null, $copyright = \null, $credits = \null, $description = \null, $duration = \null, $expression = \null, $framerate = \null, $hashes = \null, $height = \null, $keywords = \null, $lang = \null, $medium = \null, $player = \null, $ratings = \null, $restrictions = \null, $samplingrate = \null, $thumbnails = \null, $title = \null, $width = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_bitrate()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Caption|null
         */
        public function get_caption($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_captions()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_categories()
        {
        }
        /**
         * @return int|null
         */
        public function get_channels()
        {
        }
        /**
         * @return \SimplePie_Copyright|null
         */
        public function get_copyright()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Credit|null
         */
        public function get_credit($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_credits()
        {
        }
        /**
         * @return string|null
         */
        public function get_description()
        {
        }
        /**
         * @param bool $convert
         * @return string|int|null
         */
        public function get_duration($convert = \false)
        {
        }
        /**
         * @return string
         */
        public function get_expression()
        {
        }
        /**
         * @return string|null
         */
        public function get_extension()
        {
        }
        /**
         * @return string|null
         */
        public function get_framerate()
        {
        }
        /**
         * @return string|null
         */
        public function get_handler()
        {
        }
        /**
         * @param int $key
         * @return string|null
         */
        public function get_hash($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_hashes()
        {
        }
        /**
         * @return string|null
         */
        public function get_height()
        {
        }
        /**
         * @return string|null
         */
        public function get_language()
        {
        }
        /**
         * @param int $key
         * @return string|null
         */
        public function get_keyword($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_keywords()
        {
        }
        /**
         * @return float
         */
        public function get_length()
        {
        }
        /**
         * @return string|null
         */
        public function get_link()
        {
        }
        /**
         * @return string|null
         */
        public function get_medium()
        {
        }
        /**
         * @return string|null
         */
        public function get_player()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Rating|null
         */
        public function get_rating($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_ratings()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Restriction|null
         */
        public function get_restriction($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_restrictions()
        {
        }
        /**
         * @return string|null
         */
        public function get_sampling_rate()
        {
        }
        /**
         * @return float|null
         */
        public function get_size()
        {
        }
        /**
         * @param int $key
         * @return string|null
         */
        public function get_thumbnail($key = 0)
        {
        }
        /**
         * @return array|null
         */
        public function get_thumbnails()
        {
        }
        /**
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * @return string|null
         */
        public function get_type()
        {
        }
        /**
         * @return string|null
         */
        public function get_width()
        {
        }
        /**
         * @param array|string $options
         * @return string
         */
        public function native_embed($options = '')
        {
        }
        /**
         * @param array|string $options
         * @param bool $native
         * @return string
         */
        public function embed($options = '', $native = \false)
        {
        }
        /**
         * @param bool $find_handler
         * @return string
         */
        public function get_real_type($find_handler = \false)
        {
        }
    }
    class SimplePie_Exception extends \Exception
    {
    }
    class SimplePie_File
    {
        var $url;
        var $useragent;
        var $success = \true;
        var $headers = array();
        var $body;
        var $status_code;
        var $redirects = 0;
        var $error;
        var $method = \SIMPLEPIE_FILE_SOURCE_NONE;
        var $permanent_url;
        public function __construct($url, $timeout = 10, $redirects = 5, $headers = \null, $useragent = \null, $force_fsockopen = \false, $curl_options = array())
        {
        }
    }
    class SimplePie_HTTP_Parser
    {
        /**
         * @var float
         */
        public $http_version = 0.0;
        /**
         * @var int
         */
        public $status_code = 0;
        /**
         * @var string
         */
        public $reason = '';
        /**
         * @var array
         */
        public $headers = array();
        /**
         * @var string
         */
        public $body = '';
        /**
         * @var string
         */
        protected $state = 'http_version';
        /**
         * @var string
         */
        protected $data = '';
        /**
         * @var int
         */
        protected $data_length = 0;
        /**
         * @var int
         */
        protected $position = 0;
        /**
         * @var string
         */
        protected $name = '';
        /**
         * @var string
         */
        protected $value = '';
        /**
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * @return bool
         */
        public function parse()
        {
        }
        /**
         * @return bool
         */
        protected function has_data()
        {
        }
        /**
         * @return bool
         */
        protected function is_linear_whitespace()
        {
        }
        protected function http_version()
        {
        }
        protected function status()
        {
        }
        protected function reason()
        {
        }
        protected function new_line()
        {
        }
        protected function name()
        {
        }
        protected function linear_whitespace()
        {
        }
        protected function value()
        {
        }
        protected function value_char()
        {
        }
        protected function quote()
        {
        }
        protected function quote_char()
        {
        }
        protected function quote_escaped()
        {
        }
        protected function body()
        {
        }
        /**
         * @phpstan-return void
         */
        protected function chunked()
        {
        }
        /**
         * @param string $headers
         * @param int $count
         * @return string
         */
        public static function prepareHeaders($headers, $count = 1)
        {
        }
    }
    class SimplePie_IRI
    {
        /**
         * @var string
         */
        protected $scheme = \null;
        /**
         * @var string
         */
        protected $iuserinfo = \null;
        /**
         * @var string
         */
        protected $ihost = \null;
        /**
         * @var string
         */
        protected $port = \null;
        /**
         * @var string
         */
        protected $ipath = '';
        /**
         * @var string
         */
        protected $iquery = \null;
        /**
         * @var string
         */
        protected $ifragment = \null;
        protected $normalization = array('acap' => array('port' => 674), 'dict' => array('port' => 2628), 'file' => array('ihost' => 'localhost'), 'http' => array('port' => 80, 'ipath' => '/'), 'https' => array('port' => 443, 'ipath' => '/'));
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $iri
         */
        public function __construct($iri = \null)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param \IRI|string $base
         * @param \IRI|string $relative
         * @return \IRI|false
         */
        public static function absolutize($base, $relative)
        {
        }
        /**
         * @param string $iri
         * @return array
         */
        protected function parse_iri($iri)
        {
        }
        /**
         * @param string $input
         * @return string
         */
        protected function remove_dot_segments($input)
        {
        }
        /**
         * @param string $string
         * @param string $extra_chars
         * @param bool $iprivate
         * @return string
         */
        protected function replace_invalid_with_pct_encoding($string, $extra_chars, $iprivate = \false)
        {
        }
        /**
         * @param array $match
         * @return string
         */
        protected function remove_iunreserved_percent_encoded($match)
        {
        }
        protected function scheme_normalization()
        {
        }
        /**
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * @param string $iri
         * @return bool
         */
        public function set_iri($iri, $clear_cache = \false)
        {
        }
        /**
         * @param string $scheme
         * @return bool
         */
        public function set_scheme($scheme)
        {
        }
        /**
         * @param string $authority
         * @return bool
         */
        public function set_authority($authority, $clear_cache = \false)
        {
        }
        /**
         * @param string $iuserinfo
         * @return bool
         */
        public function set_userinfo($iuserinfo)
        {
        }
        /**
         * @param string $ihost
         * @return bool
         */
        public function set_host($ihost)
        {
        }
        /**
         * @param string $port
         * @return bool
         */
        public function set_port($port)
        {
        }
        /**
         * @param string $ipath
         * @return bool
         */
        public function set_path($ipath, $clear_cache = \false)
        {
        }
        /**
         * @param string $iquery
         * @return bool
         */
        public function set_query($iquery)
        {
        }
        /**
         * @param string $ifragment
         * @return bool
         */
        public function set_fragment($ifragment)
        {
        }
        /**
         * @return string
         */
        public function to_uri($string)
        {
        }
        /**
         * @return string
         */
        public function get_iri()
        {
        }
        /**
         * @return string
         */
        public function get_uri()
        {
        }
        /**
         * @return string
         */
        protected function get_iauthority()
        {
        }
        /**
         * @return string
         */
        protected function get_authority()
        {
        }
    }
    class SimplePie_Item
    {
        /**
         * @var \SimplePie
         */
        var $feed;
        /**
         * @var array
         */
        var $data = array();
        /**
         * @var \SimplePie_Registry
         */
        protected $registry;
        /**
         * @param \SimplePie $feed
         * @param array $data
         */
        public function __construct($feed, $data)
        {
        }
        /**
         * @param \SimplePie_Registry $registry
         */
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string $namespace
         * @param string $tag
         * @return array
         */
        public function get_item_tags($namespace, $tag)
        {
        }
        /**
         * @param array $element
         * @return string
         */
        public function get_base($element = array())
        {
        }
        /**
         * @param string $data
         * @param int $type
         * @param string $base
         * @return string
         */
        public function sanitize($data, $type, $base = '')
        {
        }
        /**
         * @return \SimplePie
         */
        public function get_feed()
        {
        }
        /**
         * @param bool $hash
         * @param string|false $fn
         * @return string|null
         */
        public function get_id($hash = \false, $fn = 'md5')
        {
        }
        /**
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * @param bool $description_only
         * @return string|null
         */
        public function get_description($description_only = \false)
        {
        }
        /**
         * @param bool $content_only
         * @return string|null
         */
        public function get_content($content_only = \false)
        {
        }
        /**
         * @return array|null
         */
        public function get_thumbnail()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * @return \SimplePie_Category[]|null
         */
        public function get_categories()
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Author|null
         */
        public function get_author($key = 0)
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Author|null
         */
        public function get_contributor($key = 0)
        {
        }
        /**
         * @return \SimplePie_Author[]|null
         */
        public function get_contributors()
        {
        }
        /**
         * @return \SimplePie_Author[]|null
         */
        public function get_authors()
        {
        }
        /**
         * @return string
         */
        public function get_copyright()
        {
        }
        /**
         * @param string $date_format
         * @return int|string|null
         */
        public function get_date($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * @param string $date_format
         * @return int|string|null
         */
        public function get_updated_date($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * @param string $date_format
         * @return int|string|null
         */
        public function get_local_date($date_format = '%c')
        {
        }
        /**
         * @param string $date_format
         * @return int|string|null
         */
        public function get_gmdate($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * @param string $date_format
         * @return int|string|null
         */
        public function get_updated_gmdate($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * @return string|null
         */
        public function get_permalink()
        {
        }
        /**
         * @param int $key
         * @param string $rel
         * @return string|null
         */
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        /**
         * @param string $rel
         * @return array|null
         */
        public function get_links($rel = 'alternate')
        {
        }
        /**
         * @param int $key
         * @return \SimplePie_Enclosure|null
         */
        public function get_enclosure($key = 0, $prefer = \null)
        {
        }
        /**
         * @return \SimplePie_Enclosure[]|null
         */
        public function get_enclosures()
        {
        }
        /**
         * @return string|null
         */
        public function get_latitude()
        {
        }
        /**
         * @return string|null
         */
        public function get_longitude()
        {
        }
        /**
         * @return \SimplePie_Source|null
         */
        public function get_source()
        {
        }
    }
    class SimplePie_Locator
    {
        var $useragent;
        var $timeout;
        var $file;
        var $local = array();
        var $elsewhere = array();
        var $cached_entities = array();
        var $http_base;
        var $base;
        var $base_location = 0;
        var $checked_feeds = 0;
        var $max_checked_feeds = 10;
        var $force_fsockopen = \false;
        var $curl_options = array();
        var $dom;
        protected $registry;
        public function __construct(\SimplePie_File $file, $timeout = 10, $useragent = \null, $max_checked_feeds = 10, $force_fsockopen = \false, $curl_options = array())
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function find($type = \SIMPLEPIE_LOCATOR_ALL, &$working = \null)
        {
        }
        public function is_feed($file, $check_html = \false)
        {
        }
        public function get_base()
        {
        }
        public function autodiscovery()
        {
        }
        protected function search_elements_by_tag($name, &$done, $feeds)
        {
        }
        public function get_links()
        {
        }
        public function get_rel_link($rel)
        {
        }
        public function extension(&$array)
        {
        }
        public function body(&$array)
        {
        }
    }
    class SimplePie_Misc
    {
        public static function time_hms($seconds)
        {
        }
        public static function absolutize_url($relative, $base)
        {
        }
        /**
         * @param string $realname
         * @param string $string
         * @return array
         */
        public static function get_element($realname, $string)
        {
        }
        public static function element_implode($element)
        {
        }
        public static function error($message, $level, $file, $line)
        {
        }
        public static function fix_protocol($url, $http = 1)
        {
        }
        public static function array_merge_recursive($array1, $array2)
        {
        }
        public static function parse_url($url)
        {
        }
        public static function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')
        {
        }
        public static function normalize_url($url)
        {
        }
        public static function percent_encoding_normalization($match)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        public static function windows_1252_to_utf8($string)
        {
        }
        /**
         * @param string $data
         * @param string $input
         * @param string $output
         * @return string|bool
         */
        public static function change_encoding($data, $input, $output)
        {
        }
        protected static function change_encoding_mbstring($data, $input, $output)
        {
        }
        protected static function change_encoding_iconv($data, $input, $output)
        {
        }
        /**
         * @param string $data
         * @param string $input
         * @param string $output
         * @return string|false
         */
        protected static function change_encoding_uconverter($data, $input, $output)
        {
        }
        /**
         * @param string $charset
         * @return string
         */
        public static function encoding($charset)
        {
        }
        public static function get_curl_version()
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public static function strip_comments($data)
        {
        }
        public static function parse_date($dt)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public static function entities_decode($data)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public static function uncomment_rfc822($string)
        {
        }
        public static function parse_mime($mime)
        {
        }
        public static function atom_03_construct_type($attribs)
        {
        }
        public static function atom_10_construct_type($attribs)
        {
        }
        public static function atom_10_content_construct_type($attribs)
        {
        }
        public static function is_isegment_nz_nc($string)
        {
        }
        public static function space_separated_tokens($string)
        {
        }
        /**
         * @param int $codepoint
         * @return string
         */
        public static function codepoint_to_utf8($codepoint)
        {
        }
        /**
         * @param string $str
         * @return array
         */
        public static function parse_str($str)
        {
        }
        /**
         * @param string $data
         * @param \SimplePie_Registry $registry
         * @return array
         */
        public static function xml_encoding($data, $registry)
        {
        }
        public static function output_javascript()
        {
        }
        public static function get_build()
        {
        }
        public static function debug(&$sp)
        {
        }
        public static function silence_errors($num, $str)
        {
        }
        /**
         * @param string $url
         * @return string
         */
        public static function url_remove_credentials($url)
        {
        }
    }
    class SimplePie_Net_IPv6
    {
        /**
         * @param string $ip
         * @return string
         */
        public static function uncompress($ip)
        {
        }
        /**
         * @param string $ip
         * @return string
         */
        public static function compress($ip)
        {
        }
        /**
         * @param string $ip
         * @return bool
         */
        public static function check_ipv6($ip)
        {
        }
        /**
         * @param string $ip
         * @return bool
         */
        public static function checkIPv6($ip)
        {
        }
    }
    class SimplePie_Parse_Date
    {
        /**
         * @var string
         */
        var $date;
        /**
         * @var array
         */
        var $day = array(
            // English
            'mon' => 1,
            'monday' => 1,
            'tue' => 2,
            'tuesday' => 2,
            'wed' => 3,
            'wednesday' => 3,
            'thu' => 4,
            'thursday' => 4,
            'fri' => 5,
            'friday' => 5,
            'sat' => 6,
            'saturday' => 6,
            'sun' => 7,
            'sunday' => 7,
            // Dutch
            'maandag' => 1,
            'dinsdag' => 2,
            'woensdag' => 3,
            'donderdag' => 4,
            'vrijdag' => 5,
            'zaterdag' => 6,
            'zondag' => 7,
            // French
            'lundi' => 1,
            'mardi' => 2,
            'mercredi' => 3,
            'jeudi' => 4,
            'vendredi' => 5,
            'samedi' => 6,
            'dimanche' => 7,
            // German
            'montag' => 1,
            'mo' => 1,
            'dienstag' => 2,
            'di' => 2,
            'mittwoch' => 3,
            'mi' => 3,
            'donnerstag' => 4,
            'do' => 4,
            'freitag' => 5,
            'fr' => 5,
            'samstag' => 6,
            'sa' => 6,
            'sonnabend' => 6,
            // AFAIK no short form for sonnabend
            'so' => 7,
            'sonntag' => 7,
            // Italian
            'lunedì' => 1,
            'martedì' => 2,
            'mercoledì' => 3,
            'giovedì' => 4,
            'venerdì' => 5,
            'sabato' => 6,
            'domenica' => 7,
            // Spanish
            'lunes' => 1,
            'martes' => 2,
            'miércoles' => 3,
            'jueves' => 4,
            'viernes' => 5,
            'sábado' => 6,
            'domingo' => 7,
            // Finnish
            'maanantai' => 1,
            'tiistai' => 2,
            'keskiviikko' => 3,
            'torstai' => 4,
            'perjantai' => 5,
            'lauantai' => 6,
            'sunnuntai' => 7,
            // Hungarian
            'hétfő' => 1,
            'kedd' => 2,
            'szerda' => 3,
            'csütörtok' => 4,
            'péntek' => 5,
            'szombat' => 6,
            'vasárnap' => 7,
            // Greek
            'Δευ' => 1,
            'Τρι' => 2,
            'Τετ' => 3,
            'Πεμ' => 4,
            'Παρ' => 5,
            'Σαβ' => 6,
            'Κυρ' => 7,
            // Russian
            'Пн.' => 1,
            'Вт.' => 2,
            'Ср.' => 3,
            'Чт.' => 4,
            'Пт.' => 5,
            'Сб.' => 6,
            'Вс.' => 7,
        );
        /**
         * @var array
         */
        var $month = array(
            // English
            'jan' => 1,
            'january' => 1,
            'feb' => 2,
            'february' => 2,
            'mar' => 3,
            'march' => 3,
            'apr' => 4,
            'april' => 4,
            'may' => 5,
            // No long form of May
            'jun' => 6,
            'june' => 6,
            'jul' => 7,
            'july' => 7,
            'aug' => 8,
            'august' => 8,
            'sep' => 9,
            'september' => 9,
            'oct' => 10,
            'october' => 10,
            'nov' => 11,
            'november' => 11,
            'dec' => 12,
            'december' => 12,
            // Dutch
            'januari' => 1,
            'februari' => 2,
            'maart' => 3,
            'april' => 4,
            'mei' => 5,
            'juni' => 6,
            'juli' => 7,
            'augustus' => 8,
            'september' => 9,
            'oktober' => 10,
            'november' => 11,
            'december' => 12,
            // French
            'janvier' => 1,
            'février' => 2,
            'mars' => 3,
            'avril' => 4,
            'mai' => 5,
            'juin' => 6,
            'juillet' => 7,
            'août' => 8,
            'septembre' => 9,
            'octobre' => 10,
            'novembre' => 11,
            'décembre' => 12,
            // German
            'januar' => 1,
            'jan' => 1,
            'februar' => 2,
            'feb' => 2,
            'märz' => 3,
            'mär' => 3,
            'april' => 4,
            'apr' => 4,
            'mai' => 5,
            // no short form for may
            'juni' => 6,
            'jun' => 6,
            'juli' => 7,
            'jul' => 7,
            'august' => 8,
            'aug' => 8,
            'september' => 9,
            'sep' => 9,
            'oktober' => 10,
            'okt' => 10,
            'november' => 11,
            'nov' => 11,
            'dezember' => 12,
            'dez' => 12,
            // Italian
            'gennaio' => 1,
            'febbraio' => 2,
            'marzo' => 3,
            'aprile' => 4,
            'maggio' => 5,
            'giugno' => 6,
            'luglio' => 7,
            'agosto' => 8,
            'settembre' => 9,
            'ottobre' => 10,
            'novembre' => 11,
            'dicembre' => 12,
            // Spanish
            'enero' => 1,
            'febrero' => 2,
            'marzo' => 3,
            'abril' => 4,
            'mayo' => 5,
            'junio' => 6,
            'julio' => 7,
            'agosto' => 8,
            'septiembre' => 9,
            'setiembre' => 9,
            'octubre' => 10,
            'noviembre' => 11,
            'diciembre' => 12,
            // Finnish
            'tammikuu' => 1,
            'helmikuu' => 2,
            'maaliskuu' => 3,
            'huhtikuu' => 4,
            'toukokuu' => 5,
            'kesäkuu' => 6,
            'heinäkuu' => 7,
            'elokuu' => 8,
            'suuskuu' => 9,
            'lokakuu' => 10,
            'marras' => 11,
            'joulukuu' => 12,
            // Hungarian
            'január' => 1,
            'február' => 2,
            'március' => 3,
            'április' => 4,
            'május' => 5,
            'június' => 6,
            'július' => 7,
            'augusztus' => 8,
            'szeptember' => 9,
            'október' => 10,
            'november' => 11,
            'december' => 12,
            // Greek
            'Ιαν' => 1,
            'Φεβ' => 2,
            'Μάώ' => 3,
            'Μαώ' => 3,
            'Απρ' => 4,
            'Μάι' => 5,
            'Μαϊ' => 5,
            'Μαι' => 5,
            'Ιούν' => 6,
            'Ιον' => 6,
            'Ιούλ' => 7,
            'Ιολ' => 7,
            'Αύγ' => 8,
            'Αυγ' => 8,
            'Σεπ' => 9,
            'Οκτ' => 10,
            'Νοέ' => 11,
            'Δεκ' => 12,
            // Russian
            'Янв' => 1,
            'января' => 1,
            'Фев' => 2,
            'февраля' => 2,
            'Мар' => 3,
            'марта' => 3,
            'Апр' => 4,
            'апреля' => 4,
            'Май' => 5,
            'мая' => 5,
            'Июн' => 6,
            'июня' => 6,
            'Июл' => 7,
            'июля' => 7,
            'Авг' => 8,
            'августа' => 8,
            'Сен' => 9,
            'сентября' => 9,
            'Окт' => 10,
            'октября' => 10,
            'Ноя' => 11,
            'ноября' => 11,
            'Дек' => 12,
            'декабря' => 12,
        );
        /**
         * @var array
         */
        var $timezone = array('ACDT' => 37800, 'ACIT' => 28800, 'ACST' => 34200, 'ACT' => -18000, 'ACWDT' => 35100, 'ACWST' => 31500, 'AEDT' => 39600, 'AEST' => 36000, 'AFT' => 16200, 'AKDT' => -28800, 'AKST' => -32400, 'AMDT' => 18000, 'AMT' => -14400, 'ANAST' => 46800, 'ANAT' => 43200, 'ART' => -10800, 'AZOST' => -3600, 'AZST' => 18000, 'AZT' => 14400, 'BIOT' => 21600, 'BIT' => -43200, 'BOT' => -14400, 'BRST' => -7200, 'BRT' => -10800, 'BST' => 3600, 'BTT' => 21600, 'CAST' => 18000, 'CAT' => 7200, 'CCT' => 23400, 'CDT' => -18000, 'CEDT' => 7200, 'CEST' => 7200, 'CET' => 3600, 'CGST' => -7200, 'CGT' => -10800, 'CHADT' => 49500, 'CHAST' => 45900, 'CIST' => -28800, 'CKT' => -36000, 'CLDT' => -10800, 'CLST' => -14400, 'COT' => -18000, 'CST' => -21600, 'CVT' => -3600, 'CXT' => 25200, 'DAVT' => 25200, 'DTAT' => 36000, 'EADT' => -18000, 'EAST' => -21600, 'EAT' => 10800, 'ECT' => -18000, 'EDT' => -14400, 'EEST' => 10800, 'EET' => 7200, 'EGT' => -3600, 'EKST' => 21600, 'EST' => -18000, 'FJT' => 43200, 'FKDT' => -10800, 'FKST' => -14400, 'FNT' => -7200, 'GALT' => -21600, 'GEDT' => 14400, 'GEST' => 10800, 'GFT' => -10800, 'GILT' => 43200, 'GIT' => -32400, 'GST' => 14400, 'GST' => -7200, 'GYT' => -14400, 'HAA' => -10800, 'HAC' => -18000, 'HADT' => -32400, 'HAE' => -14400, 'HAP' => -25200, 'HAR' => -21600, 'HAST' => -36000, 'HAT' => -9000, 'HAY' => -28800, 'HKST' => 28800, 'HMT' => 18000, 'HNA' => -14400, 'HNC' => -21600, 'HNE' => -18000, 'HNP' => -28800, 'HNR' => -25200, 'HNT' => -12600, 'HNY' => -32400, 'IRDT' => 16200, 'IRKST' => 32400, 'IRKT' => 28800, 'IRST' => 12600, 'JFDT' => -10800, 'JFST' => -14400, 'JST' => 32400, 'KGST' => 21600, 'KGT' => 18000, 'KOST' => 39600, 'KOVST' => 28800, 'KOVT' => 25200, 'KRAST' => 28800, 'KRAT' => 25200, 'KST' => 32400, 'LHDT' => 39600, 'LHST' => 37800, 'LINT' => 50400, 'LKT' => 21600, 'MAGST' => 43200, 'MAGT' => 39600, 'MAWT' => 21600, 'MDT' => -21600, 'MESZ' => 7200, 'MEZ' => 3600, 'MHT' => 43200, 'MIT' => -34200, 'MNST' => 32400, 'MSDT' => 14400, 'MSST' => 10800, 'MST' => -25200, 'MUT' => 14400, 'MVT' => 18000, 'MYT' => 28800, 'NCT' => 39600, 'NDT' => -9000, 'NFT' => 41400, 'NMIT' => 36000, 'NOVST' => 25200, 'NOVT' => 21600, 'NPT' => 20700, 'NRT' => 43200, 'NST' => -12600, 'NUT' => -39600, 'NZDT' => 46800, 'NZST' => 43200, 'OMSST' => 25200, 'OMST' => 21600, 'PDT' => -25200, 'PET' => -18000, 'PETST' => 46800, 'PETT' => 43200, 'PGT' => 36000, 'PHOT' => 46800, 'PHT' => 28800, 'PKT' => 18000, 'PMDT' => -7200, 'PMST' => -10800, 'PONT' => 39600, 'PST' => -28800, 'PWT' => 32400, 'PYST' => -10800, 'PYT' => -14400, 'RET' => 14400, 'ROTT' => -10800, 'SAMST' => 18000, 'SAMT' => 14400, 'SAST' => 7200, 'SBT' => 39600, 'SCDT' => 46800, 'SCST' => 43200, 'SCT' => 14400, 'SEST' => 3600, 'SGT' => 28800, 'SIT' => 28800, 'SRT' => -10800, 'SST' => -39600, 'SYST' => 10800, 'SYT' => 7200, 'TFT' => 18000, 'THAT' => -36000, 'TJT' => 18000, 'TKT' => -36000, 'TMT' => 18000, 'TOT' => 46800, 'TPT' => 32400, 'TRUT' => 36000, 'TVT' => 43200, 'TWT' => 28800, 'UYST' => -7200, 'UYT' => -10800, 'UZT' => 18000, 'VET' => -14400, 'VLAST' => 39600, 'VLAT' => 36000, 'VOST' => 21600, 'VUT' => 39600, 'WAST' => 7200, 'WAT' => 3600, 'WDT' => 32400, 'WEST' => 3600, 'WFT' => 43200, 'WIB' => 25200, 'WIT' => 32400, 'WITA' => 28800, 'WKST' => 18000, 'WST' => 28800, 'YAKST' => 36000, 'YAKT' => 32400, 'YAPT' => 36000, 'YEKST' => 21600, 'YEKT' => 18000);
        /**
         * @var string
         */
        var $day_pcre;
        /**
         * @var string
         */
        var $month_pcre;
        /**
         * @var array
         */
        var $built_in = array();
        /**
         * @var array
         */
        var $user = array();
        public function __construct()
        {
        }
        public static function get()
        {
        }
        /**
         * @param string $date
         * @return int
         */
        public function parse($date)
        {
        }
        /**
         * @param callable $callback
         */
        public function add_callback($callback)
        {
        }
        /**
         * @return int
         */
        public function date_w3cdtf($date)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public function remove_rfc2822_comments($string)
        {
        }
        /**
         * @return int
         */
        public function date_rfc2822($date)
        {
        }
        /**
         * @return int
         */
        public function date_rfc850($date)
        {
        }
        /**
         * @return int
         */
        public function date_asctime($date)
        {
        }
        /**
         * @return int
         */
        public function date_strtotime($date)
        {
        }
    }
    class SimplePie_Parser
    {
        var $error_code;
        var $error_string;
        var $current_line;
        var $current_column;
        var $current_byte;
        var $separator = ' ';
        var $namespace = array('');
        var $element = array('');
        var $xml_base = array('');
        var $xml_base_explicit = array(\false);
        var $xml_lang = array('');
        var $data = array();
        var $datas = array(array());
        var $current_xhtml_construct = -1;
        var $encoding;
        protected $registry;
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function parse(&$data, $encoding, $url = '')
        {
        }
        public function get_error_code()
        {
        }
        public function get_error_string()
        {
        }
        public function get_current_line()
        {
        }
        public function get_current_column()
        {
        }
        public function get_current_byte()
        {
        }
        public function get_data()
        {
        }
        public function tag_open($parser, $tag, $attributes)
        {
        }
        public function cdata($parser, $cdata)
        {
        }
        public function tag_close($parser, $tag)
        {
        }
        public function split_ns($string)
        {
        }
    }
    class SimplePie_Rating
    {
        /**
         * @var string
         */
        var $scheme;
        /**
         * @var string
         */
        var $value;
        public function __construct($scheme = \null, $value = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * @return string|null
         */
        public function get_value()
        {
        }
    }
    class SimplePie_Registry
    {
        /**
         * @var array
         */
        protected $default = array('Cache' => 'SimplePie_Cache', 'Locator' => 'SimplePie_Locator', 'Parser' => 'SimplePie_Parser', 'File' => 'SimplePie_File', 'Sanitize' => 'SimplePie_Sanitize', 'Item' => 'SimplePie_Item', 'Author' => 'SimplePie_Author', 'Category' => 'SimplePie_Category', 'Enclosure' => 'SimplePie_Enclosure', 'Caption' => 'SimplePie_Caption', 'Copyright' => 'SimplePie_Copyright', 'Credit' => 'SimplePie_Credit', 'Rating' => 'SimplePie_Rating', 'Restriction' => 'SimplePie_Restriction', 'Content_Type_Sniffer' => 'SimplePie_Content_Type_Sniffer', 'Source' => 'SimplePie_Source', 'Misc' => 'SimplePie_Misc', 'XML_Declaration_Parser' => 'SimplePie_XML_Declaration_Parser', 'Parse_Date' => 'SimplePie_Parse_Date');
        /**
         * @var array
         */
        protected $classes = array();
        /**
         * @var array
         */
        protected $legacy = array();
        public function __construct()
        {
        }
        /**
         * @param string $type
         * @param string $class
         * @param bool $legacy
         * @return bool
         */
        public function register($type, $class, $legacy = \false)
        {
        }
        /**
         * @param string $type
         * @return string|null
         */
        public function get_class($type)
        {
        }
        /**
         * @param string $type
         * @param array $parameters
         * @return object
         */
        public function &create($type, $parameters = array())
        {
        }
        /**
         * @param string $type
         * @param string $method
         * @param array $parameters
         * @return mixed
         */
        public function &call($type, $method, $parameters = array())
        {
        }
    }
    class SimplePie_Restriction
    {
        /**
         * @var string
         */
        var $relationship;
        /**
         * @var string
         */
        var $type;
        /**
         * @var string
         */
        var $value;
        public function __construct($relationship = \null, $type = \null, $value = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string|null
         */
        public function get_relationship()
        {
        }
        /**
         * @return string|null
         */
        public function get_type()
        {
        }
        /**
         * @return string|null
         */
        public function get_value()
        {
        }
    }
    class SimplePie_Sanitize
    {
        // Private vars
        var $base;
        // Options
        var $remove_div = \true;
        var $image_handler = '';
        var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');
        var $encode_instead_of_strip = \false;
        var $strip_attributes = array('bgsound', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');
        var $add_attributes = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none'));
        var $strip_comments = \false;
        var $output_encoding = 'UTF-8';
        var $enable_cache = \true;
        var $cache_location = './cache';
        var $cache_name_function = 'md5';
        var $timeout = 10;
        var $useragent = '';
        var $force_fsockopen = \false;
        var $replace_url_attributes = \null;
        var $registry;
        var $https_domains = array();
        public function __construct()
        {
        }
        public function remove_div($enable = \true)
        {
        }
        public function set_image_handler($page = \false)
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function pass_cache_data($enable_cache = \true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')
        {
        }
        public function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = \false)
        {
        }
        public function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))
        {
        }
        public function encode_instead_of_strip($encode = \false)
        {
        }
        public function strip_attributes($attribs = array('bgsound', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))
        {
        }
        public function add_attributes($attribs = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none')))
        {
        }
        public function strip_comments($strip = \false)
        {
        }
        public function set_output_encoding($encoding = 'UTF-8')
        {
        }
        /**
         * @param array|null $element_attribute
         */
        public function set_url_replacements($element_attribute = \null)
        {
        }
        public function set_https_domains($domains)
        {
        }
        protected function is_https_domain($domain)
        {
        }
        public function https_url($url)
        {
        }
        public function sanitize($data, $type, $base = '')
        {
        }
        protected function preprocess($html, $type)
        {
        }
        public function replace_urls($document, $tag, $attributes)
        {
        }
        public function do_strip_htmltags($match)
        {
        }
        protected function strip_tag($tag, $document, $xpath, $type)
        {
        }
        protected function strip_attr($attrib, $xpath)
        {
        }
        protected function add_attr($tag, $valuePairs, $document)
        {
        }
    }
    class SimplePie_Source
    {
        var $item;
        var $data = array();
        protected $registry;
        public function __construct($item, $data)
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function __toString()
        {
        }
        public function get_source_tags($namespace, $tag)
        {
        }
        public function get_base($element = array())
        {
        }
        public function sanitize($data, $type, $base = '')
        {
        }
        public function get_item()
        {
        }
        public function get_title()
        {
        }
        public function get_category($key = 0)
        {
        }
        public function get_categories()
        {
        }
        public function get_author($key = 0)
        {
        }
        public function get_authors()
        {
        }
        public function get_contributor($key = 0)
        {
        }
        public function get_contributors()
        {
        }
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        public function get_permalink()
        {
        }
        public function get_links($rel = 'alternate')
        {
        }
        public function get_description()
        {
        }
        public function get_copyright()
        {
        }
        public function get_language()
        {
        }
        public function get_latitude()
        {
        }
        public function get_longitude()
        {
        }
        public function get_image_url()
        {
        }
    }
    class SimplePie_XML_Declaration_Parser
    {
        /**
         * @var string
         */
        var $version = '1.0';
        /**
         * @var string
         */
        var $encoding = 'UTF-8';
        /**
         * @var bool
         */
        var $standalone = \false;
        /**
         * @var string
         */
        var $state = 'before_version_name';
        /**
         * @var string
         */
        var $data = '';
        /**
         * @var int
         */
        var $data_length = 0;
        /**
         * @var int
         */
        var $position = 0;
        /**
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * @return bool
         */
        public function parse()
        {
        }
        /**
         * @return bool
         */
        public function has_data()
        {
        }
        /**
         * @return int
         */
        public function skip_whitespace()
        {
        }
        public function get_value()
        {
        }
        public function before_version_name()
        {
        }
        public function version_name()
        {
        }
        public function version_equals()
        {
        }
        public function version_value()
        {
        }
        public function encoding_name()
        {
        }
        public function encoding_equals()
        {
        }
        public function encoding_value()
        {
        }
        public function standalone_name()
        {
        }
        public function standalone_equals()
        {
        }
        public function standalone_value()
        {
        }
    }
    class SimplePie_gzdecode
    {
        /**
         * @var string
         */
        var $compressed_data;
        /**
         * @var int
         */
        var $compressed_size;
        /**
         * @var int
         */
        var $min_compressed_size = 18;
        /**
         * @var int
         */
        var $position = 0;
        /**
         * @var int
         */
        var $flags;
        /**
         * @var string
         */
        var $data;
        /**
         * @var int
         */
        var $MTIME;
        /**
         * @var int
         */
        var $XFL;
        /**
         * @var int
         */
        var $OS;
        /**
         * @var string
         */
        var $SI1;
        /**
         * @var string
         */
        var $SI2;
        /**
         * @var string
         */
        var $extra_field;
        /**
         * @var string
         */
        var $filename;
        /**
         * @var string
         */
        var $comment;
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * @return bool
         */
        public function parse()
        {
        }
    }
    class Text_Diff
    {
        /**
         * @var array
         */
        var $_edits;
        /**
         * @param string $engine
         * @param array $params
         */
        function __construct($engine, $params)
        {
        }
        public function Text_Diff($engine, $params)
        {
        }
        function getDiff()
        {
        }
        /**
         * @return int
         */
        function countAddedLines()
        {
        }
        /**
         * @return int
         */
        function countDeletedLines()
        {
        }
        /**
         * @return \Text_Diff
         */
        function reverse()
        {
        }
        /**
         * @return bool
         */
        function isEmpty()
        {
        }
        /**
         * @return int
         */
        function lcs()
        {
        }
        /**
         * @return array
         */
        function getOriginal()
        {
        }
        /**
         * @return array
         */
        function getFinal()
        {
        }
        /**
         * @param string $line
         * @param int $key
         */
        static function trimNewlines(&$line, $key)
        {
        }
        /**
         * @return string
         */
        static function _getTempDir()
        {
        }
        function _check($from_lines, $to_lines)
        {
        }
    }
    class Text_MappedDiff extends \Text_Diff
    {
        /**
         * @param array $from_lines
         * @param array $to_lines
         * @param array $mapped_from_lines
         * @param array $mapped_to_lines
         */
        function __construct($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines)
        {
        }
        public function Text_MappedDiff($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines)
        {
        }
    }
    class Text_Diff_Op
    {
        var $orig;
        var $final;
        function &reverse()
        {
        }
        function norig()
        {
        }
        function nfinal()
        {
        }
    }
    class Text_Diff_Op_copy extends \Text_Diff_Op
    {
        function __construct($orig, $final = \false)
        {
        }
        public function Text_Diff_Op_copy($orig, $final = \false)
        {
        }
        function &reverse()
        {
        }
    }
    class Text_Diff_Op_delete extends \Text_Diff_Op
    {
        function __construct($lines)
        {
        }
        public function Text_Diff_Op_delete($lines)
        {
        }
        function &reverse()
        {
        }
    }
    class Text_Diff_Op_add extends \Text_Diff_Op
    {
        function __construct($lines)
        {
        }
        public function Text_Diff_Op_add($lines)
        {
        }
        function &reverse()
        {
        }
    }
    class Text_Diff_Op_change extends \Text_Diff_Op
    {
        function __construct($orig, $final)
        {
        }
        public function Text_Diff_Op_change($orig, $final)
        {
        }
        function &reverse()
        {
        }
    }
    class Text_Diff_Engine_native
    {
        public $xchanged;
        public $ychanged;
        public $xv;
        public $yv;
        public $xind;
        public $yind;
        public $seq;
        public $in_seq;
        public $lcs;
        function diff($from_lines, $to_lines)
        {
        }
        function _diag($xoff, $xlim, $yoff, $ylim, $nchunks)
        {
        }
        function _lcsPos($ypos)
        {
        }
        function _compareseq($xoff, $xlim, $yoff, $ylim)
        {
        }
        function _shiftBoundaries($lines, &$changed, $other_changed)
        {
        }
    }
    class Text_Diff_Engine_shell
    {
        /**
         * @var string
         */
        var $_diffCommand = 'diff';
        /**
         * @param array $from_lines
         * @param array $to_lines
         * @return array
         */
        function diff($from_lines, $to_lines)
        {
        }
        /**
         * @param array $text_lines
         * @param int $line_no
         * @param int $end
         * @return array
         */
        function _getLines(&$text_lines, &$line_no, $end = \false)
        {
        }
    }
    class Text_Diff_Engine_string
    {
        /**
         * @param string $diff
         * @phpstan-param 'context'|'unified'|'autodetect' $mode
         * @return array
         */
        function diff($diff, $mode = 'autodetect')
        {
        }
        /**
         * @param array $diff
         * @return array
         */
        function parseUnifiedDiff($diff)
        {
        }
        /**
         * @param array $diff
         * @return array
         */
        function parseContextDiff(&$diff)
        {
        }
    }
    class Text_Diff_Engine_xdiff
    {
        function diff($from_lines, $to_lines)
        {
        }
    }
    class Text_Diff_Renderer
    {
        var $_leading_context_lines = 0;
        var $_trailing_context_lines = 0;
        function __construct($params = array())
        {
        }
        public function Text_Diff_Renderer($params = array())
        {
        }
        /**
         * @return array
         */
        function getParams()
        {
        }
        /**
         * @param \Text_Diff $diff
         * @return string
         */
        function render($diff)
        {
        }
        function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)
        {
        }
        function _startDiff()
        {
        }
        function _endDiff()
        {
        }
        function _blockHeader($xbeg, $xlen, $ybeg, $ylen)
        {
        }
        function _startBlock($header)
        {
        }
        function _endBlock()
        {
        }
        function _lines($lines, $prefix = ' ')
        {
        }
        function _context($lines)
        {
        }
        function _added($lines)
        {
        }
        function _deleted($lines)
        {
        }
        function _changed($orig, $final)
        {
        }
    }
    class Text_Diff_Renderer_inline extends \Text_Diff_Renderer
    {
        /**
         * @var int
         */
        var $_leading_context_lines = 10000;
        /**
         * @var int
         */
        var $_trailing_context_lines = 10000;
        /**
         * @var string
         */
        var $_ins_prefix = '<ins>';
        /**
         * @var string
         */
        var $_ins_suffix = '</ins>';
        /**
         * @var string
         */
        var $_del_prefix = '<del>';
        /**
         * @var string
         */
        var $_del_suffix = '</del>';
        /**
         * @var string
         */
        var $_block_header = '';
        /**
         * @var bool
         */
        var $_split_characters = \false;
        /**
         * @var string
         */
        var $_split_level = 'lines';
        function _blockHeader($xbeg, $xlen, $ybeg, $ylen)
        {
        }
        function _startBlock($header)
        {
        }
        function _lines($lines, $prefix = ' ', $encode = \true)
        {
        }
        function _added($lines)
        {
        }
        function _deleted($lines, $words = \false)
        {
        }
        function _changed($orig, $final)
        {
        }
        function _splitOnWords($string, $newlineEscape = "\n")
        {
        }
        function _encode(&$string)
        {
        }
    }
    class AtomFeed
    {
        /**
         * @var array
         */
        var $links = array();
        /**
         * @var array
         */
        var $categories = array();
        /**
         * @var array
         */
        var $entries = array();
    }
    class AtomEntry
    {
        /**
         * @var array
         */
        var $links = array();
        /**
         * @var array
         */
        var $categories = array();
    }
    class AtomParser
    {
        var $NS = 'http://www.w3.org/2005/Atom';
        var $ATOM_CONTENT_ELEMENTS = array('content', 'summary', 'title', 'subtitle', 'rights');
        var $ATOM_SIMPLE_ELEMENTS = array('id', 'updated', 'published', 'draft');
        var $debug = \false;
        var $depth = 0;
        var $indent = 2;
        var $in_content;
        var $ns_contexts = array();
        var $ns_decls = array();
        var $content_ns_decls = array();
        var $content_ns_contexts = array();
        var $is_xhtml = \false;
        var $is_html = \false;
        var $is_text = \true;
        var $skipped_div = \false;
        var $FILE = "php://input";
        var $feed;
        var $current;
        function __construct()
        {
        }
        public function AtomParser()
        {
        }
        /**
         * @param string $k
         * @param string $v
         * @return string
         */
        public static function map_attrs($k, $v)
        {
        }
        /**
         * @param \indexish $p
         * @param array $n
         * @return string
         */
        public static function map_xmlns($p, $n)
        {
        }
        function _p($msg)
        {
        }
        function error_handler($log_level, $log_text, $error_file, $error_line)
        {
        }
        function parse()
        {
        }
        function start_element($parser, $name, $attrs)
        {
        }
        function end_element($parser, $name)
        {
        }
        function start_ns($parser, $prefix, $uri)
        {
        }
        function end_ns($parser, $prefix)
        {
        }
        function cdata($parser, $data)
        {
        }
        function _default($parser, $data)
        {
        }
        function ns_to_prefix($qname, $attr = \false)
        {
        }
        function is_declared_content_ns($new_mapping)
        {
        }
        function xml_escape($content)
        {
        }
    }
    class WP_Navigation_Block_Renderer
    {
        /**
         * @param array $attributes
         * @param string $content
         * @param \WP_Block $block
         * @return string
         */
        public static function render($attributes, $content, $block)
        {
        }
    }
}
namespace Avifinfo {
    //------------------------------------------------------------------------------
    // Features are parsed into temporary property associations.
    class Tile
    {
        // Tile item id <-> parent item id associations.
        public $tile_item_id;
        public $parent_item_id;
    }
    class Prop
    {
        // Property index <-> item id associations.
        public $property_index;
        public $item_id;
    }
    class Dim_Prop
    {
        // Property <-> features associations.
        public $property_index;
        public $width;
        public $height;
    }
    class Chan_Prop
    {
        // Property <-> features associations.
        public $property_index;
        public $bit_depth;
        public $num_channels;
    }
    class Features
    {
        public $has_primary_item = false;
        // True if "pitm" was parsed.
        public $has_alpha = false;
        // True if an alpha "auxC" was parsed.
        public $primary_item_id;
        public $primary_item_features = array(
            // Deduced from the data below.
            'width' => UNDEFINED,
            // In number of pixels.
            'height' => UNDEFINED,
            // Ignores mirror and rotation.
            'bit_depth' => UNDEFINED,
            // Likely 8, 10 or 12 bits per channel per pixel.
            'num_channels' => UNDEFINED,
        );
        public $tiles = array();
        // Tile[]
        public $props = array();
        // Prop[]
        public $dim_props = array();
        // Dim_Prop[]
        public $chan_props = array();
        /**
         * @return \Status
         */
        public function get_primary_item_features()
        {
        }
    }
    //------------------------------------------------------------------------------
    class Box
    {
        public $size;
        // In bytes.
        public $type;
        // Four characters.
        public $version;
        // 0 or actual version if this is a full box.
        public $flags;
        // 0 or actual value if this is a full box.
        public $content_size;
        // 'size' minus the header size.
        /**
         * @param \stream $handle
         * @param int $num_parsed_boxes
         * @param int $num_remaining_bytes
         * @return \Status
         */
        public function parse($handle, &$num_parsed_boxes, $num_remaining_bytes = MAX_SIZE)
        {
        }
    }
    //------------------------------------------------------------------------------
    class Parser
    {
        public $features;
        function __construct($handle)
        {
        }
        /**
         * @return bool
         */
        public function parse_ftyp()
        {
        }
        /**
         * @return bool
         */
        public function parse_file()
        {
        }
    }
}
namespace {
    class PasswordHash
    {
        var $itoa64;
        var $iteration_count_log2;
        var $portable_hashes;
        var $random_state;
        function __construct($iteration_count_log2, $portable_hashes)
        {
        }
        function PasswordHash($iteration_count_log2, $portable_hashes)
        {
        }
        function get_random_bytes($count)
        {
        }
        function encode64($input, $count)
        {
        }
        function gensalt_private($input)
        {
        }
        function crypt_private($password, $setting)
        {
        }
        function gensalt_blowfish($input)
        {
        }
        function HashPassword($password)
        {
        }
        function CheckPassword($password, $stored_hash)
        {
        }
    }
    class POP3
    {
        var $ERROR = '';
        //  Error string.
        var $TIMEOUT = 60;
        //  Default timeout before giving up on a
        //  network operation.
        var $COUNT = -1;
        //  Mailbox msg count
        var $BUFFER = 512;
        //  Socket buffer for socket fgets() calls.
        //  Per RFC 1939 the returned line a POP3
        //  server can send is 512 bytes.
        var $FP = '';
        //  The connection to the server's
        //  file descriptor
        var $MAILSERVER = '';
        // Set this to hard code the server name
        var $DEBUG = \FALSE;
        // set to true to echo pop3
        // commands and responses to error_log
        // this WILL log passwords!
        var $BANNER = '';
        //  Holds the banner returned by the
        //  pop server - used for apop()
        var $ALLOWAPOP = \FALSE;
        function __construct($server = '', $timeout = '')
        {
        }
        public function POP3($server = '', $timeout = '')
        {
        }
        function update_timer()
        {
        }
        function connect($server, $port = 110)
        {
        }
        function user($user = "")
        {
        }
        function pass($pass = "")
        {
        }
        function apop($login, $pass)
        {
        }
        function login($login = "", $pass = "")
        {
        }
        function top($msgNum, $numLines = "0")
        {
        }
        function pop_list($msgNum = "")
        {
        }
        function get($msgNum)
        {
        }
        function last($type = "count")
        {
        }
        function reset()
        {
        }
        function send_cmd($cmd = "")
        {
        }
        function quit()
        {
        }
        function popstat()
        {
        }
        function uidl($msgNum = "")
        {
        }
        function delete($msgNum = "")
        {
        }
        //  *********************************************************
        //  The following methods are internal to the class.
        function is_ok($cmd = "")
        {
        }
        function strip_clf($text = "")
        {
        }
        function parse_banner($server_text)
        {
        }
    }
    class Requests extends \WpOrg\Requests\Requests
    {
        /**
         * @param string $class
         */
        public static function autoloader($class)
        {
        }
        public static function register_autoloader()
        {
        }
    }
    class Walker_CategoryDropdown extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = 'category';
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        /**
         * @param string $output
         * @param \WP_Term $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         * @phpstan-param array{
         *   show_option_all?: string,
         *   show_option_none?: string,
         *   option_none_value?: string,
         *   orderby?: string,
         *   pad_counts?: bool,
         *   show_count?: bool|int,
         *   echo?: bool|int,
         *   hierarchical?: bool|int,
         *   depth?: int,
         *   tab_index?: int,
         *   name?: string,
         *   id?: string,
         *   class?: string,
         *   selected?: int|string,
         *   value_field?: string,
         *   taxonomy?: string|array,
         *   hide_if_empty?: bool,
         *   required?: bool,
         *   walker?: Walker,
         *   aria_describedby?: string,
         * } $args See wp_dropdown_categories()
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
    }
    class Walker_Category extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = 'category';
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         * @phpstan-return void
         * @phpstan-param array{
         *   current_category?: int|int[],
         *   depth?: int,
         *   echo?: bool|int,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   feed?: string,
         *   feed_image?: string,
         *   feed_type?: string,
         *   hide_title_if_empty?: bool,
         *   separator?: string,
         *   show_count?: bool|int,
         *   show_option_all?: string,
         *   show_option_none?: string,
         *   style?: string,
         *   taxonomy?: string,
         *   title_li?: string,
         *   use_desc_for_title?: bool|int,
         *   walker?: Walker,
         * } $args See wp_list_categories()
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         * @phpstan-return void
         * @phpstan-param array{
         *   current_category?: int|int[],
         *   depth?: int,
         *   echo?: bool|int,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   feed?: string,
         *   feed_image?: string,
         *   feed_type?: string,
         *   hide_title_if_empty?: bool,
         *   separator?: string,
         *   show_count?: bool|int,
         *   show_option_all?: string,
         *   show_option_none?: string,
         *   style?: string,
         *   taxonomy?: string,
         *   title_li?: string,
         *   use_desc_for_title?: bool|int,
         *   walker?: Walker,
         * } $args See wp_list_categories()
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param \WP_Term $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         * @phpstan-return void
         * @phpstan-param array{
         *   current_category?: int|int[],
         *   depth?: int,
         *   echo?: bool|int,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   feed?: string,
         *   feed_image?: string,
         *   feed_type?: string,
         *   hide_title_if_empty?: bool,
         *   separator?: string,
         *   show_count?: bool|int,
         *   show_option_all?: string,
         *   show_option_none?: string,
         *   style?: string,
         *   taxonomy?: string,
         *   title_li?: string,
         *   use_desc_for_title?: bool|int,
         *   walker?: Walker,
         * } $args See wp_list_categories()
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param object $data_object
         * @param int $depth
         * @param array $args
         * @phpstan-return void
         * @phpstan-param array{
         *   current_category?: int|int[],
         *   depth?: int,
         *   echo?: bool|int,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   feed?: string,
         *   feed_image?: string,
         *   feed_type?: string,
         *   hide_title_if_empty?: bool,
         *   separator?: string,
         *   show_count?: bool|int,
         *   show_option_all?: string,
         *   show_option_none?: string,
         *   style?: string,
         *   taxonomy?: string,
         *   title_li?: string,
         *   use_desc_for_title?: bool|int,
         *   walker?: Walker,
         * } $args See wp_list_categories()
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    class Walker_Comment extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = 'comment';
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'comment_parent', 'id' => 'comment_ID');
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param \WP_Comment $element
         * @param array $children_elements
         * @param int $max_depth
         * @param int $depth
         * @param array $args
         * @param string $output
         * @phpstan-return void
         */
        public function display_element($element, &$children_elements, $max_depth, $depth, $args, &$output)
        {
        }
        /**
         * @param string $output
         * @param \WP_Comment $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         * @phpstan-return void
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param \WP_Comment $data_object
         * @param int $depth
         * @param array $args
         * @phpstan-return void
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
        /**
         * @param \WP_Comment $comment
         * @param int $depth
         * @param array $args
         */
        protected function ping($comment, $depth, $args)
        {
        }
        /**
         * @param string $comment_text
         * @param \WP_Comment|null $comment
         * @return string
         */
        public function filter_comment_text($comment_text, $comment)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @param int $depth
         * @param array $args
         */
        protected function comment($comment, $depth, $args)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @param int $depth
         * @param array $args
         */
        protected function html5_comment($comment, $depth, $args)
        {
        }
    }
    class Walker_PageDropdown extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = 'page';
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'post_parent', 'id' => 'ID');
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         * @phpstan-param array{
         *   depth?: int,
         *   child_of?: int,
         *   selected?: int|string,
         *   echo?: bool|int,
         *   name?: string,
         *   id?: string,
         *   class?: string,
         *   show_option_none?: string,
         *   show_option_no_change?: string,
         *   option_none_value?: string,
         *   value_field?: string,
         * } $args See wp_dropdown_pages()
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
    }
    class Walker_Page extends \Walker
    {
        /**
         * @var string
         */
        public $tree_type = 'page';
        /**
         * @var string[]
         */
        public $db_fields = array('parent' => 'post_parent', 'id' => 'ID');
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param int $depth
         * @param array $args
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param array $args
         * @param int $current_object_id
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * @param string $output
         * @param \WP_Post $data_object
         * @param int $depth
         * @param array $args
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Admin_Bar
    {
        public $user;
        /**
         * @var array
         */
        public $menu = array();
        public function initialize()
        {
        }
        /**
         * @param array $node
         */
        public function add_menu($node)
        {
        }
        /**
         * @param string $id
         */
        public function remove_menu($id)
        {
        }
        /**
         * @phpstan-param array{
         *   id?: string,
         *   title?: string,
         *   parent?: string,
         *   href?: string,
         *   group?: bool,
         *   meta?: array,
         * } $args
         * @phpstan-return void
         */
        public function add_node($args)
        {
        }
        /**
         * @param array $args
         */
        protected final function _set_node($args)
        {
        }
        /**
         * @param string $id
         * @return object|void
         */
        public final function get_node($id)
        {
        }
        /**
         * @param string $id
         * @return object|void
         */
        protected final function _get_node($id)
        {
        }
        /**
         * @return array|void
         */
        public final function get_nodes()
        {
        }
        /**
         * @return array|void
         */
        protected final function _get_nodes()
        {
        }
        /**
         * @phpstan-param array{
         *   id?: string,
         *   parent?: string,
         *   meta?: array,
         * } $args
         */
        public final function add_group($args)
        {
        }
        /**
         * @param string $id
         */
        public function remove_node($id)
        {
        }
        /**
         * @param string $id
         */
        protected final function _unset_node($id)
        {
        }
        public function render()
        {
        }
        /**
         * @return object|void
         */
        protected final function _bind()
        {
        }
        /**
         * @param object $root
         */
        protected final function _render($root)
        {
        }
        /**
         * @param object $node
         * @phpstan-return void
         */
        protected final function _render_container($node)
        {
        }
        /**
         * @param object $node
         * @param string|bool $menu_title
         * @phpstan-return void
         */
        protected final function _render_group($node, $menu_title = \false)
        {
        }
        /**
         * @param object $node
         * @phpstan-return void
         */
        protected final function _render_item($node)
        {
        }
        /**
         * @param string $id
         * @param object $node
         */
        public function recursive_render($id, $node)
        {
        }
        public function add_menus()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Ajax_Response
    {
        /**
         * @var array
         */
        public $responses = array();
        /**
         * @param string|array $args
         */
        public function __construct($args = '')
        {
        }
        /**
         * @phpstan-param array{
         *   what?: string,
         *   action?: string|false,
         *   id?: int|WP_Error,
         *   old_id?: int|false,
         *   position?: string,
         *   data?: string|WP_Error,
         *   supplemental?: array,
         * } $args
         * @return string
         */
        public function add($args = '')
        {
        }
        public function send()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Application_Passwords
    {
        /**
         * The application passwords user meta key.
         *
         * @since 5.6.0
         *
         * @var string
         */
        const USERMETA_KEY_APPLICATION_PASSWORDS = '_application_passwords';
        /**
         * The option name used to store whether application passwords are in use.
         *
         * @since 5.6.0
         *
         * @var string
         */
        const OPTION_KEY_IN_USE = 'using_application_passwords';
        /**
         * The generated application password length.
         *
         * @since 5.6.0
         *
         * @var int
         */
        const PW_LENGTH = 24;
        /**
         * @return bool
         */
        public static function is_in_use()
        {
        }
        /**
         * @param int $user_id
         * @phpstan-param array{
         *   name?: string,
         *   app_id?: string,
         * } $args
         * @phpstan-return \WP_Error|array{
         *   0: string,
         *   1: array{
         *     uuid: string,
         *     app_id: string,
         *     name: string,
         *     password: string,
         *     created: int,
         *     last_used: null,
         *     last_ip: null,
         *   },
         * }
         */
        public static function create_new_application_password($user_id, $args = array())
        {
        }
        /**
         * @param int $user_id
         * @phpstan-return array<int|string, array{
         *   uuid: string,
         *   app_id: string,
         *   name: string,
         *   password: string,
         *   created: int,
         *   last_used: int|null,
         *   last_ip: string|null,
         * }>
         */
        public static function get_user_application_passwords($user_id)
        {
        }
        /**
         * @param int $user_id
         * @param string $uuid
         * @return array|null
         */
        public static function get_user_application_password($user_id, $uuid)
        {
        }
        /**
         * @param int $user_id
         * @param string $name
         * @return bool
         */
        public static function application_name_exists_for_user($user_id, $name)
        {
        }
        /**
         * @param int $user_id
         * @param string $uuid
         * @param array $update
         * @return true|\WP_Error
         */
        public static function update_application_password($user_id, $uuid, $update = array())
        {
        }
        /**
         * @param int $user_id
         * @param string $uuid
         * @return true|\WP_Error
         */
        public static function record_application_password_usage($user_id, $uuid)
        {
        }
        /**
         * @param int $user_id
         * @param string $uuid
         * @return true|\WP_Error
         */
        public static function delete_application_password($user_id, $uuid)
        {
        }
        /**
         * @param int $user_id
         * @return int|\WP_Error
         */
        public static function delete_all_application_passwords($user_id)
        {
        }
        /**
         * @param int $user_id
         * @param array $passwords
         * @return bool
         */
        protected static function set_user_application_passwords($user_id, $passwords)
        {
        }
        /**
         * @param string $raw_password
         * @return string
         */
        public static function chunk_password($raw_password)
        {
        }
    }
    final class WP_Block_Bindings_Registry
    {
        /**
         * @param string $source_name
         * @phpstan-param array{
         *   label?: string,
         *   get_value_callback?: callable,
         *   uses_context?: string[],
         * } $source_properties
         * @return \WP_Block_Bindings_Source|false
         */
        public function register(string $source_name, array $source_properties)
        {
        }
        /**
         * @param string $source_name
         * @return \WP_Block_Bindings_Source|false
         */
        public function unregister(string $source_name)
        {
        }
        /**
         * @return \WP_Block_Bindings_Source[]
         */
        public function get_all_registered()
        {
        }
        /**
         * @param string $source_name
         * @return \WP_Block_Bindings_Source|null
         */
        public function get_registered(string $source_name)
        {
        }
        /**
         * @param string $source_name
         * @return bool
         */
        public function is_registered($source_name)
        {
        }
        /**
         * @phpstan-return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return \WP_Block_Bindings_Registry
         */
        public static function get_instance()
        {
        }
    }
    final class WP_Block_Bindings_Source
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $label;
        /**
         * @var string[]|null
         */
        public $uses_context = \null;
        /**
         * @param string $name
         * @param array $source_properties
         */
        public function __construct(string $name, array $source_properties)
        {
        }
        /**
         * @param array $source_args
         * @param \WP_Block $block_instance
         * @param string $attribute_name
         * @return mixed
         */
        public function get_value(array $source_args, $block_instance, string $attribute_name)
        {
        }
        public function __wakeup()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Block_Editor_Context
    {
        /**
         * @var string
         */
        public $name = 'core/edit-post';
        /**
         * @var \WP_Post|null
         */
        public $post = \null;
        /**
         * @param array $settings
         */
        public function __construct(array $settings = array())
        {
        }
    }
    /**
     * Blocks API: WP_Block_List class
     *
     * @package WordPress
     * @since 5.5.0
     */
    /**
     * @phpstan-implements ArrayAccess<int, WP_Block>
     */
    #[\AllowDynamicProperties]
    class WP_Block_List implements \Iterator, \ArrayAccess, \Countable
    {
        /**
         * @var array[]|\WP_Block[]
         */
        protected $blocks;
        /**
         * @var array
         */
        protected $available_context;
        /**
         * @var \WP_Block_Type_Registry
         */
        protected $registry;
        /**
         * @param array[]|\WP_Block[] $blocks
         * @param array $available_context
         * @param \WP_Block_Type_Registry $registry
         */
        public function __construct($blocks, $available_context = array(), $registry = \null)
        {
        }
        /**
         * @param string $offset
         * @return bool
         * @phpstan-param int $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         * @return mixed|null
         * @phpstan-param int $offset
         * @phpstan-return WP_Block|null
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param mixed $value
         * @phpstan-param int|null $offset
         * @phpstan-return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         * @phpstan-param int $offset
         * @phpstan-return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /**
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
    class WP_Block_Parser_Block
    {
        /**
         * @var string
         */
        public $blockName;
        // phpcs:ignore WordPress.NamingConventions.ValidVariableName
        /**
         * @var array|null
         */
        public $attrs;
        /**
         * @var \WP_Block_Parser_Block[]
         */
        public $innerBlocks;
        // phpcs:ignore WordPress.NamingConventions.ValidVariableName
        /**
         * @var string
         */
        public $innerHTML;
        // phpcs:ignore WordPress.NamingConventions.ValidVariableName
        /**
         * @var array
         */
        public $innerContent;
        // phpcs:ignore WordPress.NamingConventions.ValidVariableName
        /**
         * @param string $name
         * @param array $attrs
         * @param array $inner_blocks
         * @param string $inner_html
         * @param array $inner_content
         */
        public function __construct($name, $attrs, $inner_blocks, $inner_html, $inner_content)
        {
        }
    }
    class WP_Block_Parser_Frame
    {
        /**
         * @var \WP_Block_Parser_Block
         */
        public $block;
        /**
         * @var int
         */
        public $token_start;
        /**
         * @var int
         */
        public $token_length;
        /**
         * @var int
         */
        public $prev_offset;
        /**
         * @var int
         */
        public $leading_html_start;
        /**
         * @param \WP_Block_Parser_Block $block
         * @param int $token_start
         * @param int $token_length
         * @param int $prev_offset
         * @param int $leading_html_start
         */
        public function __construct($block, $token_start, $token_length, $prev_offset = \null, $leading_html_start = \null)
        {
        }
    }
    class WP_Block_Parser
    {
        /**
         * @var string
         */
        public $document;
        /**
         * @var int
         */
        public $offset;
        /**
         * @var \WP_Block_Parser_Block[]
         */
        public $output;
        /**
         * @var \WP_Block_Parser_Frame[]
         */
        public $stack;
        /**
         * @param string $document
         * @return array[]
         */
        public function parse($document)
        {
        }
        /**
         * @return bool
         */
        public function proceed()
        {
        }
        /**
         * @return array
         */
        public function next_token()
        {
        }
        /**
         * @param string $inner_html
         * @return \WP_Block_Parser_Block
         */
        public function freeform($inner_html)
        {
        }
        /**
         * @param null $length
         * @phpstan-return void
         */
        public function add_freeform($length = \null)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param int $token_start
         * @param int $token_length
         * @param int|null $last_offset
         */
        public function add_inner_block(\WP_Block_Parser_Block $block, $token_start, $token_length, $last_offset = \null)
        {
        }
        /**
         * @param int|null $end_offset
         */
        public function add_block_from_stack($end_offset = \null)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Block_Pattern_Categories_Registry
    {
        /**
         * @param string $category_name
         * @phpstan-param array{
         *   label?: string,
         * } $category_properties
         * @return bool
         */
        public function register($category_name, $category_properties)
        {
        }
        /**
         * @param string $category_name
         * @return bool
         */
        public function unregister($category_name)
        {
        }
        /**
         * @param string $category_name
         * @return array
         */
        public function get_registered($category_name)
        {
        }
        /**
         * @param bool $outside_init_only
         * @return array[]
         */
        public function get_all_registered($outside_init_only = \false)
        {
        }
        /**
         * @param string $category_name
         * @return bool
         */
        public function is_registered($category_name)
        {
        }
        /**
         * @return \WP_Block_Pattern_Categories_Registry
         */
        public static function get_instance()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Block_Patterns_Registry
    {
        /**
         * @param string $pattern_name
         * @phpstan-param array{
         *   title?: string,
         *   content?: string,
         *   description?: string,
         *   viewportWidth?: int,
         *   inserter?: bool,
         *   categories?: string[],
         *   keywords?: string[],
         *   blockTypes?: string[],
         *   postTypes?: string[],
         *   templateTypes?: string[],
         *   filePath?: string,
         * } $pattern_properties
         * @return bool
         */
        public function register($pattern_name, $pattern_properties)
        {
        }
        /**
         * @param string $pattern_name
         * @return bool
         */
        public function unregister($pattern_name)
        {
        }
        /**
         * @param string $pattern_name
         * @return array
         */
        public function get_registered($pattern_name)
        {
        }
        /**
         * @param bool $outside_init_only
         * @return array[]
         */
        public function get_all_registered($outside_init_only = \false)
        {
        }
        /**
         * @param string $pattern_name
         * @return bool
         */
        public function is_registered($pattern_name)
        {
        }
        public function __wakeup()
        {
        }
        /**
         * @return \WP_Block_Patterns_Registry
         */
        public static function get_instance()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Block_Styles_Registry
    {
        /**
         * @param string|string[] $block_name
         * @phpstan-param array{
         *   name?: string,
         *   label?: string,
         *   inline_style?: string,
         *   style_handle?: string,
         *   is_default?: bool,
         *   style_data?: array,
         * } $style_properties
         * @return bool
         */
        public function register($block_name, $style_properties)
        {
        }
        /**
         * @param string $block_name
         * @param string $block_style_name
         * @return bool
         */
        public function unregister($block_name, $block_style_name)
        {
        }
        /**
         * @param string $block_name
         * @param string $block_style_name
         * @return array
         */
        public function get_registered($block_name, $block_style_name)
        {
        }
        /**
         * @return array[]
         */
        public function get_all_registered()
        {
        }
        /**
         * @param string $block_name
         * @return array[]
         */
        public function get_registered_styles_for_block($block_name)
        {
        }
        /**
         * @param string $block_name
         * @param string $block_style_name
         * @return bool
         */
        public function is_registered($block_name, $block_style_name)
        {
        }
        /**
         * @return \WP_Block_Styles_Registry
         */
        public static function get_instance()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Block_Supports
    {
        /**
         * @var array
         */
        public static $block_to_render = \null;
        /**
         * @return \WP_Block_Supports
         */
        public static function get_instance()
        {
        }
        public static function init()
        {
        }
        /**
         * @param string $block_support_name
         * @param array $block_support_config
         */
        public function register($block_support_name, $block_support_config)
        {
        }
        /**
         * @return string[]
         */
        public function apply_block_supports()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Block_Template
    {
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $theme;
        /**
         * @var string
         */
        public $slug;
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $title = '';
        /**
         * @var string
         */
        public $content = '';
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var string
         */
        public $source = 'theme';
        /**
         * @var string|null
         */
        public $origin;
        /**
         * @var int|null
         */
        public $wp_id;
        /**
         * @var string
         */
        public $status;
        /**
         * @var bool
         */
        public $has_theme_file;
        /**
         * @var bool
         */
        public $is_custom = \true;
        /**
         * @var int|null
         */
        public $author;
        /**
         * @var string[]|null
         */
        public $post_types;
        /**
         * @var string|null
         */
        public $area;
        /**
         * @var string|null
         */
        public $modified;
    }
    #[\AllowDynamicProperties]
    final class WP_Block_Type_Registry
    {
        /**
         * @param string|\WP_Block_Type $name
         * @param array $args
         * @return \WP_Block_Type|false
         * @phpstan-param array{
         *   api_version?: string,
         *   title?: string,
         *   category?: string|null,
         *   parent?: string[]|null,
         *   ancestor?: string[]|null,
         *   allowed_blocks?: string[]|null,
         *   icon?: string|null,
         *   description?: string,
         *   keywords?: string[],
         *   textdomain?: string|null,
         *   styles?: array[],
         *   variations?: array[],
         *   selectors?: array,
         *   supports?: array|null,
         *   example?: array|null,
         *   render_callback?: callable|null,
         *   variation_callback?: callable|null,
         *   attributes?: array|null,
         *   uses_context?: string[],
         *   provides_context?: string[]|null,
         *   block_hooks?: string[],
         *   editor_script_handles?: string[],
         *   script_handles?: string[],
         *   view_script_handles?: string[],
         *   editor_style_handles?: string[],
         *   style_handles?: string[],
         *   view_style_handles?: string[],
         * } $args See WP_Block_Type::__construct()
         */
        public function register($name, $args = array())
        {
        }
        /**
         * @param string|\WP_Block_Type $name
         * @return \WP_Block_Type|false
         */
        public function unregister($name)
        {
        }
        /**
         * @param string $name
         * @return \WP_Block_Type|null
         */
        public function get_registered($name)
        {
        }
        /**
         * @return \WP_Block_Type[]
         */
        public function get_all_registered()
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function is_registered($name)
        {
        }
        public function __wakeup()
        {
        }
        /**
         * @return \WP_Block_Type_Registry
         */
        public static function get_instance()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Block_Type
    {
        /**
         * @var int
         */
        public $api_version = 1;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $title = '';
        /**
         * @var string|null
         */
        public $category = \null;
        /**
         * @var string[]|null
         */
        public $parent = \null;
        /**
         * @var string[]|null
         */
        public $ancestor = \null;
        /**
         * @var string[]|null
         */
        public $allowed_blocks = \null;
        /**
         * @var string|null
         */
        public $icon = \null;
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var string[]
         */
        public $keywords = array();
        /**
         * @var string|null
         */
        public $textdomain = \null;
        /**
         * @var array
         */
        public $styles = array();
        /**
         * @var callable|null
         */
        public $variation_callback = \null;
        /**
         * @var array
         */
        public $selectors = array();
        /**
         * @var array|null
         */
        public $supports = \null;
        /**
         * @var array|null
         */
        public $example = \null;
        /**
         * @var callable
         */
        public $render_callback = \null;
        /**
         * @var array|null
         */
        public $attributes = \null;
        /**
         * @var string[]|null
         */
        public $provides_context = \null;
        /**
         * @var string[]
         */
        public $block_hooks = array();
        /**
         * @var string[]
         */
        public $editor_script_handles = array();
        /**
         * @var string[]
         */
        public $script_handles = array();
        /**
         * @var string[]
         */
        public $view_script_handles = array();
        /**
         * @var string[]
         */
        public $view_script_module_ids = array();
        /**
         * @var string[]
         */
        public $editor_style_handles = array();
        /**
         * @var string[]
         */
        public $style_handles = array();
        /**
         * @var string[]
         */
        public $view_style_handles = array();
        /**
         * Attributes supported by every block.
         *
         * @since 6.0.0 Added `lock`.
         * @since 6.5.0 Added `metadata`.
         * @var array
         */
        const GLOBAL_ATTRIBUTES = array('lock' => array('type' => 'object'), 'metadata' => array('type' => 'object'));
        /**
         * @param string $block_type
         * @phpstan-param array{
         *   api_version?: string,
         *   title?: string,
         *   category?: string|null,
         *   parent?: string[]|null,
         *   ancestor?: string[]|null,
         *   allowed_blocks?: string[]|null,
         *   icon?: string|null,
         *   description?: string,
         *   keywords?: string[],
         *   textdomain?: string|null,
         *   styles?: array[],
         *   variations?: array[],
         *   selectors?: array,
         *   supports?: array|null,
         *   example?: array|null,
         *   render_callback?: callable|null,
         *   variation_callback?: callable|null,
         *   attributes?: array|null,
         *   uses_context?: string[],
         *   provides_context?: string[]|null,
         *   block_hooks?: string[],
         *   editor_script_handles?: string[],
         *   script_handles?: string[],
         *   view_script_handles?: string[],
         *   editor_style_handles?: string[],
         *   style_handles?: string[],
         *   view_style_handles?: string[],
         * } $args
         */
        public function __construct($block_type, $args = array())
        {
        }
        /**
         * @param string $name
         * @return string|string[]|null|void
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param array $attributes
         * @param string $content
         * @return string
         */
        public function render($attributes = array(), $content = '')
        {
        }
        /**
         * @return bool
         */
        public function is_dynamic()
        {
        }
        /**
         * @param array $attributes
         * @return array
         */
        public function prepare_attributes_for_render($attributes)
        {
        }
        /**
         * @param array|string $args
         * @phpstan-param array{
         *   api_version?: string,
         *   title?: string,
         *   category?: string|null,
         *   parent?: string[]|null,
         *   ancestor?: string[]|null,
         *   allowed_blocks?: string[]|null,
         *   icon?: string|null,
         *   description?: string,
         *   keywords?: string[],
         *   textdomain?: string|null,
         *   styles?: array[],
         *   variations?: array[],
         *   selectors?: array,
         *   supports?: array|null,
         *   example?: array|null,
         *   render_callback?: callable|null,
         *   variation_callback?: callable|null,
         *   attributes?: array|null,
         *   uses_context?: string[],
         *   provides_context?: string[]|null,
         *   block_hooks?: string[],
         *   editor_script_handles?: string[],
         *   script_handles?: string[],
         *   view_script_handles?: string[],
         *   editor_style_handles?: string[],
         *   style_handles?: string[],
         *   view_style_handles?: string[],
         * } $args See WP_Block_Type::__construct()
         */
        public function set_props($args)
        {
        }
        /**
         * @return array
         */
        public function get_attributes()
        {
        }
        /**
         * @return array[]
         */
        public function get_variations()
        {
        }
        /**
         * @return string[]
         */
        public function get_uses_context()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Block
    {
        /**
         * @var array
         */
        public $parsed_block;
        /**
         * @var string
         */
        public $name;
        /**
         * @var \WP_Block_Type
         */
        public $block_type;
        /**
         * @var array
         */
        public $context = array();
        /**
         * @var array
         */
        protected $available_context;
        /**
         * @var \WP_Block_Type_Registry
         */
        protected $registry;
        /**
         * @var \WP_Block_List
         */
        public $inner_blocks = array();
        /**
         * @var string
         */
        public $inner_html = '';
        /**
         * @var array
         */
        public $inner_content = array();
        /**
         * @phpstan-param array{
         *   blockName?: string,
         *   attrs?: array,
         *   innerBlocks?: array,
         *   innerHTML?: string,
         *   innerContent?: array,
         * } $block
         * @param array $available_context
         * @param \WP_Block_Type_Registry $registry
         */
        public function __construct($block, $available_context = array(), $registry = \null)
        {
        }
        /**
         * @param string $name
         * @return array|null
         */
        public function __get($name)
        {
        }
        /**
         * @phpstan-param array{
         *   dynamic?: bool,
         * } $options
         * @return string
         */
        public function render($options = array())
        {
        }
    }
    class WP_Classic_To_Block_Menu_Converter
    {
        /**
         * @param \WP_Term $menu
         * @return string|\WP_Error
         */
        public static function convert($menu)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Comment_Query
    {
        /**
         * @var string
         */
        public $request;
        /**
         * @var \WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * @var string
         */
        protected $filtered_where_clause;
        /**
         * @var \WP_Date_Query
         */
        public $date_query = \false;
        /**
         * @var array
         */
        public $query_vars;
        /**
         * @var array
         */
        public $query_var_defaults;
        /**
         * @var int[]|\WP_Comment[]
         */
        public $comments;
        /**
         * @var int
         */
        public $found_comments = 0;
        /**
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|false
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @phpstan-param array{
         *   author_email?: string,
         *   author_url?: string,
         *   author__in?: int[],
         *   author__not_in?: int[],
         *   comment__in?: int[],
         *   comment__not_in?: int[],
         *   count?: bool,
         *   date_query?: array,
         *   fields?: string,
         *   include_unapproved?: array,
         *   karma?: int,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         *   number?: int,
         *   paged?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   parent?: int,
         *   parent__in?: int[],
         *   parent__not_in?: int[],
         *   post_author__in?: int[],
         *   post_author__not_in?: int[],
         *   post_id?: int,
         *   post__in?: int[],
         *   post__not_in?: int[],
         *   post_author?: int,
         *   post_status?: string|string[],
         *   post_type?: string|string[],
         *   post_name?: string,
         *   post_parent?: int,
         *   search?: string,
         *   status?: string|array,
         *   type?: string|string[],
         *   type__in?: string[],
         *   type__not_in?: string[],
         *   user_id?: int,
         *   hierarchical?: bool|string,
         *   cache_domain?: string,
         *   update_comment_meta_cache?: bool,
         *   update_comment_post_cache?: bool,
         * } $query
         */
        public function __construct($query = '')
        {
        }
        /**
         * @param string|array $query
         * @phpstan-param array{
         *   author_email?: string,
         *   author_url?: string,
         *   author__in?: int[],
         *   author__not_in?: int[],
         *   comment__in?: int[],
         *   comment__not_in?: int[],
         *   count?: bool,
         *   date_query?: array,
         *   fields?: string,
         *   include_unapproved?: array,
         *   karma?: int,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         *   number?: int,
         *   paged?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   parent?: int,
         *   parent__in?: int[],
         *   parent__not_in?: int[],
         *   post_author__in?: int[],
         *   post_author__not_in?: int[],
         *   post_id?: int,
         *   post__in?: int[],
         *   post__not_in?: int[],
         *   post_author?: int,
         *   post_status?: string|string[],
         *   post_type?: string|string[],
         *   post_name?: string,
         *   post_parent?: int,
         *   search?: string,
         *   status?: string|array,
         *   type?: string|string[],
         *   type__in?: string[],
         *   type__not_in?: string[],
         *   user_id?: int,
         *   hierarchical?: bool|string,
         *   cache_domain?: string,
         *   update_comment_meta_cache?: bool,
         *   update_comment_post_cache?: bool,
         * } $query See WP_Comment_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * @param string|array $query
         * @return array|int
         */
        public function query($query)
        {
        }
        /**
         * @return int|int[]|\WP_Comment[]
         */
        public function get_comments()
        {
        }
        /**
         * @return int|array
         */
        protected function get_comment_ids()
        {
        }
        /**
         * @param \WP_Comment[] $comments
         * @return array
         */
        protected function fill_descendants($comments)
        {
        }
        /**
         * @param string $search
         * @param string[] $columns
         * @return string
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * @param string $orderby
         * @return string|false
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Comment
    {
        /**
         * @var string
         */
        public $comment_ID;
        /**
         * @var string
         */
        public $comment_post_ID = 0;
        /**
         * @var string
         */
        public $comment_author = '';
        /**
         * @var string
         */
        public $comment_author_email = '';
        /**
         * @var string
         */
        public $comment_author_url = '';
        /**
         * @var string
         */
        public $comment_author_IP = '';
        /**
         * @var string
         */
        public $comment_date = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $comment_date_gmt = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $comment_content;
        /**
         * @var string
         */
        public $comment_karma = 0;
        /**
         * @var string
         */
        public $comment_approved = '1';
        /**
         * @var string
         */
        public $comment_agent = '';
        /**
         * @var string
         */
        public $comment_type = 'comment';
        /**
         * @var string
         */
        public $comment_parent = 0;
        /**
         * @var string
         */
        public $user_id = 0;
        /**
         * @param int $id
         * @return \WP_Comment|false
         */
        public static function get_instance($id)
        {
        }
        /**
         * @param \WP_Comment $comment
         */
        public function __construct($comment)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @phpstan-param array{
         *   format?: string,
         *   status?: string,
         *   hierarchical?: string,
         *   orderby?: string|array,
         * } $args
         * @return \WP_Comment[]
         */
        public function get_children($args = array())
        {
        }
        /**
         * @param \WP_Comment $child
         */
        public function add_child(\WP_Comment $child)
        {
        }
        /**
         * @param int $child_id
         * @return \WP_Comment|false
         */
        public function get_child($child_id)
        {
        }
        /**
         * @param bool $set
         */
        public function populated_children($set)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Customize_Control
    {
        /**
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * @var int
         */
        public $instance_number;
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @var string
         */
        public $id;
        /**
         * @var array
         */
        public $settings;
        /**
         * @var string|\WP_Customize_Setting|null
         */
        public $setting = 'default';
        /**
         * @var string
         */
        public $capability;
        /**
         * @var int
         */
        public $priority = 10;
        /**
         * @var string
         */
        public $section = '';
        /**
         * @var string
         */
        public $label = '';
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var array
         */
        public $choices = array();
        /**
         * @var array
         */
        public $input_attrs = array();
        /**
         * @var bool
         */
        public $allow_addition = \false;
        /**
         * @var array
         */
        public $json = array();
        /**
         * @var string
         */
        public $type = 'text';
        /**
         * @var callable
         */
        public $active_callback = '';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        public function enqueue()
        {
        }
        /**
         * @return bool
         */
        public final function active()
        {
        }
        /**
         * @return true
         */
        public function active_callback()
        {
        }
        /**
         * @param string $setting_key
         * @return mixed
         */
        public final function value($setting_key = 'default')
        {
        }
        public function to_json()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public final function check_capabilities()
        {
        }
        /**
         * @return string
         */
        public final function get_content()
        {
        }
        /**
         * @phpstan-return void
         */
        public final function maybe_render()
        {
        }
        protected function render()
        {
        }
        /**
         * @param string $setting_key
         * @return string
         */
        public function get_link($setting_key = 'default')
        {
        }
        /**
         * @param string $setting_key
         */
        public function link($setting_key = 'default')
        {
        }
        public function input_attrs()
        {
        }
        /**
         * @phpstan-return void
         */
        protected function render_content()
        {
        }
        public final function print_template()
        {
        }
        protected function content_template()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Customize_Manager
    {
        /**
         * @var \WP_Customize_Widgets
         */
        public $widgets;
        /**
         * @var \WP_Customize_Nav_Menus
         */
        public $nav_menus;
        /**
         * @var \WP_Customize_Selective_Refresh
         */
        public $selective_refresh;
        /**
         * @phpstan-param array{
         *   changeset_uuid?: null|string|false,
         *   theme?: string,
         *   messenger_channel?: string,
         *   settings_previewed?: bool,
         *   branching?: bool,
         *   autosaved?: bool,
         * } $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * @param string|null $action
         * @return bool
         */
        public function doing_ajax($action = \null)
        {
        }
        /**
         * @return callable
         */
        public function wp_die_handler()
        {
        }
        /**
         * @phpstan-return void
         */
        public function setup_theme()
        {
        }
        public function establish_loaded_changeset()
        {
        }
        public function after_setup_theme()
        {
        }
        /**
         * @phpstan-return void
         */
        public function start_previewing_theme()
        {
        }
        /**
         * @phpstan-return void
         */
        public function stop_previewing_theme()
        {
        }
        /**
         * @return bool
         */
        public function settings_previewed()
        {
        }
        /**
         * @return bool
         */
        public function autosaved()
        {
        }
        /**
         * @return bool
         */
        public function branching()
        {
        }
        /**
         * @return string
         */
        public function changeset_uuid()
        {
        }
        /**
         * @return \WP_Theme
         */
        public function theme()
        {
        }
        /**
         * @return array
         */
        public function settings()
        {
        }
        /**
         * @return array
         */
        public function controls()
        {
        }
        /**
         * @return array
         */
        public function containers()
        {
        }
        /**
         * @return array
         */
        public function sections()
        {
        }
        /**
         * @return array
         */
        public function panels()
        {
        }
        /**
         * @return bool
         */
        public function is_theme_active()
        {
        }
        public function wp_loaded()
        {
        }
        /**
         * @param int $status
         * @return int
         */
        public function wp_redirect_status($status)
        {
        }
        /**
         * @param string $uuid
         * @return int|null
         */
        public function find_changeset_post_id($uuid)
        {
        }
        /**
         * @return int|null
         */
        public function changeset_post_id()
        {
        }
        /**
         * @return array
         */
        public function changeset_data()
        {
        }
        /**
         * @param array $starter_content
         * @phpstan-return void
         */
        public function import_theme_starter_content($starter_content = array())
        {
        }
        /**
         * @phpstan-return void
         */
        public function _save_starter_content_changeset()
        {
        }
        /**
         * @phpstan-param array{
         *   exclude_changeset?: bool,
         *   exclude_post_data?: bool,
         * } $args
         * @return array
         */
        public function unsanitized_post_values($args = array())
        {
        }
        /**
         * @param \WP_Customize_Setting $setting
         * @param mixed $default_value
         * @return string|mixed
         */
        public function post_value($setting, $default_value = \null)
        {
        }
        /**
         * @param string $setting_id
         * @param mixed $value
         */
        public function set_post_value($setting_id, $value)
        {
        }
        /**
         * @phpstan-return void
         */
        public function customize_preview_init()
        {
        }
        /**
         * @param array $headers
         * @return array
         */
        public function filter_iframe_security_headers($headers)
        {
        }
        /**
         * @param string $url
         * @return string
         */
        public function add_state_query_params($url)
        {
        }
        public function customize_preview_override_404_status()
        {
        }
        public function customize_preview_base()
        {
        }
        public function customize_preview_html5()
        {
        }
        public function customize_preview_loading_style()
        {
        }
        /**
         * @phpstan-return void
         */
        public function remove_frameless_preview_messenger_channel()
        {
        }
        public function customize_preview_settings()
        {
        }
        public function customize_preview_signature()
        {
        }
        /**
         * @param callable|null $callback
         * @return callable|null
         */
        public function remove_preview_signature($callback = \null)
        {
        }
        /**
         * @return bool
         */
        public function is_preview()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet()
        {
        }
        /**
         * @return string
         */
        public function get_template_root()
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet_root()
        {
        }
        /**
         * @param mixed $current_theme
         * @return string
         */
        public function current_theme($current_theme)
        {
        }
        /**
         * @param array $setting_values
         * @phpstan-param array{
         *   validate_existence?: bool,
         *   validate_capability?: bool,
         * } $options
         * @return array
         */
        public function validate_setting_values($setting_values, $options = array())
        {
        }
        /**
         * @param true|\WP_Error $validity
         * @return true|array
         */
        public function prepare_setting_validity_for_js($validity)
        {
        }
        public function save()
        {
        }
        /**
         * @phpstan-param array{
         *   data?: array,
         *   status?: string,
         *   title?: string,
         *   date_gmt?: string,
         *   user_id?: int,
         *   starter_content?: bool,
         *   autosave?: bool,
         * } $args
         * @return array|\WP_Error
         */
        public function save_changeset_post($args = array())
        {
        }
        /**
         * @param array $data
         * @param array $postarr
         * @param array $unsanitized_postarr
         * @return array
         */
        public function preserve_insert_changeset_post_content($data, $postarr, $unsanitized_postarr)
        {
        }
        /**
         * @param int|\WP_Post $post
         * @return mixed
         */
        public function trash_changeset_post($post)
        {
        }
        /**
         * @phpstan-return void
         */
        public function handle_changeset_trash_request()
        {
        }
        /**
         * @param string[] $caps
         * @param string $cap
         * @param int $user_id
         * @param array $args
         * @return array
         */
        public function grant_edit_post_capability_for_changeset($caps, $cap, $user_id, $args)
        {
        }
        /**
         * @param int $changeset_post_id
         * @param bool $take_over
         */
        public function set_changeset_lock($changeset_post_id, $take_over = \false)
        {
        }
        /**
         * @param int $changeset_post_id
         * @phpstan-return void
         */
        public function refresh_changeset_lock($changeset_post_id)
        {
        }
        /**
         * @param array $settings
         * @return array
         */
        public function add_customize_screen_to_heartbeat_settings($settings)
        {
        }
        /**
         * @param array $response
         * @param array $data
         * @param string $screen_id
         * @return array
         */
        public function check_changeset_lock_with_heartbeat($response, $data, $screen_id)
        {
        }
        /**
         * @phpstan-return never
         */
        public function handle_override_changeset_lock_request()
        {
        }
        /**
         * @param bool $post_has_changed
         * @param \WP_Post $latest_revision
         * @param \WP_Post $post
         * @return bool
         */
        public function _filter_revision_post_has_changed($post_has_changed, $latest_revision, $post)
        {
        }
        /**
         * @param int $changeset_post_id
         * @return true|\WP_Error
         */
        public function _publish_changeset_values($changeset_post_id)
        {
        }
        /**
         * @phpstan-return never
         */
        public function refresh_nonces()
        {
        }
        /**
         * @phpstan-return never
         */
        public function handle_dismiss_autosave_or_lock_request()
        {
        }
        /**
         * @param \WP_Customize_Setting|string $id
         * @param array $args
         * @return \WP_Customize_Setting
         * @phpstan-param array{
         *   type?: string,
         *   capability?: string,
         *   theme_supports?: string|string[],
         *   default?: string,
         *   transport?: string,
         *   validate_callback?: callable,
         *   sanitize_callback?: callable,
         *   sanitize_js_callback?: callable,
         *   dirty?: bool,
         * } $args See WP_Customize_Setting::__construct()
         */
        public function add_setting($id, $args = array())
        {
        }
        /**
         * @param array $setting_ids
         * @return array
         */
        public function add_dynamic_settings($setting_ids)
        {
        }
        /**
         * @param string $id
         * @return \WP_Customize_Setting|void
         */
        public function get_setting($id)
        {
        }
        /**
         * @param string $id
         */
        public function remove_setting($id)
        {
        }
        /**
         * @param \WP_Customize_Panel|string $id
         * @param array $args
         * @return \WP_Customize_Panel
         * @phpstan-param array{
         *   priority?: int,
         *   capability?: string,
         *   theme_supports?: mixed[],
         *   title?: string,
         *   description?: string,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Panel::__construct()
         */
        public function add_panel($id, $args = array())
        {
        }
        /**
         * @param string $id
         * @return \WP_Customize_Panel|void
         */
        public function get_panel($id)
        {
        }
        /**
         * @param string $id
         */
        public function remove_panel($id)
        {
        }
        /**
         * @param string $panel
         */
        public function register_panel_type($panel)
        {
        }
        public function render_panel_templates()
        {
        }
        /**
         * @param \WP_Customize_Section|string $id
         * @param array $args
         * @return \WP_Customize_Section
         * @phpstan-param array{
         *   priority?: int,
         *   panel?: string,
         *   capability?: string,
         *   theme_supports?: string|string[],
         *   title?: string,
         *   description?: string,
         *   type?: string,
         *   active_callback?: callable,
         *   description_hidden?: bool,
         * } $args See WP_Customize_Section::__construct()
         */
        public function add_section($id, $args = array())
        {
        }
        /**
         * @param string $id
         * @return \WP_Customize_Section|void
         */
        public function get_section($id)
        {
        }
        /**
         * @param string $id
         */
        public function remove_section($id)
        {
        }
        /**
         * @param string $section
         */
        public function register_section_type($section)
        {
        }
        public function render_section_templates()
        {
        }
        /**
         * @param \WP_Customize_Control|string $id
         * @param array $args
         * @return \WP_Customize_Control
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function add_control($id, $args = array())
        {
        }
        /**
         * @param string $id
         * @return \WP_Customize_Control|void
         */
        public function get_control($id)
        {
        }
        /**
         * @param string $id
         */
        public function remove_control($id)
        {
        }
        /**
         * @param string $control
         */
        public function register_control_type($control)
        {
        }
        public function render_control_templates()
        {
        }
        public function prepare_controls()
        {
        }
        public function enqueue_control_scripts()
        {
        }
        /**
         * @return bool
         */
        public function is_ios()
        {
        }
        /**
         * @return string
         */
        public function get_document_title_template()
        {
        }
        /**
         * @param string $preview_url
         */
        public function set_preview_url($preview_url)
        {
        }
        /**
         * @return string
         */
        public function get_preview_url()
        {
        }
        /**
         * @return bool
         */
        public function is_cross_domain()
        {
        }
        /**
         * @return array
         */
        public function get_allowed_urls()
        {
        }
        /**
         * @return string
         */
        public function get_messenger_channel()
        {
        }
        /**
         * @param string $return_url
         */
        public function set_return_url($return_url)
        {
        }
        /**
         * @return string
         */
        public function get_return_url()
        {
        }
        /**
         * @phpstan-param array{
         *   control?: string,
         *   section?: string,
         *   panel?: string,
         * } $autofocus
         */
        public function set_autofocus($autofocus)
        {
        }
        /**
         * @phpstan-return array{
         *   control: string,
         *   section: string,
         *   panel: string,
         * }
         */
        public function get_autofocus()
        {
        }
        /**
         * @return array
         */
        public function get_nonces()
        {
        }
        public function customize_pane_settings()
        {
        }
        /**
         * @return array
         */
        public function get_previewable_devices()
        {
        }
        public function register_controls()
        {
        }
        /**
         * @return bool
         */
        public function has_published_pages()
        {
        }
        public function register_dynamic_settings()
        {
        }
        /**
         * @phpstan-return never
         */
        public function handle_load_themes_request()
        {
        }
        /**
         * @param string $color
         * @return mixed
         */
        public function _sanitize_header_textcolor($color)
        {
        }
        /**
         * @param string $value
         * @param \WP_Customize_Setting $setting
         * @return string|\WP_Error
         */
        public function _sanitize_background_setting($value, $setting)
        {
        }
        /**
         * @param array $response
         * @param \WP_Customize_Selective_Refresh $selective_refresh
         * @param array $partials
         * @return array
         */
        public function export_header_video_settings($response, $selective_refresh, $partials)
        {
        }
        /**
         * @param \WP_Error $validity
         * @param mixed $value
         * @return mixed
         */
        public function _validate_header_video($validity, $value)
        {
        }
        /**
         * @param \WP_Error $validity
         * @param mixed $value
         * @return mixed
         */
        public function _validate_external_header_video($validity, $value)
        {
        }
        /**
         * @param string $value
         * @return string
         */
        public function _sanitize_external_header_video($value)
        {
        }
        /**
         * @return string
         */
        public function _render_custom_logo_partial()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Customize_Nav_Menus
    {
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @param \WP_Customize_Manager $manager
         * @phpstan-return void
         */
        public function __construct($manager)
        {
        }
        /**
         * @param string[] $nonces
         * @return string[]
         */
        public function filter_nonces($nonces)
        {
        }
        /**
         * @phpstan-return never
         */
        public function ajax_load_available_items()
        {
        }
        /**
         * @param string $object_type
         * @param string $object_name
         * @param int $page
         * @return array|\WP_Error
         */
        public function load_available_items_query($object_type = 'post_type', $object_name = 'page', $page = 0)
        {
        }
        public function ajax_search_available_items()
        {
        }
        /**
         * @param array $args
         * @return array
         */
        public function search_available_items_query($args = array())
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param false|array $setting_args
         * @param string $setting_id
         * @return array|false
         */
        public function filter_dynamic_setting_args($setting_args, $setting_id)
        {
        }
        /**
         * @param string $setting_class
         * @param string $setting_id
         * @param array $setting_args
         * @return string
         */
        public function filter_dynamic_setting_class($setting_class, $setting_id, $setting_args)
        {
        }
        public function customize_register()
        {
        }
        /**
         * @param mixed $value
         * @return int
         */
        public function intval_base10($value)
        {
        }
        /**
         * @return array
         */
        public function available_item_types()
        {
        }
        /**
         * @phpstan-param array{
         *   post_title?: string,
         *   post_type?: string,
         *   post_name?: string,
         *   post_content?: string,
         * } $postarr
         * @return \WP_Post|\WP_Error
         */
        public function insert_auto_draft_post($postarr)
        {
        }
        public function ajax_insert_auto_draft_post()
        {
        }
        public function print_templates()
        {
        }
        public function available_items_template()
        {
        }
        //
        // Start functionality specific to partial-refresh of menu changes in Customizer preview.
        //
        /**
         * @var array
         */
        public $preview_nav_menu_instance_args = array();
        /**
         * @param array|false $partial_args
         * @param string $partial_id
         * @return array
         */
        public function customize_dynamic_partial_args($partial_args, $partial_id)
        {
        }
        public function customize_preview_init()
        {
        }
        public function make_auto_draft_status_previewable()
        {
        }
        /**
         * @param array $value
         * @return array
         */
        public function sanitize_nav_menus_created_posts($value)
        {
        }
        /**
         * @param \WP_Customize_Setting $setting
         */
        public function save_nav_menus_created_posts($setting)
        {
        }
        /**
         * @param array $args
         * @return array
         */
        public function filter_wp_nav_menu_args($args)
        {
        }
        /**
         * @param string $nav_menu_content
         * @param object $args
         * @return string
         */
        public function filter_wp_nav_menu($nav_menu_content, $args)
        {
        }
        /**
         * @param array $args
         * @return string
         */
        public function hash_nav_menu_args($args)
        {
        }
        public function customize_preview_enqueue_deps()
        {
        }
        public function export_preview_data()
        {
        }
        /**
         * @param array $response
         * @return array
         */
        public function export_partial_rendered_nav_menu_instances($response)
        {
        }
        /**
         * @param \WP_Customize_Partial $partial
         * @param array $nav_menu_args
         * @return string|false
         */
        public function render_nav_menu_partial($partial, $nav_menu_args)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Customize_Panel
    {
        /**
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * @var int
         */
        public $instance_number;
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @var string
         */
        public $id;
        /**
         * @var int
         */
        public $priority = 160;
        /**
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * @var array
         */
        public $theme_supports = '';
        /**
         * @var string
         */
        public $title = '';
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var bool
         */
        public $auto_expand_sole_section = \false;
        /**
         * @var array
         */
        public $sections;
        /**
         * @var string
         */
        public $type = 'default';
        /**
         * @var callable
         */
        public $active_callback = '';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @phpstan-param array{
         *   priority?: int,
         *   capability?: string,
         *   theme_supports?: mixed[],
         *   title?: string,
         *   description?: string,
         *   type?: string,
         *   active_callback?: callable,
         * } $args
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * @return bool
         */
        public final function active()
        {
        }
        /**
         * @return bool
         */
        public function active_callback()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public function check_capabilities()
        {
        }
        /**
         * @return string
         */
        public final function get_content()
        {
        }
        /**
         * @phpstan-return void
         */
        public final function maybe_render()
        {
        }
        protected function render()
        {
        }
        protected function render_content()
        {
        }
        public function print_template()
        {
        }
        protected function render_template()
        {
        }
        protected function content_template()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Customize_Section
    {
        /**
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * @var int
         */
        public $instance_number;
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @var string
         */
        public $id;
        /**
         * @var int
         */
        public $priority = 160;
        /**
         * @var string
         */
        public $panel = '';
        /**
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * @var string|string[]
         */
        public $theme_supports = '';
        /**
         * @var string
         */
        public $title = '';
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var array
         */
        public $controls;
        /**
         * @var string
         */
        public $type = 'default';
        /**
         * @var callable
         */
        public $active_callback = '';
        /**
         * @var bool
         */
        public $description_hidden = \false;
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @phpstan-param array{
         *   priority?: int,
         *   panel?: string,
         *   capability?: string,
         *   theme_supports?: string|string[],
         *   title?: string,
         *   description?: string,
         *   type?: string,
         *   active_callback?: callable,
         *   description_hidden?: bool,
         * } $args
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * @return bool
         */
        public final function active()
        {
        }
        /**
         * @return true
         */
        public function active_callback()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public final function check_capabilities()
        {
        }
        /**
         * @return string
         */
        public final function get_content()
        {
        }
        /**
         * @phpstan-return void
         */
        public final function maybe_render()
        {
        }
        protected function render()
        {
        }
        public function print_template()
        {
        }
        protected function render_template()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Customize_Setting
    {
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $type = 'theme_mod';
        /**
         * @var string|array
         */
        public $capability = 'edit_theme_options';
        /**
         * @var string|string[]
         */
        public $theme_supports = '';
        /**
         * @var string
         */
        public $default = '';
        /**
         * @var string
         */
        public $transport = 'refresh';
        /**
         * @var callable
         */
        public $validate_callback = '';
        /**
         * @var callable
         */
        public $sanitize_callback = '';
        /**
         * @var callable
         */
        public $sanitize_js_callback = '';
        /**
         * @var bool
         */
        public $dirty = \false;
        /**
         * @var array
         */
        protected $id_data = array();
        /**
         * @var bool
         */
        protected $is_previewed = \false;
        /**
         * @var array
         */
        protected static $aggregated_multidimensionals = array();
        /**
         * @var bool
         */
        protected $is_multidimensional_aggregated = \false;
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @phpstan-param array{
         *   type?: string,
         *   capability?: string,
         *   theme_supports?: string|string[],
         *   default?: string,
         *   transport?: string,
         *   validate_callback?: callable,
         *   sanitize_callback?: callable,
         *   sanitize_js_callback?: callable,
         *   dirty?: bool,
         * } $args
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * @phpstan-return array{
         *   base: string,
         *   keys: array,
         * }
         */
        public final function id_data()
        {
        }
        protected function aggregate_multidimensional()
        {
        }
        public static function reset_aggregated_multidimensionals()
        {
        }
        /**
         * @var int
         */
        protected $_previewed_blog_id;
        /**
         * @return bool
         */
        public function is_current_blog_previewed()
        {
        }
        /**
         * @var mixed
         */
        protected $_original_value;
        /**
         * @return bool
         */
        public function preview()
        {
        }
        public final function _clear_aggregated_multidimensional_preview_applied_flag()
        {
        }
        /**
         * @param mixed $original
         * @return mixed
         */
        public function _preview_filter($original)
        {
        }
        /**
         * @param mixed $original
         * @return mixed
         */
        public final function _multidimensional_preview_filter($original)
        {
        }
        /**
         * @return void|false
         */
        public final function save()
        {
        }
        /**
         * @param mixed $default_value
         * @return mixed
         */
        public final function post_value($default_value = \null)
        {
        }
        /**
         * @param string|array $value
         * @return string|array|null|\WP_Error
         */
        public function sanitize($value)
        {
        }
        /**
         * @param mixed $value
         * @return true|\WP_Error
         */
        public function validate($value)
        {
        }
        /**
         * @param mixed $default_value
         * @return mixed
         */
        protected function get_root_value($default_value = \null)
        {
        }
        /**
         * @param mixed $value
         * @return bool
         */
        protected function set_root_value($value)
        {
        }
        /**
         * @param mixed $value
         * @return bool
         */
        protected function update($value)
        {
        }
        protected function _update_theme_mod()
        {
        }
        protected function _update_option()
        {
        }
        /**
         * @return mixed
         */
        public function value()
        {
        }
        /**
         * @return mixed
         */
        public function js_value()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public final function check_capabilities()
        {
        }
        /**
         * @param array $root
         * @param array $keys
         * @param bool $create
         * @return array|void
         */
        protected final function multidimensional(&$root, $keys, $create = \false)
        {
        }
        /**
         * @param array $root
         * @param array $keys
         * @param mixed $value
         * @return mixed
         */
        protected final function multidimensional_replace($root, $keys, $value)
        {
        }
        /**
         * @param array $root
         * @param array $keys
         * @param mixed $default_value
         * @return mixed
         */
        protected final function multidimensional_get($root, $keys, $default_value = \null)
        {
        }
        /**
         * @param array $root
         * @param array $keys
         * @return bool
         */
        protected final function multidimensional_isset($root, $keys)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Customize_Widgets
    {
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @param \WP_Customize_Manager $manager
         * @phpstan-return void
         */
        public function __construct($manager)
        {
        }
        /**
         * @return array
         */
        public function get_selective_refreshable_widgets()
        {
        }
        /**
         * @param string $id_base
         * @return bool
         */
        public function is_widget_selective_refreshable($id_base)
        {
        }
        public function register_settings()
        {
        }
        /**
         * @param false|array $args
         * @param string $setting_id
         * @return array|false
         */
        public function filter_customize_dynamic_setting_args($args, $setting_id)
        {
        }
        /**
         * @phpstan-return void
         */
        public function override_sidebars_widgets_for_theme_switch()
        {
        }
        /**
         * @param array $old_sidebars_widgets
         * @return array
         */
        public function filter_customize_value_old_sidebars_widgets_data($old_sidebars_widgets)
        {
        }
        /**
         * @param array $sidebars_widgets
         * @return array
         */
        public function filter_option_sidebars_widgets_for_theme_switch($sidebars_widgets)
        {
        }
        public function customize_controls_init()
        {
        }
        public function schedule_customize_register()
        {
        }
        public function customize_register()
        {
        }
        /**
         * @return bool
         */
        public function is_panel_active()
        {
        }
        /**
         * @param string $widget_id
         * @return string
         */
        public function get_setting_id($widget_id)
        {
        }
        /**
         * @param string $widget_id
         * @return bool
         */
        public function is_wide_widget($widget_id)
        {
        }
        /**
         * @param string $widget_id
         * @return array
         */
        public function parse_widget_id($widget_id)
        {
        }
        /**
         * @param string $setting_id
         * @return array|\WP_Error
         */
        public function parse_widget_setting_id($setting_id)
        {
        }
        public function print_styles()
        {
        }
        public function print_scripts()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function output_widget_control_templates()
        {
        }
        public function print_footer_scripts()
        {
        }
        /**
         * @param string $id
         * @param array $overrides
         * @return array
         */
        public function get_setting_args($id, $overrides = array())
        {
        }
        /**
         * @param string[] $widget_ids
         * @return string[]
         */
        public function sanitize_sidebar_widgets($widget_ids)
        {
        }
        /**
         * @return array
         */
        public function get_available_widgets()
        {
        }
        /**
         * @param array $args
         * @return string
         */
        public function get_widget_control($args)
        {
        }
        /**
         * @param array $args
         * @phpstan-return array{
         *   control: string,
         *   content: string,
         * }
         */
        public function get_widget_control_parts($args)
        {
        }
        public function customize_preview_init()
        {
        }
        /**
         * @param array $nonces
         * @return array
         */
        public function refresh_nonces($nonces)
        {
        }
        /**
         * @param bool $is_block_editor_screen
         * @return bool
         */
        public function should_load_block_editor_scripts_and_styles($is_block_editor_screen)
        {
        }
        /**
         * @param array $sidebars_widgets
         * @return array
         */
        public function preview_sidebars_widgets($sidebars_widgets)
        {
        }
        public function customize_preview_enqueue()
        {
        }
        public function print_preview_css()
        {
        }
        public function export_preview_data()
        {
        }
        /**
         * @param array $widget
         */
        public function tally_rendered_widgets($widget)
        {
        }
        /**
         * @param string $widget_id
         * @return bool
         */
        public function is_widget_rendered($widget_id)
        {
        }
        /**
         * @param string $sidebar_id
         * @return bool
         */
        public function is_sidebar_rendered($sidebar_id)
        {
        }
        /**
         * @param bool $is_active
         * @param string $sidebar_id
         * @return bool
         */
        public function tally_sidebars_via_is_active_sidebar_calls($is_active, $sidebar_id)
        {
        }
        /**
         * @param bool $has_widgets
         * @param string $sidebar_id
         * @return bool
         */
        public function tally_sidebars_via_dynamic_sidebar_calls($has_widgets, $sidebar_id)
        {
        }
        /**
         * @param array $value
         * @param string $id_base
         * @return array|void
         */
        public function sanitize_widget_instance($value, $id_base = \null)
        {
        }
        /**
         * @param array $value
         * @param string $id_base
         * @return array
         */
        public function sanitize_widget_js_instance($value, $id_base = \null)
        {
        }
        /**
         * @param array $widget_ids
         * @return array
         */
        public function sanitize_sidebar_widgets_js_instance($widget_ids)
        {
        }
        /**
         * @param string $widget_id
         * @return array|\WP_Error
         */
        public function call_widget_update($widget_id)
        {
        }
        /**
         * @phpstan-return never
         */
        public function wp_ajax_update_widget()
        {
        }
        /*
         * Selective Refresh Methods
         */
        /**
         * @param array|false $partial_args
         * @param string $partial_id
         * @return array
         */
        public function customize_dynamic_partial_args($partial_args, $partial_id)
        {
        }
        /**
         * @phpstan-return void
         */
        public function selective_refresh_init()
        {
        }
        /**
         * @phpstan-param array{
         *   args?: array,
         *   widget_args?: array,
         * } $params
         * @return array
         */
        public function filter_dynamic_sidebar_params($params)
        {
        }
        /**
         * @param array $allowed_html
         * @return array
         */
        public function filter_wp_kses_allowed_data_attributes($allowed_html)
        {
        }
        /**
         * @param int|string $index
         */
        public function start_dynamic_sidebar($index)
        {
        }
        /**
         * @param int|string $index
         */
        public function end_dynamic_sidebar($index)
        {
        }
        /**
         * @param array $sidebars_widgets
         * @return array
         */
        public function filter_sidebars_widgets_for_rendering_widget($sidebars_widgets)
        {
        }
        /**
         * @param \WP_Customize_Partial $partial
         * @phpstan-param array{
         *   sidebar_id?: string,
         *   sidebar_instance_number?: int,
         * } $context
         * @return string|false
         */
        public function render_widget_partial($partial, $context)
        {
        }
        /**
         * @param mixed $new_value
         * @param string $option_name
         * @param mixed $old_value
         * @return mixed
         */
        public function capture_filter_pre_update_option($new_value, $option_name, $old_value)
        {
        }
        /**
         * @param mixed $value
         * @return mixed
         */
        public function capture_filter_pre_get_option($value)
        {
        }
        public function setup_widget_addition_previews()
        {
        }
        public function prepreview_added_sidebars_widgets()
        {
        }
        public function prepreview_added_widget_instance()
        {
        }
        public function remove_prepreview_filters()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Date_Query
    {
        /**
         * @var array
         */
        public $queries = array();
        /**
         * @var string
         */
        public $relation = 'AND';
        /**
         * @var string
         */
        public $column = 'post_date';
        /**
         * @var string
         */
        public $compare = '=';
        /**
         * @var string[]
         */
        public $time_keys = array('after', 'before', 'year', 'month', 'monthnum', 'week', 'w', 'dayofyear', 'day', 'dayofweek', 'dayofweek_iso', 'hour', 'minute', 'second');
        /**
         * @param string $default_column
         * @phpstan-return void
         */
        public function __construct($date_query, $default_column = 'post_date')
        {
        }
        /**
         * @param array $queries
         * @param array $parent_query
         * @return array
         */
        public function sanitize_query($queries, $parent_query = \null)
        {
        }
        /**
         * @param array $query
         * @return bool
         */
        protected function is_first_order_clause($query)
        {
        }
        /**
         * @param array $query
         * @return string
         */
        public function get_compare($query)
        {
        }
        /**
         * @param array $date_query
         * @return bool
         */
        public function validate_date_values($date_query = array())
        {
        }
        /**
         * @param string $column
         * @return string
         */
        public function validate_column($column)
        {
        }
        /**
         * @return string
         */
        public function get_sql()
        {
        }
        /**
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * @param array $query
         * @param int $depth
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_for_query($query, $depth = 0)
        {
        }
        /**
         * @param array $query
         * @phpstan-return array{
         *   join: string[],
         *   where: string[],
         * }
         */
        protected function get_sql_for_subquery($query)
        {
        }
        /**
         * @param array $query
         * @param array $parent_query
         * @phpstan-return array{
         *   join: string[],
         *   where: string[],
         * }
         */
        protected function get_sql_for_clause($query, $parent_query)
        {
        }
        /**
         * @param string $compare
         * @param string|array $value
         * @return string|false|int
         */
        public function build_value($compare, $value)
        {
        }
        /**
         * @param string|array $datetime
         * @param bool $default_to_max
         * @return string|false
         */
        public function build_mysql_datetime($datetime, $default_to_max = \false)
        {
        }
        /**
         * @param string $column
         * @param string $compare
         * @param int|null $hour
         * @param int|null $minute
         * @param int|null $second
         * @return string|false
         */
        public function build_time_query($column, $compare, $hour = \null, $minute = \null, $second = \null)
        {
        }
        /**
         * @param string $relation
         * @phpstan-return 'AND'|'OR'
         */
        public function sanitize_relation($relation)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Dependencies
    {
        /**
         * @var \_WP_Dependency[]
         */
        public $registered = array();
        /**
         * @var string[]
         */
        public $queue = array();
        /**
         * @var string[]
         */
        public $to_do = array();
        /**
         * @var string[]
         */
        public $done = array();
        /**
         * @var array
         */
        public $args = array();
        /**
         * @var (int|false)[]
         */
        public $groups = array();
        /**
         * @var int
         */
        public $group = 0;
        /**
         * @param string|string[]|false $handles
         * @param int|false $group
         * @return string[]
         */
        public function do_items($handles = \false, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param int|false $group
         * @return bool
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * @param string|string[] $handles
         * @param bool $recursion
         * @param int|false $group
         * @return bool
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param string|false $src
         * @param string[] $deps
         * @param string|bool|null $ver
         * @param mixed $args
         * @return bool
         */
        public function add($handle, $src, $deps = array(), $ver = \false, $args = \null)
        {
        }
        /**
         * @param string $handle
         * @param string $key
         * @param mixed $value
         * @return bool
         */
        public function add_data($handle, $key, $value)
        {
        }
        /**
         * @param string $handle
         * @param string $key
         * @return mixed
         */
        public function get_data($handle, $key)
        {
        }
        /**
         * @param string|string[] $handles
         */
        public function remove($handles)
        {
        }
        /**
         * @param string|string[] $handles
         */
        public function enqueue($handles)
        {
        }
        /**
         * @param string|string[] $handles
         */
        public function dequeue($handles)
        {
        }
        /**
         * @param string[] $queue
         * @param string $handle
         * @return bool
         */
        protected function recurse_deps($queue, $handle)
        {
        }
        /**
         * @param string $handle
         * @param string $status
         * @return bool|\_WP_Dependency
         */
        public function query($handle, $status = 'registered')
        {
        }
        /**
         * @param string $handle
         * @param bool $recursion
         * @param int|false $group
         * @return bool
         */
        public function set_group($handle, $recursion, $group)
        {
        }
    }
    #[\AllowDynamicProperties]
    class _WP_Dependency
    {
        /**
         * @var string
         */
        public $handle;
        /**
         * @var string|false
         */
        public $src;
        /**
         * @var string[]
         */
        public $deps = array();
        /**
         * @var bool|string
         */
        public $ver = \false;
        /**
         * @var array
         */
        public $args = \null;
        // Custom property, such as $in_footer or $media.
        /**
         * @var array
         */
        public $extra = array();
        /**
         * @var string
         */
        public $textdomain;
        /**
         * @var string
         */
        public $translations_path;
        /**
         * @param mixed $args
         */
        public function __construct(...$args)
        {
        }
        /**
         * @param string $name
         * @param mixed $data
         * @return bool
         */
        public function add_data($name, $data)
        {
        }
        /**
         * @param string $domain
         * @param string $path
         * @return bool
         */
        public function set_translations($domain, $path = '')
        {
        }
    }
    class WP_Duotone
    {
        /**
         * @param array $preset
         * @return string
         */
        public static function get_filter_id_from_preset($preset)
        {
        }
        /**
         * @param array $preset
         * @return string
         */
        public static function get_filter_svg_from_preset($preset)
        {
        }
        /**
         * @param \WP_Block_Type $block_type
         */
        public static function register_duotone_support($block_type)
        {
        }
        /**
         * @param string $block_content
         * @param array $block
         * @param \WP_Block $wp_block
         * @return string
         */
        public static function render_duotone_support($block_content, $block, $wp_block)
        {
        }
        /**
         * @param string $block_content
         * @return string
         */
        public static function restore_image_outer_container($block_content)
        {
        }
        public static function output_block_styles()
        {
        }
        public static function output_global_styles()
        {
        }
        public static function output_footer_assets()
        {
        }
        /**
         * @param array $settings
         * @return array
         */
        public static function add_editor_settings($settings)
        {
        }
        /**
         * @param array $settings
         * @param array $metadata
         * @return array
         */
        public static function migrate_experimental_duotone_support_flag($settings, $metadata)
        {
        }
        /**
         * @param array $preset
         * @return string
         */
        public static function get_filter_css_property_value_from_preset($preset)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class _WP_Editors
    {
        public static $mce_locale;
        /**
         * @param string $editor_id
         * @phpstan-param array{
         *   wpautop?: bool,
         *   media_buttons?: bool,
         *   default_editor?: string,
         *   drag_drop_upload?: bool,
         *   textarea_name?: string,
         *   textarea_rows?: int,
         *   tabindex?: string|int,
         *   tabfocus_elements?: string,
         *   editor_css?: string,
         *   editor_class?: string,
         *   teeny?: bool,
         *   dfw?: bool,
         *   tinymce?: bool|array,
         *   quicktags?: bool|array,
         * } $settings
         * @return array
         */
        public static function parse_settings($editor_id, $settings)
        {
        }
        /**
         * @param string $content
         * @param string $editor_id
         * @param array $settings
         * @phpstan-param array{
         *   wpautop?: bool,
         *   media_buttons?: bool,
         *   default_editor?: string,
         *   drag_drop_upload?: bool,
         *   textarea_name?: string,
         *   textarea_rows?: int,
         *   tabindex?: string|int,
         *   tabfocus_elements?: string,
         *   editor_css?: string,
         *   editor_class?: string,
         *   teeny?: bool,
         *   dfw?: bool,
         *   tinymce?: bool|array,
         *   quicktags?: bool|array,
         * } $settings See _WP_Editors::parse_settings()
         */
        public static function editor($content, $editor_id, $settings = array())
        {
        }
        /**
         * @param string $editor_id
         * @param array $set
         */
        public static function editor_settings($editor_id, $set)
        {
        }
        /**
         * @param bool $default_scripts
         */
        public static function enqueue_scripts($default_scripts = \false)
        {
        }
        /**
         * @phpstan-return void
         */
        public static function enqueue_default_editor()
        {
        }
        public static function print_default_editor_scripts()
        {
        }
        /**
         * @return string
         */
        public static function get_mce_locale()
        {
        }
        /**
         * @return string
         */
        public static function get_baseurl()
        {
        }
        /**
         * @param string $mce_locale
         * @param bool $json_only
         * @return string
         */
        public static function wp_mce_translation($mce_locale = '', $json_only = \false)
        {
        }
        /**
         * @phpstan-return void
         */
        public static function force_uncompressed_tinymce()
        {
        }
        /**
         * @phpstan-return void
         */
        public static function print_tinymce_scripts()
        {
        }
        public static function editor_js()
        {
        }
        public static function wp_fullscreen_html()
        {
        }
        /**
         * @phpstan-param array{
         *   pagenum?: int,
         *   s?: string,
         * } $args
         * @phpstan-return false|array<int|string, array{
         *   ID: int,
         *   title: string,
         *   permalink: string,
         *   info: string,
         * }>
         */
        public static function wp_link_query($args = array())
        {
        }
        /**
         * @phpstan-return void
         */
        public static function wp_link_dialog()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Embed
    {
        public $handlers = array();
        public $post_ID;
        public $usecache = \true;
        public $linkifunknown = \true;
        public $last_attr = array();
        public $last_url = '';
        /**
         * @var bool
         */
        public $return_false_on_fail = \false;
        public function __construct()
        {
        }
        /**
         * @param string $content
         * @return string
         */
        public function run_shortcode($content)
        {
        }
        /**
         * @phpstan-return void
         */
        public function maybe_run_ajax_cache()
        {
        }
        /**
         * @param string $id
         * @param string $regex
         * @param callable $callback
         * @param int $priority
         */
        public function register_handler($id, $regex, $callback, $priority = 10)
        {
        }
        /**
         * @param string $id
         * @param int $priority
         */
        public function unregister_handler($id, $priority = 10)
        {
        }
        /**
         * @phpstan-param array{
         *   width?: int,
         *   height?: int,
         * } $attr
         * @param string $url
         * @return string|false
         */
        public function get_embed_handler_html($attr, $url)
        {
        }
        /**
         * @phpstan-param array{
         *   width?: int,
         *   height?: int,
         * } $attr
         * @param string $url
         * @return string|false
         */
        public function shortcode($attr, $url = '')
        {
        }
        /**
         * @param int $post_id
         * @phpstan-return void
         */
        public function delete_oembed_caches($post_id)
        {
        }
        /**
         * @param int $post_id
         * @phpstan-return void
         */
        public function cache_oembed($post_id)
        {
        }
        /**
         * @param string $content
         * @return string
         */
        public function autoembed($content)
        {
        }
        /**
         * @param array $matches
         * @return string
         */
        public function autoembed_callback($matches)
        {
        }
        /**
         * @param string $url
         * @return string|false
         */
        public function maybe_make_link($url)
        {
        }
        /**
         * @param string $cache_key
         * @return int|null
         */
        public function find_oembed_post_id($cache_key)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Error
    {
        /**
         * @var array
         */
        public $errors = array();
        /**
         * @var array
         */
        public $error_data = array();
        /**
         * @var array[]
         */
        protected $additional_data = array();
        /**
         * @param string|int $code
         * @param string $message
         * @param mixed $data
         * @phpstan-return void
         */
        public function __construct($code = '', $message = '', $data = '')
        {
        }
        /**
         * @return array
         */
        public function get_error_codes()
        {
        }
        /**
         * @return string|int
         */
        public function get_error_code()
        {
        }
        /**
         * @param string|int $code
         * @return string[]
         */
        public function get_error_messages($code = '')
        {
        }
        /**
         * @param string|int $code
         * @return string
         */
        public function get_error_message($code = '')
        {
        }
        /**
         * @param string|int $code
         * @return mixed
         */
        public function get_error_data($code = '')
        {
        }
        /**
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * @param string|int $code
         * @param string $message
         * @param mixed $data
         */
        public function add($code, $message, $data = '')
        {
        }
        /**
         * @param mixed $data
         * @param string|int $code
         */
        public function add_data($data, $code = '')
        {
        }
        /**
         * @param string|int $code
         * @return array
         */
        public function get_all_error_data($code = '')
        {
        }
        /**
         * @param string|int $code
         */
        public function remove($code)
        {
        }
        /**
         * @param \WP_Error $error
         */
        public function merge_from(\WP_Error $error)
        {
        }
        /**
         * @param \WP_Error $error
         */
        public function export_to(\WP_Error $error)
        {
        }
        /**
         * @param \WP_Error $from
         * @param \WP_Error $to
         */
        protected static function copy_errors(\WP_Error $from, \WP_Error $to)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Fatal_Error_Handler
    {
        /**
         * @phpstan-return void
         */
        public function handle()
        {
        }
        /**
         * @return array|null
         */
        protected function detect_error()
        {
        }
        /**
         * @param array $error
         * @return bool
         */
        protected function should_handle_error($error)
        {
        }
        /**
         * @param array $error
         * @param true|\WP_Error $handled
         * @phpstan-return void
         */
        protected function display_error_template($error, $handled)
        {
        }
        /**
         * @param array $error
         * @param true|\WP_Error $handled
         */
        protected function display_default_error_template($error, $handled)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Feed_Cache_Transient
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $mod_name;
        /**
         * @var int
         */
        public $lifetime = 43200;
        /**
         * @param string $location
         * @param string $filename
         * @param string $extension
         */
        public function __construct($location, $filename, $extension)
        {
        }
        /**
         * @param \SimplePie $data
         * @return true
         */
        public function save($data)
        {
        }
        /**
         * @return mixed
         */
        public function load()
        {
        }
        /**
         * @return mixed
         */
        public function mtime()
        {
        }
        /**
         * @return bool
         */
        public function touch()
        {
        }
        /**
         * @return true
         */
        public function unlink()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Feed_Cache extends \SimplePie_Cache
    {
        /**
         * @param string $location
         * @param string $filename
         * @param string $extension
         * @return \WP_Feed_Cache_Transient
         */
        public function create($location, $filename, $extension)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Hook implements \Iterator, \ArrayAccess
    {
        /**
         * @var array
         */
        public $callbacks = array();
        /**
         * @param string $hook_name
         * @param callable $callback
         * @param int $priority
         * @param int $accepted_args
         */
        public function add_filter($hook_name, $callback, $priority, $accepted_args)
        {
        }
        /**
         * @param string $hook_name
         * @param callable|string|array $callback
         * @param int $priority
         * @return bool
         */
        public function remove_filter($hook_name, $callback, $priority)
        {
        }
        /**
         * @param string $hook_name
         * @param callable|string|array|false $callback
         * @return bool|int
         */
        public function has_filter($hook_name = '', $callback = \false)
        {
        }
        /**
         * @return bool
         */
        public function has_filters()
        {
        }
        /**
         * @param int|false $priority
         * @phpstan-return void
         */
        public function remove_all_filters($priority = \false)
        {
        }
        /**
         * @param mixed $value
         * @param array $args
         * @return mixed
         */
        public function apply_filters($value, $args)
        {
        }
        /**
         * @param array $args
         */
        public function do_action($args)
        {
        }
        /**
         * @param array $args
         */
        public function do_all_hook(&$args)
        {
        }
        /**
         * @return int|false
         */
        public function current_priority()
        {
        }
        /**
         * @param array $filters
         * @return \WP_Hook[]
         */
        public static function build_preinitialized_hooks($filters)
        {
        }
        /**
         * @param mixed $offset
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param mixed $offset
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @param mixed $offset
         * @param mixed $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param mixed $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Http_Cookie
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $value;
        /**
         * @var string|int|null
         */
        public $expires;
        /**
         * @var string
         */
        public $path;
        /**
         * @var string
         */
        public $domain;
        /**
         * @var int|string
         */
        public $port;
        /**
         * @var bool
         */
        public $host_only;
        /**
         * @phpstan-param array{
         *   name?: string,
         *   value?: mixed,
         *   expires?: string|int|null,
         *   path?: string,
         *   domain?: string,
         *   port?: int|string,
         *   host_only?: bool,
         * } $data
         * @param string $requested_url
         * @phpstan-return void
         */
        public function __construct($data, $requested_url = '')
        {
        }
        /**
         * @param string $url
         * @return bool
         */
        public function test($url)
        {
        }
        /**
         * @return string
         */
        public function getHeaderValue()
        {
        }
        /**
         * @return string
         */
        public function getFullHeader()
        {
        }
        /**
         * @phpstan-return array{
         *   expires: string|int|null,
         *   path: string,
         *   domain: string,
         * }
         */
        public function get_attributes()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Http_Curl
    {
        /**
         * @param string $url
         * @param string|array $args
         * @return array|\WP_Error
         */
        public function request($url, $args = array())
        {
        }
        /**
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Http_Encoding
    {
        /**
         * @param string $raw
         * @param int $level
         * @param string $supports
         * @return string|false
         */
        public static function compress($raw, $level = 9, $supports = \null)
        {
        }
        /**
         * @param string $compressed
         * @param int $length
         * @return string|false
         */
        public static function decompress($compressed, $length = \null)
        {
        }
        /**
         * @param string $gz_data
         * @return string|false
         */
        public static function compatible_gzinflate($gz_data)
        {
        }
        /**
         * @param string $url
         * @param array $args
         * @return string
         */
        public static function accept_encoding($url, $args)
        {
        }
        /**
         * @return string
         */
        public static function content_encoding()
        {
        }
        /**
         * @param array|string $headers
         * @return bool
         */
        public static function should_decode($headers)
        {
        }
        /**
         * @return bool
         */
        public static function is_available()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_HTTP_IXR_Client extends \IXR_Client
    {
        public $scheme;
        /**
         * @var \IXR_Error
         */
        public $error;
        /**
         * @param string $server
         * @param string|false $path
         * @param int|false $port
         * @param int $timeout
         */
        public function __construct($server, $path = \false, $port = \false, $timeout = 15)
        {
        }
        /**
         * @return bool
         */
        public function query(...$args)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_HTTP_Proxy
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return bool
         */
        public function use_authentication()
        {
        }
        /**
         * @return string
         */
        public function host()
        {
        }
        /**
         * @return string
         */
        public function port()
        {
        }
        /**
         * @return string
         */
        public function username()
        {
        }
        /**
         * @return string
         */
        public function password()
        {
        }
        /**
         * @return string
         */
        public function authentication()
        {
        }
        /**
         * @return string
         */
        public function authentication_header()
        {
        }
        /**
         * @param string $uri
         * @return bool
         */
        public function send_through_proxy($uri)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_HTTP_Requests_Hooks extends \WpOrg\Requests\Hooks
    {
        /**
         * @var string
         */
        protected $url;
        /**
         * @var array
         */
        protected $request = array();
        /**
         * @param string $url
         * @param array $request
         */
        public function __construct($url, $request)
        {
        }
        /**
         * @param string $hook
         * @param array $parameters
         * @return bool
         */
        public function dispatch($hook, $parameters = array())
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_HTTP_Response
    {
        /**
         * @var mixed
         */
        public $data;
        /**
         * @var array
         */
        public $headers;
        /**
         * @var int
         */
        public $status;
        /**
         * @param mixed $data
         * @param int $status
         * @param array $headers
         */
        public function __construct($data = \null, $status = 200, $headers = array())
        {
        }
        /**
         * @return array
         */
        public function get_headers()
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $key
         * @param string $value
         * @param bool $replace
         */
        public function header($key, $value, $replace = \true)
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $code
         */
        public function set_status($code)
        {
        }
        /**
         * @return mixed
         */
        public function get_data()
        {
        }
        /**
         * @param mixed $data
         */
        public function set_data($data)
        {
        }
        /**
         * @return mixed
         */
        public function jsonSerialize()
        {
        }
    }
    class WP_HTTP_Requests_Response extends \WP_HTTP_Response
    {
        /**
         * @var \WpOrg\Requests\Response
         */
        protected $response;
        /**
         * @var string|null
         */
        protected $filename;
        /**
         * @param \WpOrg\Requests\Response $response
         * @param string $filename
         */
        public function __construct(\WpOrg\Requests\Response $response, $filename = '')
        {
        }
        /**
         * @return \WpOrg\Requests\Response
         */
        public function get_response_object()
        {
        }
        /**
         * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary
         */
        public function get_headers()
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $key
         * @param string $value
         * @param bool $replace
         */
        public function header($key, $value, $replace = \true)
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $code
         */
        public function set_status($code)
        {
        }
        /**
         * @return string
         */
        public function get_data()
        {
        }
        /**
         * @param string $data
         */
        public function set_data($data)
        {
        }
        /**
         * @return \WP_HTTP_Cookie[]
         */
        public function get_cookies()
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Http_Streams
    {
        /**
         * @param string $url
         * @param string|array $args
         * @return array|\WP_Error
         */
        public function request($url, $args = array())
        {
        }
        /**
         * @param resource $stream
         * @param string $host
         * @return bool
         */
        public static function verify_ssl_certificate($stream, $host)
        {
        }
        /**
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
    }
    class WP_HTTP_Fsockopen extends \WP_Http_Streams
    {
        // For backward compatibility for users who are using the class directly.
    }
    #[\AllowDynamicProperties]
    class WP_Http
    {
        // Aliases for HTTP response codes.
        const HTTP_CONTINUE = 100;
        const SWITCHING_PROTOCOLS = 101;
        const PROCESSING = 102;
        const EARLY_HINTS = 103;
        const OK = 200;
        const CREATED = 201;
        const ACCEPTED = 202;
        const NON_AUTHORITATIVE_INFORMATION = 203;
        const NO_CONTENT = 204;
        const RESET_CONTENT = 205;
        const PARTIAL_CONTENT = 206;
        const MULTI_STATUS = 207;
        const IM_USED = 226;
        const MULTIPLE_CHOICES = 300;
        const MOVED_PERMANENTLY = 301;
        const FOUND = 302;
        const SEE_OTHER = 303;
        const NOT_MODIFIED = 304;
        const USE_PROXY = 305;
        const RESERVED = 306;
        const TEMPORARY_REDIRECT = 307;
        const PERMANENT_REDIRECT = 308;
        const BAD_REQUEST = 400;
        const UNAUTHORIZED = 401;
        const PAYMENT_REQUIRED = 402;
        const FORBIDDEN = 403;
        const NOT_FOUND = 404;
        const METHOD_NOT_ALLOWED = 405;
        const NOT_ACCEPTABLE = 406;
        const PROXY_AUTHENTICATION_REQUIRED = 407;
        const REQUEST_TIMEOUT = 408;
        const CONFLICT = 409;
        const GONE = 410;
        const LENGTH_REQUIRED = 411;
        const PRECONDITION_FAILED = 412;
        const REQUEST_ENTITY_TOO_LARGE = 413;
        const REQUEST_URI_TOO_LONG = 414;
        const UNSUPPORTED_MEDIA_TYPE = 415;
        const REQUESTED_RANGE_NOT_SATISFIABLE = 416;
        const EXPECTATION_FAILED = 417;
        const IM_A_TEAPOT = 418;
        const MISDIRECTED_REQUEST = 421;
        const UNPROCESSABLE_ENTITY = 422;
        const LOCKED = 423;
        const FAILED_DEPENDENCY = 424;
        const TOO_EARLY = 425;
        const UPGRADE_REQUIRED = 426;
        const PRECONDITION_REQUIRED = 428;
        const TOO_MANY_REQUESTS = 429;
        const REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
        const UNAVAILABLE_FOR_LEGAL_REASONS = 451;
        const INTERNAL_SERVER_ERROR = 500;
        const NOT_IMPLEMENTED = 501;
        const BAD_GATEWAY = 502;
        const SERVICE_UNAVAILABLE = 503;
        const GATEWAY_TIMEOUT = 504;
        const HTTP_VERSION_NOT_SUPPORTED = 505;
        const VARIANT_ALSO_NEGOTIATES = 506;
        const INSUFFICIENT_STORAGE = 507;
        const NOT_EXTENDED = 510;
        const NETWORK_AUTHENTICATION_REQUIRED = 511;
        /**
         * @param string $url
         * @phpstan-param array{
         *   method?: string,
         *   timeout?: float,
         *   redirection?: int,
         *   httpversion?: string,
         *   user-agent?: string,
         *   reject_unsafe_urls?: bool,
         *   blocking?: bool,
         *   headers?: string|array,
         *   cookies?: array,
         *   body?: string|array,
         *   compress?: bool,
         *   decompress?: bool,
         *   sslverify?: bool,
         *   sslcertificates?: string,
         *   stream?: bool,
         *   filename?: string,
         *   limit_response_size?: int,
         * } $args
         * @return array|\WP_Error
         * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
         */
        public function request($url, $args = array())
        {
        }
        /**
         * @param array $cookies
         * @return \WpOrg\Requests\Cookie\Jar
         */
        public static function normalize_cookies($cookies)
        {
        }
        /**
         * @param string $location
         * @param array $headers
         * @param string|array $data
         * @param array $options
         * @param \WpOrg\Requests\Response $original
         */
        public static function browser_redirect_compatibility($location, $headers, $data, &$options, $original)
        {
        }
        /**
         * @param string $location
         */
        public static function validate_redirects($location)
        {
        }
        /**
         * @param array $args
         * @param string $url
         * @return string|false
         */
        public function _get_first_available_transport($args, $url = \null)
        {
        }
        /**
         * @param string $url
         * @param string|array $args
         * @return array|\WP_Error
         * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
         */
        public function post($url, $args = array())
        {
        }
        /**
         * @param string $url
         * @param string|array $args
         * @return array|\WP_Error
         * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
         */
        public function get($url, $args = array())
        {
        }
        /**
         * @param string $url
         * @param string|array $args
         * @return array|\WP_Error
         * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
         */
        public function head($url, $args = array())
        {
        }
        /**
         * @param string $response
         * @phpstan-return array{
         *   headers: string,
         *   body: string,
         * }
         */
        public static function processResponse($response)
        {
        }
        /**
         * @param string|array $headers
         * @param string $url
         * @phpstan-return array{
         *   response: array{
         *     code: int,
         *     message: string,
         *   },
         *   newheaders: array,
         *   cookies: WP_Http_Cookie[],
         * }
         */
        public static function processHeaders($headers, $url = '')
        {
        }
        /**
         * @param array $r
         */
        public static function buildCookieHeader(&$r)
        {
        }
        /**
         * @param string $body
         * @return string
         */
        public static function chunkTransferDecode($body)
        {
        }
        /**
         * @param string $uri
         * @return bool
         */
        public function block_request($uri)
        {
        }
        /**
         * @param string $url
         * @return bool|array
         */
        protected static function parse_url($url)
        {
        }
        /**
         * @param string $maybe_relative_path
         * @param string $url
         * @return string
         */
        public static function make_absolute_url($maybe_relative_path, $url)
        {
        }
        /**
         * @param string $url
         * @param array $args
         * @param array $response
         * @return array|false|\WP_Error
         */
        public static function handle_redirects($url, $args, $response)
        {
        }
        /**
         * @param string $maybe_ip
         * @return int|false
         */
        public static function is_ip_address($maybe_ip)
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_Image_Editor
    {
        protected $file = \null;
        protected $size = \null;
        protected $mime_type = \null;
        protected $output_mime_type = \null;
        protected $default_mime_type = 'image/jpeg';
        protected $quality = \false;
        // Deprecated since 5.8.1. See get_default_quality() below.
        protected $default_quality = 82;
        /**
         * @param string $file
         */
        public function __construct($file)
        {
        }
        /**
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public abstract function load();
        /**
         * @param string $destfilename
         * @param string $mime_type
         * @phpstan-return \WP_Error|array{
         *   path: string,
         *   file: string,
         *   width: int,
         *   height: int,
         *   mime-type: string,
         *   filesize: int,
         * }
         */
        public abstract function save($destfilename = \null, $mime_type = \null);
        /**
         * @param int|null $max_w
         * @param int|null $max_h
         * @phpstan-param bool|array{
         *   0: string,
         *   1: string,
         * } $crop
         * @return true|\WP_Error
         */
        public abstract function resize($max_w, $max_h, $crop = \false);
        /**
         * @phpstan-param array<int|string, array{
         *   width: int,
         *   height: int,
         *   crop?: bool|array,
         * }> $sizes
         * @return array
         */
        public abstract function multi_resize($sizes);
        /**
         * @param int $src_x
         * @param int $src_y
         * @param int $src_w
         * @param int $src_h
         * @param int $dst_w
         * @param int $dst_h
         * @param bool $src_abs
         * @return true|\WP_Error
         */
        public abstract function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false);
        /**
         * @param float $angle
         * @return true|\WP_Error
         */
        public abstract function rotate($angle);
        /**
         * @param bool $horz
         * @param bool $vert
         * @return true|\WP_Error
         */
        public abstract function flip($horz, $vert);
        /**
         * @param string $mime_type
         * @return true|\WP_Error
         */
        public abstract function stream($mime_type = \null);
        /**
         * @phpstan-return array{
         *   width: int,
         *   height: int,
         * }
         */
        public function get_size()
        {
        }
        /**
         * @param int $width
         * @param int $height
         * @return true
         */
        protected function update_size($width = \null, $height = \null)
        {
        }
        /**
         * @return int
         */
        public function get_quality()
        {
        }
        /**
         * @param int $quality
         * @return true|\WP_Error
         */
        public function set_quality($quality = \null)
        {
        }
        /**
         * @param string $mime_type
         * @return int
         */
        protected function get_default_quality($mime_type)
        {
        }
        /**
         * @param string $filename
         * @param string $mime_type
         * @return array
         */
        protected function get_output_format($filename = \null, $mime_type = \null)
        {
        }
        /**
         * @param string $suffix
         * @param string $dest_path
         * @param string $extension
         * @return string
         */
        public function generate_filename($suffix = \null, $dest_path = \null, $extension = \null)
        {
        }
        /**
         * @return string|false
         */
        public function get_suffix()
        {
        }
        /**
         * @return bool|\WP_Error
         */
        public function maybe_exif_rotate()
        {
        }
        /**
         * @param string $filename
         * @param callable $callback
         * @param array $arguments
         * @return bool
         */
        protected function make_image($filename, $callback, $arguments)
        {
        }
        /**
         * @param string $extension
         * @return string|false
         */
        protected static function get_mime_type($extension = \null)
        {
        }
        /**
         * @param string $mime_type
         * @return string|false
         */
        protected static function get_extension($mime_type = \null)
        {
        }
    }
    class WP_Image_Editor_GD extends \WP_Image_Editor
    {
        /**
         * @var resource|\GdImage
         */
        protected $image;
        public function __destruct()
        {
        }
        /**
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function load()
        {
        }
        /**
         * @param int $width
         * @param int $height
         * @return true
         */
        protected function update_size($width = \false, $height = \false)
        {
        }
        /**
         * @param int|null $max_w
         * @param int|null $max_h
         * @phpstan-param bool|array{
         *   0: string,
         *   1: string,
         * } $crop
         * @return true|\WP_Error
         */
        public function resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * @param int $max_w
         * @param int $max_h
         * @phpstan-param bool|array{
         *   0: string,
         *   1: string,
         * } $crop
         * @return resource|\GdImage|\WP_Error
         */
        protected function _resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   width?: int,
         *   height?: int,
         *   crop?: bool|array,
         * }> $sizes
         * @return array
         */
        public function multi_resize($sizes)
        {
        }
        /**
         * @phpstan-param array{
         *   width?: int,
         *   height?: int,
         *   crop?: bool|array,
         * } $size_data
         * @return array|\WP_Error
         */
        public function make_subsize($size_data)
        {
        }
        /**
         * @param int $src_x
         * @param int $src_y
         * @param int $src_w
         * @param int $src_h
         * @param int $dst_w
         * @param int $dst_h
         * @param bool $src_abs
         * @return true|\WP_Error
         */
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false)
        {
        }
        /**
         * @param float $angle
         * @return true|\WP_Error
         */
        public function rotate($angle)
        {
        }
        /**
         * @param bool $horz
         * @param bool $vert
         * @return true|\WP_Error
         */
        public function flip($horz, $vert)
        {
        }
        /**
         * @param string|null $destfilename
         * @param string|null $mime_type
         * @phpstan-return \WP_Error|array{
         *   path: string,
         *   file: string,
         *   width: int,
         *   height: int,
         *   mime-type: string,
         *   filesize: int,
         * }
         */
        public function save($destfilename = \null, $mime_type = \null)
        {
        }
        /**
         * @param resource|\GdImage $image
         * @param string|null $filename
         * @param string|null $mime_type
         * @phpstan-return \WP_Error|array{
         *   path: string,
         *   file: string,
         *   width: int,
         *   height: int,
         *   mime-type: string,
         *   filesize: int,
         * }
         */
        protected function _save($image, $filename = \null, $mime_type = \null)
        {
        }
        /**
         * @param string $mime_type
         * @return bool
         */
        public function stream($mime_type = \null)
        {
        }
        /**
         * @param string $filename
         * @param callable $callback
         * @param array $arguments
         * @return bool
         */
        protected function make_image($filename, $callback, $arguments)
        {
        }
    }
    class WP_Image_Editor_Imagick extends \WP_Image_Editor
    {
        /**
         * @var \Imagick
         */
        protected $image;
        public function __destruct()
        {
        }
        /**
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function load()
        {
        }
        /**
         * @param int $quality
         * @return true|\WP_Error
         */
        public function set_quality($quality = \null)
        {
        }
        /**
         * @param int $width
         * @param int $height
         * @return true|\WP_Error
         */
        protected function update_size($width = \null, $height = \null)
        {
        }
        /**
         * @return int|null
         */
        public static function set_imagick_time_limit()
        {
        }
        /**
         * @param int|null $max_w
         * @param int|null $max_h
         * @phpstan-param bool|array{
         *   0: string,
         *   1: string,
         * } $crop
         * @return true|\WP_Error
         */
        public function resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * @param int $dst_w
         * @param int $dst_h
         * @param string $filter_name
         * @param bool $strip_meta
         * @return void|\WP_Error
         */
        protected function thumbnail_image($dst_w, $dst_h, $filter_name = 'FILTER_TRIANGLE', $strip_meta = \true)
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   width?: int,
         *   height?: int,
         *   crop?: bool|array,
         * }> $sizes
         * @return array
         */
        public function multi_resize($sizes)
        {
        }
        /**
         * @phpstan-param array{
         *   width?: int,
         *   height?: int,
         *   crop?: bool|array,
         * } $size_data
         * @return array|\WP_Error
         */
        public function make_subsize($size_data)
        {
        }
        /**
         * @param int $src_x
         * @param int $src_y
         * @param int $src_w
         * @param int $src_h
         * @param int $dst_w
         * @param int $dst_h
         * @param bool $src_abs
         * @return true|\WP_Error
         */
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false)
        {
        }
        /**
         * @param float $angle
         * @return true|\WP_Error
         */
        public function rotate($angle)
        {
        }
        /**
         * @param bool $horz
         * @param bool $vert
         * @return true|\WP_Error
         */
        public function flip($horz, $vert)
        {
        }
        /**
         * @return bool|\WP_Error
         */
        public function maybe_exif_rotate()
        {
        }
        /**
         * @param string $destfilename
         * @param string $mime_type
         * @phpstan-return \WP_Error|array{
         *   path: string,
         *   file: string,
         *   width: int,
         *   height: int,
         *   mime-type: string,
         *   filesize: int,
         * }
         */
        public function save($destfilename = \null, $mime_type = \null)
        {
        }
        protected function remove_pdf_alpha_channel()
        {
        }
        /**
         * @param \Imagick $image
         * @param string $filename
         * @param string $mime_type
         * @phpstan-return \WP_Error|array{
         *   path: string,
         *   file: string,
         *   width: int,
         *   height: int,
         *   mime-type: string,
         *   filesize: int,
         * }
         */
        protected function _save($image, $filename = \null, $mime_type = \null)
        {
        }
        /**
         * @param string $mime_type
         * @return true|\WP_Error
         */
        public function stream($mime_type = \null)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function strip_meta()
        {
        }
        /**
         * @return string|\WP_Error
         */
        protected function pdf_setup()
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function pdf_load_source()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_List_Util
    {
        /**
         * @param array $input
         */
        public function __construct($input)
        {
        }
        /**
         * @return array
         */
        public function get_input()
        {
        }
        /**
         * @return array
         */
        public function get_output()
        {
        }
        /**
         * @param array $args
         * @param string $operator
         * @return array
         */
        public function filter($args = array(), $operator = 'AND')
        {
        }
        /**
         * @param int|string $field
         * @param int|string $index_key
         * @return array
         */
        public function pluck($field, $index_key = \null)
        {
        }
        /**
         * @param string|array $orderby
         * @phpstan-param 'ASC'|'DESC' $order
         * @param bool $preserve_keys
         * @return array
         */
        public function sort($orderby = array(), $order = 'ASC', $preserve_keys = \false)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Locale_Switcher
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        /**
         * @param string $locale
         * @param int|false $user_id
         * @return bool
         */
        public function switch_to_locale($locale, $user_id = \false)
        {
        }
        /**
         * @param int $user_id
         * @return bool
         */
        public function switch_to_user_locale($user_id)
        {
        }
        /**
         * @return string|false
         */
        public function restore_previous_locale()
        {
        }
        /**
         * @return string|false
         */
        public function restore_current_locale()
        {
        }
        /**
         * @return bool
         */
        public function is_switched()
        {
        }
        /**
         * @return string|false
         */
        public function get_switched_locale()
        {
        }
        /**
         * @return int|false
         */
        public function get_switched_user_id()
        {
        }
        /**
         * @param string $locale
         * @return string
         */
        public function filter_locale($locale)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Locale
    {
        /**
         * @var string[]
         */
        public $weekday = array();
        /**
         * @var string[]
         */
        public $weekday_initial = array();
        /**
         * @var string[]
         */
        public $weekday_abbrev = array();
        /**
         * @var string[]
         */
        public $month = array();
        /**
         * @var string[]
         */
        public $month_genitive = array();
        /**
         * @var string[]
         */
        public $month_abbrev = array();
        /**
         * @var string[]
         */
        public $meridiem = array();
        /**
         * @var string
         */
        public $text_direction = 'ltr';
        /**
         * @var array
         */
        public $number_format = array();
        /**
         * @var string
         */
        public $list_item_separator;
        /**
         * @var string
         */
        public $word_count_type;
        public function __construct()
        {
        }
        public function init()
        {
        }
        /**
         * @param int $weekday_number
         * @return string
         */
        public function get_weekday($weekday_number)
        {
        }
        /**
         * @param string $weekday_name
         * @return string
         */
        public function get_weekday_initial($weekday_name)
        {
        }
        /**
         * @param string $weekday_name
         * @return string
         */
        public function get_weekday_abbrev($weekday_name)
        {
        }
        /**
         * @param string|int $month_number
         * @return string
         */
        public function get_month($month_number)
        {
        }
        /**
         * @param string $month_name
         * @return string
         */
        public function get_month_abbrev($month_name)
        {
        }
        /**
         * @phpstan-param 'am'|'pm'|'AM'|'PM' $meridiem
         * @return string
         */
        public function get_meridiem($meridiem)
        {
        }
        public function register_globals()
        {
        }
        /**
         * @return bool
         */
        public function is_rtl()
        {
        }
        public function _strings_for_pot()
        {
        }
        /**
         * @return string
         */
        public function get_list_item_separator()
        {
        }
        /**
         * @return string
         */
        public function get_word_count_type()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_MatchesMapRegex
    {
        /**
         * @var string
         */
        public $output;
        /**
         * @var string
         */
        public $_pattern = '(\\$matches\\[[1-9]+[0-9]*\\])';
        // Magic number.
        /**
         * @param string $subject
         * @param array $matches
         */
        public function __construct($subject, $matches)
        {
        }
        /**
         * @param string $subject
         * @param array $matches
         * @return string
         */
        public static function apply($subject, $matches)
        {
        }
        /**
         * @param array $matches
         * @return string
         */
        public function callback($matches)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Meta_Query
    {
        /**
         * @var array
         */
        public $queries = array();
        /**
         * @var string
         */
        public $relation;
        /**
         * @var string
         */
        public $meta_table;
        /**
         * @var string
         */
        public $meta_id_column;
        /**
         * @var string
         */
        public $primary_table;
        /**
         * @var string
         */
        public $primary_id_column;
        /**
         * @var array
         */
        protected $table_aliases = array();
        /**
         * @var array
         */
        protected $clauses = array();
        /**
         * @var bool
         */
        protected $has_or_relation = \false;
        /**
         * @phpstan-return void
         */
        public function __construct($meta_query = \false)
        {
        }
        /**
         * @param array $queries
         * @return array
         */
        public function sanitize_query($queries)
        {
        }
        /**
         * @param array $query
         * @return bool
         */
        protected function is_first_order_clause($query)
        {
        }
        /**
         * @param array $qv
         */
        public function parse_query_vars($qv)
        {
        }
        /**
         * @param string $type
         * @return string
         */
        public function get_cast_for_type($type = '')
        {
        }
        /**
         * @param string $type
         * @param string $primary_table
         * @param string $primary_id_column
         * @param object $context
         * @phpstan-return false|array{
         *   join: string,
         *   where: string,
         * }
         */
        public function get_sql($type, $primary_table, $primary_id_column, $context = \null)
        {
        }
        /**
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * @param array $query
         * @param int $depth
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_for_query(&$query, $depth = 0)
        {
        }
        /**
         * @param array $clause
         * @param array $parent_query
         * @param string $clause_key
         * @phpstan-return array{
         *   join: string[],
         *   where: string[],
         * }
         */
        public function get_sql_for_clause(&$clause, $parent_query, $clause_key = '')
        {
        }
        /**
         * @return array
         */
        public function get_clauses()
        {
        }
        /**
         * @param array $clause
         * @param array $parent_query
         * @return string|false
         */
        protected function find_compatible_table_alias($clause, $parent_query)
        {
        }
        /**
         * @return bool
         */
        public function has_or_relation()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Metadata_Lazyloader
    {
        /**
         * @var array
         */
        protected $pending_objects;
        /**
         * @var array
         */
        protected $settings = array();
        public function __construct()
        {
        }
        /**
         * @phpstan-param 'term'|'comment' $object_type
         * @param array $object_ids
         * @return void|\WP_Error
         */
        public function queue_objects($object_type, $object_ids)
        {
        }
        /**
         * @phpstan-param 'comment'|'term' $object_type
         * @return void|\WP_Error
         */
        public function reset_queue($object_type)
        {
        }
        /**
         * @param mixed $check
         * @return mixed
         */
        public function lazyload_term_meta($check)
        {
        }
        /**
         * @param mixed $check
         * @return mixed
         */
        public function lazyload_comment_meta($check)
        {
        }
        /**
         * @param mixed $check
         * @param int $object_id
         * @param string $meta_key
         * @param bool $single
         * @param string $meta_type
         * @return mixed
         */
        public function lazyload_meta_callback($check, $object_id, $meta_key, $single, $meta_type)
        {
        }
    }
    class WP_Navigation_Fallback
    {
        /**
         * @param array $schema
         * @return array
         */
        public static function update_wp_navigation_post_schema($schema)
        {
        }
        /**
         * @return \WP_Post|null
         */
        public static function get_fallback()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Network_Query
    {
        /**
         * @var string
         */
        public $request;
        /**
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * @var array
         */
        public $query_vars;
        /**
         * @var array
         */
        public $query_var_defaults;
        /**
         * @var array
         */
        public $networks;
        /**
         * @var int
         */
        public $found_networks = 0;
        /**
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * @phpstan-param array{
         *   network__in?: int[],
         *   network__not_in?: int[],
         *   count?: bool,
         *   fields?: string,
         *   number?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   domain?: string,
         *   domain__in?: string[],
         *   domain__not_in?: string[],
         *   path?: string,
         *   path__in?: string[],
         *   path__not_in?: string[],
         *   search?: string,
         *   update_network_cache?: bool,
         * } $query
         */
        public function __construct($query = '')
        {
        }
        /**
         * @param string|array $query
         * @phpstan-param array{
         *   network__in?: int[],
         *   network__not_in?: int[],
         *   count?: bool,
         *   fields?: string,
         *   number?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   domain?: string,
         *   domain__in?: string[],
         *   domain__not_in?: string[],
         *   path?: string,
         *   path__in?: string[],
         *   path__not_in?: string[],
         *   search?: string,
         *   update_network_cache?: bool,
         * } $query See WP_Network_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * @param string|array $query
         * @return array|int
         */
        public function query($query)
        {
        }
        /**
         * @return array|int
         */
        public function get_networks()
        {
        }
        /**
         * @return int|array
         */
        protected function get_network_ids()
        {
        }
        /**
         * @param string $search
         * @param string[] $columns
         * @return string
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * @param string $orderby
         * @return string|false
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Network
    {
        /**
         * @var string
         */
        public $domain = '';
        /**
         * @var string
         */
        public $path = '';
        /**
         * @var string
         */
        public $cookie_domain = '';
        /**
         * @var string
         */
        public $site_name = '';
        /**
         * @param int $network_id
         * @return \WP_Network|false
         */
        public static function get_instance($network_id)
        {
        }
        /**
         * @param \WP_Network|object $network
         */
        public function __construct($network)
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $domain
         * @param string $path
         * @param int|null $segments
         * @return \WP_Network|false
         */
        public static function get_by_path($domain = '', $path = '', $segments = \null)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Object_Cache
    {
        /**
         * @var int
         */
        public $cache_hits = 0;
        /**
         * @var int
         */
        public $cache_misses = 0;
        /**
         * @var string[]
         */
        protected $global_groups = array();
        public function __construct()
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @return mixed
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        /**
         * @param int|string $key
         * @return bool
         */
        protected function is_valid_key($key)
        {
        }
        /**
         * @param int|string $key
         * @param string $group
         * @return bool
         */
        protected function _exists($key, $group)
        {
        }
        /**
         * @param int|string $key
         * @param mixed $data
         * @param string $group
         * @param int $expire
         * @return bool
         */
        public function add($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * @param array $data
         * @param string $group
         * @param int $expire
         * @return bool[]
         */
        public function add_multiple(array $data, $group = '', $expire = 0)
        {
        }
        /**
         * @param int|string $key
         * @param mixed $data
         * @param string $group
         * @param int $expire
         * @return bool
         */
        public function replace($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * @param int|string $key
         * @param mixed $data
         * @param string $group
         * @param int $expire
         * @return bool
         */
        public function set($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * @param array $data
         * @param string $group
         * @param int $expire
         * @return bool[]
         */
        public function set_multiple(array $data, $group = '', $expire = 0)
        {
        }
        /**
         * @param int|string $key
         * @param string $group
         * @param bool $force
         * @param bool $found
         * @return mixed|false
         */
        public function get($key, $group = 'default', $force = \false, &$found = \null)
        {
        }
        /**
         * @param array $keys
         * @param string $group
         * @param bool $force
         * @return array
         */
        public function get_multiple($keys, $group = 'default', $force = \false)
        {
        }
        /**
         * @param int|string $key
         * @param string $group
         * @param bool $deprecated
         * @return bool
         */
        public function delete($key, $group = 'default', $deprecated = \false)
        {
        }
        /**
         * @param array $keys
         * @param string $group
         * @return bool[]
         */
        public function delete_multiple(array $keys, $group = '')
        {
        }
        /**
         * @param int|string $key
         * @param int $offset
         * @param string $group
         * @return int|false
         */
        public function incr($key, $offset = 1, $group = 'default')
        {
        }
        /**
         * @param int|string $key
         * @param int $offset
         * @param string $group
         * @return int|false
         */
        public function decr($key, $offset = 1, $group = 'default')
        {
        }
        /**
         * @return true
         */
        public function flush()
        {
        }
        /**
         * @param string $group
         * @return true
         */
        public function flush_group($group)
        {
        }
        /**
         * @param string|string[] $groups
         */
        public function add_global_groups($groups)
        {
        }
        /**
         * @param int $blog_id
         */
        public function switch_to_blog($blog_id)
        {
        }
        public function reset()
        {
        }
        public function stats()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_oEmbed_Controller
    {
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function get_proxy_item_permissions_check()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object|\WP_Error
         */
        public function get_proxy_item($request)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_oEmbed
    {
        /**
         * @var array
         */
        public $providers = array();
        /**
         * @var array
         */
        public static $early_providers = array();
        public function __construct()
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|false
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @param string $url
         * @phpstan-param array{
         *   discover?: bool,
         * } $args
         * @return string|false
         */
        public function get_provider($url, $args = '')
        {
        }
        /**
         * @param string $format
         * @param string $provider
         * @param bool $regex
         */
        public static function _add_provider_early($format, $provider, $regex = \false)
        {
        }
        /**
         * @param string $format
         */
        public static function _remove_provider_early($format)
        {
        }
        /**
         * @param string $url
         * @param string|array $args
         * @return object|false
         * @phpstan-param array{
         *   width?: int|string,
         *   height?: int|string,
         *   discover?: bool,
         * } $args See wp_oembed_get()
         */
        public function get_data($url, $args = '')
        {
        }
        /**
         * @param string $url
         * @param string|array $args
         * @return string|false
         * @phpstan-param array{
         *   width?: int|string,
         *   height?: int|string,
         *   discover?: bool,
         * } $args See wp_oembed_get()
         */
        public function get_html($url, $args = '')
        {
        }
        /**
         * @param string $url
         * @return string|false
         */
        public function discover($url)
        {
        }
        /**
         * @param string $provider
         * @param string $url
         * @param string|array $args
         * @return object|false
         * @phpstan-param array{
         *   width?: int|string,
         *   height?: int|string,
         *   discover?: bool,
         * } $args See wp_oembed_get()
         */
        public function fetch($provider, $url, $args = '')
        {
        }
        /**
         * @param object $data
         * @param string $url
         * @return string|false
         */
        public function data2html($data, $url)
        {
        }
        /**
         * @param string $html
         * @param object $data
         * @param string $url
         * @return string
         */
        public function _strip_newlines($html, $data, $url)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Paused_Extensions_Storage
    {
        /**
         * @var string
         */
        protected $type;
        /**
         * @phpstan-param 'plugin'|'theme' $extension_type
         */
        public function __construct($extension_type)
        {
        }
        /**
         * @param string $extension
         * @phpstan-param array{
         *   type?: int,
         *   file?: string,
         *   line?: int,
         *   message?: string,
         * } $error
         * @return bool
         */
        public function set($extension, $error)
        {
        }
        /**
         * @param string $extension
         * @return bool
         */
        public function delete($extension)
        {
        }
        /**
         * @param string $extension
         * @return array|null
         */
        public function get($extension)
        {
        }
        /**
         * @phpstan-return array<int|string, array>
         */
        public function get_all()
        {
        }
        /**
         * @return bool
         */
        public function delete_all()
        {
        }
        /**
         * @return bool
         */
        protected function is_api_loaded()
        {
        }
        /**
         * @return string
         */
        protected function get_option_name()
        {
        }
    }
    class WP_Plugin_Dependencies
    {
        /**
         * @var array
         */
        protected static $plugins;
        /**
         * @var array
         */
        protected static $plugin_dirnames;
        /**
         * @var array
         */
        protected static $dependencies;
        /**
         * @var array
         */
        protected static $dependency_slugs;
        /**
         * @var array
         */
        protected static $dependent_slugs;
        /**
         * @var array
         */
        protected static $dependency_api_data;
        /**
         * @var string[]
         */
        protected static $dependency_filepaths;
        /**
         * @var array[]
         */
        protected static $circular_dependencies_pairs;
        /**
         * @var string[]
         */
        protected static $circular_dependencies_slugs;
        /**
         * @var bool
         */
        protected static $initialized = \false;
        public static function initialize()
        {
        }
        /**
         * @param string $plugin_file
         * @return bool
         */
        public static function has_dependents($plugin_file)
        {
        }
        /**
         * @param string $plugin_file
         * @return bool
         */
        public static function has_dependencies($plugin_file)
        {
        }
        /**
         * @param string $plugin_file
         * @return bool
         */
        public static function has_active_dependents($plugin_file)
        {
        }
        /**
         * @param string $slug
         * @return array
         */
        public static function get_dependents($slug)
        {
        }
        /**
         * @param string $plugin_file
         * @return array
         */
        public static function get_dependencies($plugin_file)
        {
        }
        /**
         * @param string $slug
         * @return string|false
         */
        public static function get_dependent_filepath($slug)
        {
        }
        /**
         * @param string $plugin_file
         * @return bool
         */
        public static function has_unmet_dependencies($plugin_file)
        {
        }
        /**
         * @param string $plugin_file
         * @return bool
         */
        public static function has_circular_dependency($plugin_file)
        {
        }
        /**
         * @param string $plugin_file
         * @return array
         */
        public static function get_dependent_names($plugin_file)
        {
        }
        /**
         * @param string $plugin_file
         * @return array
         */
        public static function get_dependency_names($plugin_file)
        {
        }
        /**
         * @param string $slug
         * @return string|false
         */
        public static function get_dependency_filepath($slug)
        {
        }
        /**
         * @param string $slug
         * @return array|false
         */
        public static function get_dependency_data($slug)
        {
        }
        public static function display_admin_notice_for_unmet_dependencies()
        {
        }
        public static function display_admin_notice_for_circular_dependencies()
        {
        }
        public static function check_plugin_dependencies_during_ajax()
        {
        }
        /**
         * @return array
         */
        protected static function get_plugins()
        {
        }
        protected static function read_dependencies_from_plugin_headers()
        {
        }
        /**
         * @param string $slugs
         * @return array
         */
        protected static function sanitize_dependency_slugs($slugs)
        {
        }
        /**
         * @return array
         */
        protected static function get_dependency_filepaths()
        {
        }
        /**
         * @return array|void
         */
        protected static function get_dependency_api_data()
        {
        }
        /**
         * @return array
         */
        protected static function get_plugin_dirnames()
        {
        }
        /**
         * @return array[]
         */
        protected static function get_circular_dependencies()
        {
        }
        /**
         * @param array $dependents
         * @param array $dependencies
         * @return array
         */
        protected static function check_for_circular_dependencies($dependents, $dependencies)
        {
        }
        /**
         * @param string $plugin_file
         * @return string
         */
        protected static function convert_to_slug($plugin_file)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Post_Type
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $label;
        /**
         * @var \stdClass
         */
        public $labels;
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var bool
         */
        public $public = \false;
        /**
         * @var bool
         */
        public $hierarchical = \false;
        /**
         * @var bool
         */
        public $exclude_from_search = \null;
        /**
         * @var bool
         */
        public $publicly_queryable = \null;
        /**
         * @var bool
         */
        public $show_ui = \null;
        /**
         * @var bool|string
         */
        public $show_in_menu = \null;
        /**
         * @var bool
         */
        public $show_in_nav_menus = \null;
        /**
         * @var bool
         */
        public $show_in_admin_bar = \null;
        /**
         * @var int
         */
        public $menu_position = \null;
        /**
         * @var string
         */
        public $menu_icon = \null;
        /**
         * @var string
         */
        public $capability_type = 'post';
        /**
         * @var bool
         */
        public $map_meta_cap = \false;
        /**
         * @var callable
         */
        public $register_meta_box_cb = \null;
        /**
         * @var string[]
         */
        public $taxonomies = array();
        /**
         * @var bool|string
         */
        public $has_archive = \false;
        /**
         * @var string|bool
         */
        public $query_var;
        /**
         * @var bool
         */
        public $can_export = \true;
        /**
         * @var bool
         */
        public $delete_with_user = \null;
        /**
         * @var array[]
         */
        public $template = array();
        /**
         * @var string|false
         */
        public $template_lock = \false;
        /**
         * @var bool
         */
        public $_builtin = \false;
        /**
         * @var string
         */
        public $_edit_link = 'post.php?post=%d';
        /**
         * @var \stdClass
         */
        public $cap;
        /**
         * @var array|false
         */
        public $rewrite;
        /**
         * @var array|bool
         */
        public $supports;
        /**
         * @var bool
         */
        public $show_in_rest;
        /**
         * @var string|bool
         */
        public $rest_base;
        /**
         * @var string|bool
         */
        public $rest_namespace;
        /**
         * @var string|bool
         */
        public $rest_controller_class;
        /**
         * @var \WP_REST_Controller
         */
        public $rest_controller;
        /**
         * @var string|bool
         */
        public $revisions_rest_controller_class;
        /**
         * @var \WP_REST_Controller
         */
        public $revisions_rest_controller;
        /**
         * @var string|bool
         */
        public $autosave_rest_controller_class;
        /**
         * @var \WP_REST_Controller
         */
        public $autosave_rest_controller;
        /**
         * @var bool
         */
        public $late_route_registration;
        /**
         * @param string $post_type
         * @param array|string $args
         * @phpstan-param array{
         *   label?: string,
         *   labels?: string[],
         *   description?: string,
         *   public?: bool,
         *   hierarchical?: bool,
         *   exclude_from_search?: bool,
         *   publicly_queryable?: bool,
         *   show_ui?: bool,
         *   show_in_menu?: bool|string,
         *   show_in_nav_menus?: bool,
         *   show_in_admin_bar?: bool,
         *   show_in_rest?: bool,
         *   rest_base?: string,
         *   rest_namespace?: string,
         *   rest_controller_class?: string,
         *   autosave_rest_controller_class?: string|bool,
         *   revisions_rest_controller_class?: string|bool,
         *   late_route_registration?: bool,
         *   menu_position?: int,
         *   menu_icon?: string,
         *   capability_type?: string|array,
         *   capabilities?: string[],
         *   map_meta_cap?: bool,
         *   supports?: array|false,
         *   register_meta_box_cb?: callable,
         *   taxonomies?: string[],
         *   has_archive?: bool|string,
         *   rewrite?: bool|array{
         *     slug?: string,
         *     with_front?: bool,
         *     feeds?: bool,
         *     pages?: bool,
         *     ep_mask?: int,
         *   },
         *   query_var?: string|bool,
         *   can_export?: bool,
         *   delete_with_user?: bool,
         *   template?: array,
         *   template_lock?: string|false,
         *   _builtin?: bool,
         *   _edit_link?: string,
         * } $args See register_post_type()
         */
        public function __construct($post_type, $args = array())
        {
        }
        /**
         * @param array|string $args
         */
        public function set_props($args)
        {
        }
        public function add_supports()
        {
        }
        public function add_rewrite_rules()
        {
        }
        public function register_meta_boxes()
        {
        }
        public function add_hooks()
        {
        }
        public function register_taxonomies()
        {
        }
        public function remove_supports()
        {
        }
        public function remove_rewrite_rules()
        {
        }
        public function unregister_meta_boxes()
        {
        }
        public function unregister_taxonomies()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * @return \WP_REST_Controller|null
         */
        public function get_rest_controller()
        {
        }
        /**
         * @return \WP_REST_Controller|null
         */
        public function get_revisions_rest_controller()
        {
        }
        /**
         * @return \WP_REST_Controller|null
         */
        public function get_autosave_rest_controller()
        {
        }
        /**
         * @return (string|null)[][]
         */
        public static function get_default_labels()
        {
        }
        public static function reset_default_labels()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Post
    {
        /**
         * @var int
         */
        public $ID;
        /**
         * @var string
         */
        public $post_author = 0;
        /**
         * @var string
         */
        public $post_date = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $post_date_gmt = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $post_content = '';
        /**
         * @var string
         */
        public $post_title = '';
        /**
         * @var string
         */
        public $post_excerpt = '';
        /**
         * @var string
         */
        public $post_status = 'publish';
        /**
         * @var string
         */
        public $comment_status = 'open';
        /**
         * @var string
         */
        public $ping_status = 'open';
        /**
         * @var string
         */
        public $post_password = '';
        /**
         * @var string
         */
        public $post_name = '';
        /**
         * @var string
         */
        public $to_ping = '';
        /**
         * @var string
         */
        public $pinged = '';
        /**
         * @var string
         */
        public $post_modified = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $post_modified_gmt = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $post_content_filtered = '';
        /**
         * @var int
         */
        public $post_parent = 0;
        /**
         * @var string
         */
        public $guid = '';
        /**
         * @var int
         */
        public $menu_order = 0;
        /**
         * @var string
         */
        public $post_type = 'post';
        /**
         * @var string
         */
        public $post_mime_type = '';
        /**
         * @var string
         */
        public $comment_count = 0;
        /**
         * @var string
         */
        public $filter;
        /**
         * @param int $post_id
         * @return \WP_Post|false
         */
        public static function get_instance($post_id)
        {
        }
        /**
         * @param \WP_Post|object $post
         */
        public function __construct($post)
        {
        }
        /**
         * @param string $key
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $filter
         * @return \WP_Post
         */
        public function filter($filter)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Query
    {
        /**
         * @var array
         */
        public $query;
        /**
         * @var array
         */
        public $query_vars = array();
        /**
         * @var \WP_Tax_Query|null
         */
        public $tax_query;
        /**
         * @var \WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * @var \WP_Date_Query
         */
        public $date_query = \false;
        /**
         * @var \WP_Term|\WP_Post_Type|\WP_Post|\WP_User|null
         */
        public $queried_object;
        /**
         * @var int
         */
        public $queried_object_id;
        /**
         * @var string
         */
        public $request;
        /**
         * @var \WP_Post[]|int[]
         */
        public $posts;
        /**
         * @var int
         */
        public $post_count = 0;
        /**
         * @var int
         */
        public $current_post = -1;
        /**
         * @var bool
         */
        public $before_loop = \true;
        /**
         * @var bool
         */
        public $in_the_loop = \false;
        /**
         * @var \WP_Post|null
         */
        public $post;
        /**
         * @var \WP_Comment[]
         */
        public $comments;
        /**
         * @var int
         */
        public $comment_count = 0;
        /**
         * @var int
         */
        public $current_comment = -1;
        /**
         * @var \WP_Comment
         */
        public $comment;
        /**
         * @var int
         */
        public $found_posts = 0;
        /**
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * @var int
         */
        public $max_num_comment_pages = 0;
        /**
         * @var bool
         */
        public $is_single = \false;
        /**
         * @var bool
         */
        public $is_preview = \false;
        /**
         * @var bool
         */
        public $is_page = \false;
        /**
         * @var bool
         */
        public $is_archive = \false;
        /**
         * @var bool
         */
        public $is_date = \false;
        /**
         * @var bool
         */
        public $is_year = \false;
        /**
         * @var bool
         */
        public $is_month = \false;
        /**
         * @var bool
         */
        public $is_day = \false;
        /**
         * @var bool
         */
        public $is_time = \false;
        /**
         * @var bool
         */
        public $is_author = \false;
        /**
         * @var bool
         */
        public $is_category = \false;
        /**
         * @var bool
         */
        public $is_tag = \false;
        /**
         * @var bool
         */
        public $is_tax = \false;
        /**
         * @var bool
         */
        public $is_search = \false;
        /**
         * @var bool
         */
        public $is_feed = \false;
        /**
         * @var bool
         */
        public $is_comment_feed = \false;
        /**
         * @var bool
         */
        public $is_trackback = \false;
        /**
         * @var bool
         */
        public $is_home = \false;
        /**
         * @var bool
         */
        public $is_privacy_policy = \false;
        /**
         * @var bool
         */
        public $is_404 = \false;
        /**
         * @var bool
         */
        public $is_embed = \false;
        /**
         * @var bool
         */
        public $is_paged = \false;
        /**
         * @var bool
         */
        public $is_admin = \false;
        /**
         * @var bool
         */
        public $is_attachment = \false;
        /**
         * @var bool
         */
        public $is_singular = \false;
        /**
         * @var bool
         */
        public $is_robots = \false;
        /**
         * @var bool
         */
        public $is_favicon = \false;
        /**
         * @var bool
         */
        public $is_posts_page = \false;
        /**
         * @var bool
         */
        public $is_post_type_archive = \false;
        /**
         * @var bool
         */
        public $thumbnails_cached = \false;
        /**
         * @var bool
         */
        protected $allow_query_attachment_by_filename = \false;
        public function init()
        {
        }
        public function parse_query_vars()
        {
        }
        /**
         * @param array $query_vars
         * @return array
         */
        public function fill_query_vars($query_vars)
        {
        }
        /**
         * @phpstan-param array{
         *   attachment_id?: int,
         *   author?: int|string,
         *   author_name?: string,
         *   author__in?: int[],
         *   author__not_in?: int[],
         *   cache_results?: bool,
         *   cat?: int|string,
         *   category__and?: int[],
         *   category__in?: int[],
         *   category__not_in?: int[],
         *   category_name?: string,
         *   comment_count?: array|int,
         *   comment_status?: string,
         *   comments_per_page?: int,
         *   date_query?: array,
         *   day?: int,
         *   exact?: bool,
         *   fields?: string,
         *   hour?: int,
         *   ignore_sticky_posts?: int|bool,
         *   m?: int,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         *   menu_order?: int,
         *   minute?: int,
         *   monthnum?: int,
         *   name?: string,
         *   nopaging?: bool,
         *   no_found_rows?: bool,
         *   offset?: int,
         *   order?: string,
         *   orderby?: string|array,
         *   p?: int,
         *   page?: int,
         *   paged?: int,
         *   page_id?: int,
         *   pagename?: string,
         *   perm?: string,
         *   ping_status?: string,
         *   post__in?: int[],
         *   post__not_in?: int[],
         *   post_mime_type?: string,
         *   post_name__in?: string[],
         *   post_parent?: int,
         *   post_parent__in?: int[],
         *   post_parent__not_in?: int[],
         *   post_type?: string|string[],
         *   post_status?: string|string[],
         *   posts_per_page?: int,
         *   posts_per_archive_page?: int,
         *   s?: string,
         *   search_columns?: string[],
         *   second?: int,
         *   sentence?: bool,
         *   suppress_filters?: bool,
         *   tag?: string,
         *   tag__and?: int[],
         *   tag__in?: int[],
         *   tag__not_in?: int[],
         *   tag_id?: int,
         *   tag_slug__and?: string[],
         *   tag_slug__in?: string[],
         *   tax_query?: array,
         *   title?: string,
         *   update_post_meta_cache?: bool,
         *   update_post_term_cache?: bool,
         *   update_menu_item_cache?: bool,
         *   lazy_load_term_meta?: bool,
         *   w?: int,
         *   year?: int,
         * } $query
         */
        public function parse_query($query = '')
        {
        }
        /**
         * @param array $q
         */
        public function parse_tax_query(&$q)
        {
        }
        /**
         * @param array $q
         * @return string
         */
        protected function parse_search(&$q)
        {
        }
        /**
         * @param string[] $terms
         * @return string[]
         */
        protected function parse_search_terms($terms)
        {
        }
        /**
         * @return string[]
         */
        protected function get_search_stopwords()
        {
        }
        /**
         * @param array $q
         * @return string
         */
        protected function parse_search_order(&$q)
        {
        }
        /**
         * @param string $orderby
         * @return string|false
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
        public function set_404()
        {
        }
        /**
         * @param string $query_var
         * @param mixed $default_value
         * @return mixed
         */
        public function get($query_var, $default_value = '')
        {
        }
        /**
         * @param string $query_var
         * @param mixed $value
         */
        public function set($query_var, $value)
        {
        }
        /**
         * @return \WP_Post[]|int[]
         */
        public function get_posts()
        {
        }
        /**
         * @return \WP_Post
         */
        public function next_post()
        {
        }
        public function the_post()
        {
        }
        /**
         * @return bool
         * @phpstan-impure
         */
        public function have_posts()
        {
        }
        public function rewind_posts()
        {
        }
        /**
         * @return \WP_Comment
         */
        public function next_comment()
        {
        }
        public function the_comment()
        {
        }
        /**
         * @return bool
         */
        public function have_comments()
        {
        }
        public function rewind_comments()
        {
        }
        /**
         * @param string|array $query
         * @return \WP_Post[]|int[]
         */
        public function query($query)
        {
        }
        /**
         * @return \WP_Term|\WP_Post_Type|\WP_Post|\WP_User|null
         */
        public function get_queried_object()
        {
        }
        /**
         * @return int
         */
        public function get_queried_object_id()
        {
        }
        /**
         * @param string|array $query
         */
        public function __construct($query = '')
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|false
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @return bool
         */
        public function is_archive()
        {
        }
        /**
         * @param string|string[] $post_types
         * @return bool
         */
        public function is_post_type_archive($post_types = '')
        {
        }
        /**
         * @param int|string|int[]|string[] $attachment
         * @return bool
         */
        public function is_attachment($attachment = '')
        {
        }
        /**
         * @param int|string|int[]|string[] $author
         * @return bool
         */
        public function is_author($author = '')
        {
        }
        /**
         * @param int|string|int[]|string[] $category
         * @return bool
         */
        public function is_category($category = '')
        {
        }
        /**
         * @param int|string|int[]|string[] $tag
         * @return bool
         */
        public function is_tag($tag = '')
        {
        }
        /**
         * @param string|string[] $taxonomy
         * @param int|string|int[]|string[] $term
         * @return bool
         */
        public function is_tax($taxonomy = '', $term = '')
        {
        }
        /**
         * @return false
         */
        public function is_comments_popup()
        {
        }
        /**
         * @return bool
         */
        public function is_date()
        {
        }
        /**
         * @return bool
         */
        public function is_day()
        {
        }
        /**
         * @param string|string[] $feeds
         * @return bool
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * @return bool
         */
        public function is_comment_feed()
        {
        }
        /**
         * @return bool
         */
        public function is_front_page()
        {
        }
        /**
         * @return bool
         */
        public function is_home()
        {
        }
        /**
         * @return bool
         */
        public function is_privacy_policy()
        {
        }
        /**
         * @return bool
         */
        public function is_month()
        {
        }
        /**
         * @param int|string|int[]|string[] $page
         * @return bool
         */
        public function is_page($page = '')
        {
        }
        /**
         * @return bool
         */
        public function is_paged()
        {
        }
        /**
         * @return bool
         */
        public function is_preview()
        {
        }
        /**
         * @return bool
         */
        public function is_robots()
        {
        }
        /**
         * @return bool
         */
        public function is_favicon()
        {
        }
        /**
         * @return bool
         */
        public function is_search()
        {
        }
        /**
         * @param int|string|int[]|string[] $post
         * @return bool
         */
        public function is_single($post = '')
        {
        }
        /**
         * @param string|string[] $post_types
         * @return bool
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * @return bool
         */
        public function is_time()
        {
        }
        /**
         * @return bool
         */
        public function is_trackback()
        {
        }
        /**
         * @return bool
         */
        public function is_year()
        {
        }
        /**
         * @return bool
         */
        public function is_404()
        {
        }
        /**
         * @return bool
         */
        public function is_embed()
        {
        }
        /**
         * @return bool
         */
        public function is_main_query()
        {
        }
        /**
         * @param \WP_Post|object|int $post
         * @return true
         */
        public function setup_postdata($post)
        {
        }
        /**
         * @param \WP_Post|object|int $post
         * @return array|false
         */
        public function generate_postdata($post)
        {
        }
        /**
         * @param array $args
         * @param string $sql
         * @return string
         */
        protected function generate_cache_key(array $args, $sql)
        {
        }
        public function reset_postdata()
        {
        }
        /**
         * @param mixed $check
         * @param int $term_id
         * @return mixed
         */
        public function lazyload_term_meta($check, $term_id)
        {
        }
        /**
         * @param mixed $check
         * @param int $comment_id
         * @return mixed
         */
        public function lazyload_comment_meta($check, $comment_id)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Recovery_Mode_Cookie_Service
    {
        /**
         * @return bool
         */
        public function is_cookie_set()
        {
        }
        public function set_cookie()
        {
        }
        public function clear_cookie()
        {
        }
        /**
         * @param string $cookie
         * @return true|\WP_Error
         */
        public function validate_cookie($cookie = '')
        {
        }
        /**
         * @param string $cookie
         * @return string|\WP_Error
         */
        public function get_session_id_from_cookie($cookie = '')
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Recovery_Mode_Email_Service
    {
        const RATE_LIMIT_OPTION = 'recovery_mode_email_last_sent';
        /**
         * @param \WP_Recovery_Mode_Link_Service $link_service
         */
        public function __construct(\WP_Recovery_Mode_Link_Service $link_service)
        {
        }
        /**
         * @param int $rate_limit
         * @param array $error
         * @phpstan-param array{
         *   slug?: string,
         *   type?: string,
         * } $extension
         * @return true|\WP_Error
         */
        public function maybe_send_recovery_mode_email($rate_limit, $error, $extension)
        {
        }
        /**
         * @return bool
         */
        public function clear_rate_limit()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Recovery_Mode_Key_Service
    {
        /**
         * @return string
         */
        public function generate_recovery_mode_token()
        {
        }
        /**
         * @param string $token
         * @return string
         */
        public function generate_and_store_recovery_mode_key($token)
        {
        }
        /**
         * @param string $token
         * @param string $key
         * @param int $ttl
         * @return true|\WP_Error
         */
        public function validate_recovery_mode_key($token, $key, $ttl)
        {
        }
        /**
         * @param int $ttl
         */
        public function clean_expired_keys($ttl)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Recovery_Mode_Link_Service
    {
        const LOGIN_ACTION_ENTER = 'enter_recovery_mode';
        const LOGIN_ACTION_ENTERED = 'entered_recovery_mode';
        /**
         * @param \WP_Recovery_Mode_Cookie_Service $cookie_service
         * @param \WP_Recovery_Mode_Key_Service $key_service
         */
        public function __construct(\WP_Recovery_Mode_Cookie_Service $cookie_service, \WP_Recovery_Mode_Key_Service $key_service)
        {
        }
        /**
         * @return string
         */
        public function generate_url()
        {
        }
        /**
         * @param int $ttl
         * @phpstan-return void
         */
        public function handle_begin_link($ttl)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Recovery_Mode
    {
        const EXIT_ACTION = 'exit_recovery_mode';
        public function __construct()
        {
        }
        /**
         * @phpstan-return void
         */
        public function initialize()
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
        /**
         * @return string
         */
        public function get_session_id()
        {
        }
        /**
         * @return bool
         */
        public function is_initialized()
        {
        }
        /**
         * @param array $error
         * @return true|\WP_Error
         */
        public function handle_error(array $error)
        {
        }
        /**
         * @return bool
         */
        public function exit_recovery_mode()
        {
        }
        /**
         * @phpstan-return void
         */
        public function handle_exit_recovery_mode()
        {
        }
        public function clean_expired_keys()
        {
        }
        protected function handle_cookie()
        {
        }
        /**
         * @return int
         */
        protected function get_email_rate_limit()
        {
        }
        /**
         * @return int
         */
        protected function get_link_ttl()
        {
        }
        /**
         * @param array $error
         * @phpstan-return false|array{
         *   slug: string,
         *   type: string,
         * }
         */
        protected function get_extension_for_error($error)
        {
        }
        /**
         * @param array $extension
         * @return bool
         */
        protected function is_network_plugin($extension)
        {
        }
        /**
         * @param array $error
         * @return bool
         */
        protected function store_error($error)
        {
        }
        /**
         * @phpstan-return never
         */
        protected function redirect_protected()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Rewrite
    {
        /**
         * @var string
         */
        public $permalink_structure;
        /**
         * @var bool
         */
        public $use_trailing_slashes;
        /**
         * @var string
         */
        public $author_base = 'author';
        /**
         * @var string
         */
        public $author_structure;
        /**
         * @var string
         */
        public $date_structure;
        /**
         * @var string
         */
        public $page_structure;
        /**
         * @var string
         */
        public $search_base = 'search';
        /**
         * @var string
         */
        public $search_structure;
        /**
         * @var string
         */
        public $comments_base = 'comments';
        /**
         * @var string
         */
        public $pagination_base = 'page';
        /**
         * @var string
         */
        public $comments_pagination_base = 'comment-page';
        /**
         * @var string
         */
        public $feed_base = 'feed';
        /**
         * @var string
         */
        public $comment_feed_structure;
        /**
         * @var string
         */
        public $feed_structure;
        /**
         * @var string
         */
        public $front;
        /**
         * @var string
         */
        public $root = '';
        /**
         * @var string
         */
        public $index = 'index.php';
        /**
         * @var string
         */
        public $matches = '';
        /**
         * @var string[]
         */
        public $rules;
        /**
         * @var string[]
         */
        public $extra_rules = array();
        /**
         * @var string[]
         */
        public $extra_rules_top = array();
        /**
         * @var string[]
         */
        public $non_wp_rules = array();
        /**
         * @var array[]
         */
        public $extra_permastructs = array();
        /**
         * @var array[]
         */
        public $endpoints;
        /**
         * @var bool
         */
        public $use_verbose_rules = \false;
        /**
         * @var bool
         */
        public $use_verbose_page_rules = \true;
        /**
         * @var string[]
         */
        public $rewritecode = array('%year%', '%monthnum%', '%day%', '%hour%', '%minute%', '%second%', '%postname%', '%post_id%', '%author%', '%pagename%', '%search%');
        /**
         * @var string[]
         */
        public $rewritereplace = array('([0-9]{4})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([^/]+)', '([0-9]+)', '([^/]+)', '([^/]+?)', '(.+)');
        /**
         * @var string[]
         */
        public $queryreplace = array('year=', 'monthnum=', 'day=', 'hour=', 'minute=', 'second=', 'name=', 'p=', 'author_name=', 'pagename=', 's=');
        /**
         * @var string[]
         */
        public $feeds = array('feed', 'rdf', 'rss', 'rss2', 'atom');
        /**
         * @return bool
         */
        public function using_permalinks()
        {
        }
        /**
         * @return bool
         */
        public function using_index_permalinks()
        {
        }
        /**
         * @return bool
         */
        public function using_mod_rewrite_permalinks()
        {
        }
        /**
         * @param int $number
         * @return string
         */
        public function preg_index($number)
        {
        }
        /**
         * @return array
         */
        public function page_uri_index()
        {
        }
        /**
         * @return string[]
         */
        public function page_rewrite_rules()
        {
        }
        /**
         * @return string|false
         */
        public function get_date_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_year_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_month_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_day_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_category_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_tag_permastruct()
        {
        }
        /**
         * @param string $name
         * @return string|false
         */
        public function get_extra_permastruct($name)
        {
        }
        /**
         * @return string|false
         */
        public function get_author_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_search_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_page_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_feed_permastruct()
        {
        }
        /**
         * @return string|false
         */
        public function get_comment_feed_permastruct()
        {
        }
        /**
         * @param string $tag
         * @param string $regex
         * @param string $query
         */
        public function add_rewrite_tag($tag, $regex, $query)
        {
        }
        /**
         * @param string $tag
         */
        public function remove_rewrite_tag($tag)
        {
        }
        /**
         * @param string $permalink_structure
         * @param int $ep_mask
         * @param bool $paged
         * @param bool $feed
         * @param bool $forcomments
         * @param bool $walk_dirs
         * @param bool $endpoints
         * @return string[]
         */
        public function generate_rewrite_rules($permalink_structure, $ep_mask = \EP_NONE, $paged = \true, $feed = \true, $forcomments = \false, $walk_dirs = \true, $endpoints = \true)
        {
        }
        /**
         * @param string $permalink_structure
         * @param bool $walk_dirs
         * @return array
         */
        public function generate_rewrite_rule($permalink_structure, $walk_dirs = \false)
        {
        }
        /**
         * @return string[]
         */
        public function rewrite_rules()
        {
        }
        /**
         * @return string[]
         */
        public function wp_rewrite_rules()
        {
        }
        /**
         * @return string
         */
        public function mod_rewrite_rules()
        {
        }
        /**
         * @param bool $add_parent_tags
         * @return string
         */
        public function iis7_url_rewrite_rules($add_parent_tags = \false)
        {
        }
        /**
         * @param string $regex
         * @param string|array $query
         * @phpstan-param 'top'|'bottom' $after
         */
        public function add_rule($regex, $query, $after = 'bottom')
        {
        }
        /**
         * @param string $regex
         * @param string $query
         */
        public function add_external_rule($regex, $query)
        {
        }
        /**
         * @param string $name
         * @param int $places
         * @param string|bool $query_var
         */
        public function add_endpoint($name, $places, $query_var = \true)
        {
        }
        /**
         * @param string $name
         * @param string $struct
         * @phpstan-param array{
         *   with_front?: bool,
         *   ep_mask?: int,
         *   paged?: bool,
         *   feed?: bool,
         *   forcomments?: bool,
         *   walk_dirs?: bool,
         *   endpoints?: bool,
         * } $args
         */
        public function add_permastruct($name, $struct, $args = array())
        {
        }
        /**
         * @param string $name
         */
        public function remove_permastruct($name)
        {
        }
        /**
         * @param bool $hard
         * @phpstan-return void
         */
        public function flush_rules($hard = \true)
        {
        }
        public function init()
        {
        }
        /**
         * @param string $permalink_structure
         */
        public function set_permalink_structure($permalink_structure)
        {
        }
        /**
         * @param string $category_base
         */
        public function set_category_base($category_base)
        {
        }
        /**
         * @param string $tag_base
         */
        public function set_tag_base($tag_base)
        {
        }
        public function __construct()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Role
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var bool[]
         */
        public $capabilities;
        /**
         * @param string $role
         * @param bool[] $capabilities
         */
        public function __construct($role, $capabilities)
        {
        }
        /**
         * @param string $cap
         * @param bool $grant
         */
        public function add_cap($cap, $grant = \true)
        {
        }
        /**
         * @param string $cap
         */
        public function remove_cap($cap)
        {
        }
        /**
         * @param string $cap
         * @return bool
         */
        public function has_cap($cap)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Roles
    {
        /**
         * @var array[]
         */
        public $roles;
        /**
         * @var \WP_Role[]
         */
        public $role_objects = array();
        /**
         * @var string[]
         */
        public $role_names = array();
        /**
         * @var string
         */
        public $role_key;
        /**
         * @var bool
         */
        public $use_db = \true;
        /**
         * @var int
         */
        protected $site_id = 0;
        /**
         * @param int $site_id
         */
        public function __construct($site_id = \null)
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|false
         */
        public function __call($name, $arguments)
        {
        }
        protected function _init()
        {
        }
        public function reinit()
        {
        }
        /**
         * @param string $role
         * @param string $display_name
         * @param bool[] $capabilities
         * @return \WP_Role|void
         */
        public function add_role($role, $display_name, $capabilities = array())
        {
        }
        /**
         * @param string $role
         * @phpstan-return void
         */
        public function remove_role($role)
        {
        }
        /**
         * @param string $role
         * @param string $cap
         * @param bool $grant
         * @phpstan-return void
         */
        public function add_cap($role, $cap, $grant = \true)
        {
        }
        /**
         * @param string $role
         * @param string $cap
         * @phpstan-return void
         */
        public function remove_cap($role, $cap)
        {
        }
        /**
         * @param string $role
         * @return \WP_Role|null
         */
        public function get_role($role)
        {
        }
        /**
         * @return string[]
         */
        public function get_names()
        {
        }
        /**
         * @param string $role
         * @return bool
         */
        public function is_role($role)
        {
        }
        /**
         * @phpstan-return void
         */
        public function init_roles()
        {
        }
        /**
         * @param int $site_id
         * @phpstan-return void
         */
        public function for_site($site_id = \null)
        {
        }
        /**
         * @return int
         */
        public function get_site_id()
        {
        }
        /**
         * @return array
         */
        protected function get_roles_data()
        {
        }
    }
    class WP_Script_Modules
    {
        /**
         * @param string $id
         * @param string $src
         * @phpstan-param array<int|string, array{
         *   id: string,
         *   import?: string,
         * }> $deps
         * @param string|false|null $version
         */
        public function register(string $id, string $src, array $deps = array(), $version = \false)
        {
        }
        /**
         * @param string $id
         * @param string $src
         * @phpstan-param array<int|string, array{
         *   id: string,
         *   import?: string,
         * }> $deps
         * @param string|false|null $version
         */
        public function enqueue(string $id, string $src = '', array $deps = array(), $version = \false)
        {
        }
        /**
         * @param string $id
         */
        public function dequeue(string $id)
        {
        }
        /**
         * @param string $id
         */
        public function deregister(string $id)
        {
        }
        public function add_hooks()
        {
        }
        public function print_enqueued_script_modules()
        {
        }
        public function print_script_module_preloads()
        {
        }
        public function print_import_map()
        {
        }
    }
    class WP_Scripts extends \WP_Dependencies
    {
        /**
         * @var string
         */
        public $base_url;
        /**
         * @var string
         */
        public $content_url;
        /**
         * @var string
         */
        public $default_version;
        /**
         * @var array
         */
        public $in_footer = array();
        /**
         * @var string
         */
        public $concat = '';
        /**
         * @var string
         */
        public $concat_version = '';
        /**
         * @var bool
         */
        public $do_concat = \false;
        /**
         * @var string
         */
        public $print_html = '';
        /**
         * @var string
         */
        public $print_code = '';
        /**
         * @var string
         */
        public $ext_handles = '';
        /**
         * @var string
         */
        public $ext_version = '';
        /**
         * @var array
         */
        public $default_dirs;
        public function __construct()
        {
        }
        public function init()
        {
        }
        /**
         * @param string|string[]|false $handles
         * @param int|false $group
         * @return string[]
         */
        public function print_scripts($handles = \false, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param bool $display
         * @return bool|string|void
         */
        public function print_scripts_l10n($handle, $display = \true)
        {
        }
        /**
         * @param string $handle
         * @param bool $display
         * @return bool|string|void
         */
        public function print_extra_script($handle, $display = \true)
        {
        }
        /**
         * @param string $handle
         * @param int|false $group
         * @return bool
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param string $data
         * @param string $position
         * @return bool
         */
        public function add_inline_script($handle, $data, $position = 'after')
        {
        }
        /**
         * @param string $handle
         * @param string $position
         * @param bool $display
         * @return string|false
         */
        public function print_inline_script($handle, $position = 'after', $display = \true)
        {
        }
        /**
         * @param string $handle
         * @param string $position
         * @return string
         */
        public function get_inline_script_data($handle, $position = 'after')
        {
        }
        /**
         * @param string $handle
         * @param string $position
         * @return string
         */
        public function get_inline_script_tag($handle, $position = 'after')
        {
        }
        /**
         * @param string $handle
         * @param string $object_name
         * @param array $l10n
         * @return bool
         */
        public function localize($handle, $object_name, $l10n)
        {
        }
        /**
         * @param string $handle
         * @param bool $recursion
         * @param int|false $group
         * @return bool
         */
        public function set_group($handle, $recursion, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param string $domain
         * @param string $path
         * @return bool
         */
        public function set_translations($handle, $domain = 'default', $path = '')
        {
        }
        /**
         * @param string $handle
         * @param bool $display
         * @return string|false
         */
        public function print_translations($handle, $display = \true)
        {
        }
        /**
         * @param string|string[] $handles
         * @param bool $recursion
         * @param int|false $group
         * @return bool
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * @return string[]
         */
        public function do_head_items()
        {
        }
        /**
         * @return string[]
         */
        public function do_footer_items()
        {
        }
        /**
         * @param string $src
         * @return bool
         */
        public function in_default_dir($src)
        {
        }
        /**
         * @param string $handle
         * @param string $key
         * @param mixed $value
         * @return bool
         */
        public function add_data($handle, $key, $value)
        {
        }
        public function reset()
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_Session_Tokens
    {
        /**
         * @var int
         */
        protected $user_id;
        /**
         * @param int $user_id
         */
        protected function __construct($user_id)
        {
        }
        /**
         * @param int $user_id
         * @return \WP_Session_Tokens
         */
        public static final function get_instance($user_id)
        {
        }
        /**
         * @param string $token
         * @return array|null
         */
        public final function get($token)
        {
        }
        /**
         * @param string $token
         * @return bool
         */
        public final function verify($token)
        {
        }
        /**
         * @param int $expiration
         * @return string
         */
        public final function create($expiration)
        {
        }
        /**
         * @param string $token
         * @param array $session
         */
        public final function update($token, $session)
        {
        }
        /**
         * @param string $token
         */
        public final function destroy($token)
        {
        }
        /**
         * @param string $token_to_keep
         */
        public final function destroy_others($token_to_keep)
        {
        }
        /**
         * @param array $session
         * @return bool
         */
        protected final function is_still_valid($session)
        {
        }
        public final function destroy_all()
        {
        }
        public static final function destroy_all_for_all_users()
        {
        }
        /**
         * @return array
         */
        public final function get_all()
        {
        }
        /**
         * @return array
         */
        protected abstract function get_sessions();
        /**
         * @param string $verifier
         * @return array|null
         */
        protected abstract function get_session($verifier);
        /**
         * @param string $verifier
         * @param array $session
         */
        protected abstract function update_session($verifier, $session = \null);
        /**
         * @param string $verifier
         */
        protected abstract function destroy_other_sessions($verifier);
        protected abstract function destroy_all_sessions();
        public static function drop_sessions()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_SimplePie_File extends \SimplePie_File
    {
        /**
         * @var int
         */
        public $timeout = 10;
        /**
         * @param string $url
         * @param int $timeout
         * @param int $redirects
         * @param string|array $headers
         * @param string $useragent
         * @param bool $force_fsockopen
         */
        public function __construct($url, $timeout = 10, $redirects = 5, $headers = \null, $useragent = \null, $force_fsockopen = \false)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_SimplePie_Sanitize_KSES extends \SimplePie_Sanitize
    {
        /**
         * @param mixed $data
         * @param int $type
         * @param string $base
         * @return mixed
         */
        public function sanitize($data, $type, $base = '')
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Site_Query
    {
        /**
         * @var string
         */
        public $request;
        /**
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * @var \WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * @var \WP_Date_Query
         */
        public $date_query = \false;
        /**
         * @var array
         */
        public $query_vars;
        /**
         * @var array
         */
        public $query_var_defaults;
        /**
         * @var array
         */
        public $sites;
        /**
         * @var int
         */
        public $found_sites = 0;
        /**
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * @phpstan-param array{
         *   site__in?: int[],
         *   site__not_in?: int[],
         *   count?: bool,
         *   date_query?: array,
         *   fields?: string,
         *   ID?: int,
         *   number?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   network_id?: int,
         *   network__in?: int[],
         *   network__not_in?: int[],
         *   domain?: string,
         *   domain__in?: string[],
         *   domain__not_in?: string[],
         *   path?: string,
         *   path__in?: string[],
         *   path__not_in?: string[],
         *   public?: int,
         *   archived?: int,
         *   mature?: int,
         *   spam?: int,
         *   deleted?: int,
         *   lang_id?: int,
         *   lang__in?: string[],
         *   lang__not_in?: string[],
         *   search?: string,
         *   search_columns?: string[],
         *   update_site_cache?: bool,
         *   update_site_meta_cache?: bool,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         * } $query
         */
        public function __construct($query = '')
        {
        }
        /**
         * @param string|array $query
         * @phpstan-param array{
         *   site__in?: int[],
         *   site__not_in?: int[],
         *   count?: bool,
         *   date_query?: array,
         *   fields?: string,
         *   ID?: int,
         *   number?: int,
         *   offset?: int,
         *   no_found_rows?: bool,
         *   orderby?: string|array,
         *   order?: string,
         *   network_id?: int,
         *   network__in?: int[],
         *   network__not_in?: int[],
         *   domain?: string,
         *   domain__in?: string[],
         *   domain__not_in?: string[],
         *   path?: string,
         *   path__in?: string[],
         *   path__not_in?: string[],
         *   public?: int,
         *   archived?: int,
         *   mature?: int,
         *   spam?: int,
         *   deleted?: int,
         *   lang_id?: int,
         *   lang__in?: string[],
         *   lang__not_in?: string[],
         *   search?: string,
         *   search_columns?: string[],
         *   update_site_cache?: bool,
         *   update_site_meta_cache?: bool,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         * } $query See WP_Site_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * @param string|array $query
         * @return array|int
         */
        public function query($query)
        {
        }
        /**
         * @return array|int
         */
        public function get_sites()
        {
        }
        /**
         * @return int|array
         */
        protected function get_site_ids()
        {
        }
        /**
         * @param string $search
         * @param string[] $columns
         * @return string
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * @param string $orderby
         * @return string|false
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Site
    {
        /**
         * @var string
         */
        public $blog_id;
        /**
         * @var string
         */
        public $domain = '';
        /**
         * @var string
         */
        public $path = '';
        /**
         * @var string
         */
        public $site_id = '0';
        /**
         * @var string
         */
        public $registered = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $last_updated = '0000-00-00 00:00:00';
        /**
         * @var string
         */
        public $public = '1';
        /**
         * @var string
         */
        public $archived = '0';
        /**
         * @var string
         */
        public $mature = '0';
        /**
         * @var string
         */
        public $spam = '0';
        /**
         * @var string
         */
        public $deleted = '0';
        /**
         * @var string
         */
        public $lang_id = '0';
        /**
         * @param int $site_id
         * @return \WP_Site|false
         */
        public static function get_instance($site_id)
        {
        }
        /**
         * @param \WP_Site|object $site
         */
        public function __construct($site)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function __set($key, $value)
        {
        }
    }
    class WP_Styles extends \WP_Dependencies
    {
        /**
         * @var string
         */
        public $base_url;
        /**
         * @var string
         */
        public $content_url;
        /**
         * @var string
         */
        public $default_version;
        /**
         * @var string
         */
        public $text_direction = 'ltr';
        /**
         * @var string
         */
        public $concat = '';
        /**
         * @var string
         */
        public $concat_version = '';
        /**
         * @var bool
         */
        public $do_concat = \false;
        /**
         * @var string
         */
        public $print_html = '';
        /**
         * @var string
         */
        public $print_code = '';
        /**
         * @var array
         */
        public $default_dirs;
        public function __construct()
        {
        }
        /**
         * @param string $handle
         * @param int|false $group
         * @return bool
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * @param string $handle
         * @param string $code
         * @return bool
         */
        public function add_inline_style($handle, $code)
        {
        }
        /**
         * @param string $handle
         * @param bool $display
         * @return string|bool
         */
        public function print_inline_style($handle, $display = \true)
        {
        }
        /**
         * @param string|string[] $handles
         * @param bool $recursion
         * @param int|false $group
         * @return bool
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * @param string $src
         * @param string $ver
         * @param string $handle
         * @return string
         */
        public function _css_href($src, $ver, $handle)
        {
        }
        /**
         * @param string $src
         * @return bool
         */
        public function in_default_dir($src)
        {
        }
        /**
         * @return string[]
         */
        public function do_footer_items()
        {
        }
        public function reset()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Tax_Query
    {
        /**
         * @var array
         */
        public $queries = array();
        /**
         * @var string
         */
        public $relation;
        /**
         * @var array
         */
        protected $table_aliases = array();
        /**
         * @var array
         */
        public $queried_terms = array();
        /**
         * @var string
         */
        public $primary_table;
        /**
         * @var string
         */
        public $primary_id_column;
        public function __construct($tax_query)
        {
        }
        /**
         * @param array $queries
         * @return array
         */
        public function sanitize_query($queries)
        {
        }
        /**
         * @param string $relation
         * @phpstan-return 'AND'|'OR'
         */
        public function sanitize_relation($relation)
        {
        }
        /**
         * @param array $query
         * @return bool
         */
        protected static function is_first_order_clause($query)
        {
        }
        /**
         * @param string $primary_table
         * @param string $primary_id_column
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        public function get_sql($primary_table, $primary_id_column)
        {
        }
        /**
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * @param array $query
         * @param int $depth
         * @phpstan-return array{
         *   join: string,
         *   where: string,
         * }
         */
        protected function get_sql_for_query(&$query, $depth = 0)
        {
        }
        /**
         * @param array $clause
         * @param array $parent_query
         * @phpstan-return array{
         *   join: string[],
         *   where: string[],
         * }
         */
        public function get_sql_for_clause(&$clause, $parent_query)
        {
        }
        /**
         * @param array $clause
         * @param array $parent_query
         * @return string|false
         */
        protected function find_compatible_table_alias($clause, $parent_query)
        {
        }
        /**
         * @param array $query
         * @phpstan-param 'slug'|'name'|'term_taxonomy_id'|'term_id' $resulting_field
         * @phpstan-return void
         */
        public function transform_query(&$query, $resulting_field)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Taxonomy
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $label;
        /**
         * @var \stdClass
         */
        public $labels;
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var bool
         */
        public $public = \true;
        /**
         * @var bool
         */
        public $publicly_queryable = \true;
        /**
         * @var bool
         */
        public $hierarchical = \false;
        /**
         * @var bool
         */
        public $show_ui = \true;
        /**
         * @var bool
         */
        public $show_in_menu = \true;
        /**
         * @var bool
         */
        public $show_in_nav_menus = \true;
        /**
         * @var bool
         */
        public $show_tagcloud = \true;
        /**
         * @var bool
         */
        public $show_in_quick_edit = \true;
        /**
         * @var bool
         */
        public $show_admin_column = \false;
        /**
         * @var bool|callable
         */
        public $meta_box_cb = \null;
        /**
         * @var callable
         */
        public $meta_box_sanitize_cb = \null;
        /**
         * @var string[]
         */
        public $object_type = \null;
        /**
         * @var \stdClass
         */
        public $cap;
        /**
         * @var array|false
         */
        public $rewrite;
        /**
         * @var string|false
         */
        public $query_var;
        /**
         * @var callable
         */
        public $update_count_callback;
        /**
         * @var bool
         */
        public $show_in_rest;
        /**
         * @var string|bool
         */
        public $rest_base;
        /**
         * @var string|bool
         */
        public $rest_namespace;
        /**
         * @var string|bool
         */
        public $rest_controller_class;
        /**
         * @var \WP_REST_Controller
         */
        public $rest_controller;
        /**
         * @var array|string
         */
        public $default_term;
        /**
         * @var bool|null
         */
        public $sort = \null;
        /**
         * @var array|null
         */
        public $args = \null;
        /**
         * @var bool
         */
        public $_builtin;
        /**
         * @param string $taxonomy
         * @param array|string $object_type
         * @param array|string $args
         * @phpstan-param array{
         *   labels?: string[],
         *   description?: string,
         *   public?: bool,
         *   publicly_queryable?: bool,
         *   hierarchical?: bool,
         *   show_ui?: bool,
         *   show_in_menu?: bool,
         *   show_in_nav_menus?: bool,
         *   show_in_rest?: bool,
         *   rest_base?: string,
         *   rest_namespace?: string,
         *   rest_controller_class?: string,
         *   show_tagcloud?: bool,
         *   show_in_quick_edit?: bool,
         *   show_admin_column?: bool,
         *   meta_box_cb?: bool|callable,
         *   meta_box_sanitize_cb?: callable,
         *   capabilities?: array{
         *     manage_terms?: string,
         *     edit_terms?: string,
         *     delete_terms?: string,
         *     assign_terms?: string,
         *   },
         *   rewrite?: bool|array{
         *     slug?: string,
         *     with_front?: bool,
         *     hierarchical?: bool,
         *     ep_mask?: int,
         *   },
         *   query_var?: string|bool,
         *   update_count_callback?: callable,
         *   default_term?: string|array{
         *     name?: string,
         *     slug?: string,
         *     description?: string,
         *   },
         *   sort?: bool,
         *   args?: array,
         *   _builtin?: bool,
         * } $args See register_taxonomy()
         */
        public function __construct($taxonomy, $object_type, $args = array())
        {
        }
        /**
         * @param string|string[] $object_type
         * @param array|string $args
         */
        public function set_props($object_type, $args)
        {
        }
        public function add_rewrite_rules()
        {
        }
        public function remove_rewrite_rules()
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * @return \WP_REST_Controller|null
         */
        public function get_rest_controller()
        {
        }
        /**
         * @return (string|null)[][]
         */
        public static function get_default_labels()
        {
        }
        public static function reset_default_labels()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Term_Query
    {
        /**
         * @var string
         */
        public $request;
        /**
         * @var \WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'orderby' => '', 'limits' => '');
        /**
         * @var array
         */
        public $query_vars;
        /**
         * @var array
         */
        public $query_var_defaults;
        /**
         * @var array
         */
        public $terms;
        /**
         * @phpstan-param array{
         *   taxonomy?: string|string[],
         *   object_ids?: int|int[],
         *   orderby?: string,
         *   order?: string,
         *   hide_empty?: bool|int,
         *   include?: int[]|string,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   number?: int|string,
         *   offset?: int,
         *   fields?: string,
         *   count?: bool,
         *   name?: string|string[],
         *   slug?: string|string[],
         *   term_taxonomy_id?: int|int[],
         *   hierarchical?: bool,
         *   search?: string,
         *   name__like?: string,
         *   description__like?: string,
         *   pad_counts?: bool,
         *   get?: string,
         *   child_of?: int,
         *   parent?: int,
         *   childless?: bool,
         *   cache_domain?: string,
         *   cache_results?: bool,
         *   update_term_meta_cache?: bool,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         * } $query
         */
        public function __construct($query = '')
        {
        }
        /**
         * @param string|array $query
         * @phpstan-param array{
         *   taxonomy?: string|string[],
         *   object_ids?: int|int[],
         *   orderby?: string,
         *   order?: string,
         *   hide_empty?: bool|int,
         *   include?: int[]|string,
         *   exclude?: int[]|string,
         *   exclude_tree?: int[]|string,
         *   number?: int|string,
         *   offset?: int,
         *   fields?: string,
         *   count?: bool,
         *   name?: string|string[],
         *   slug?: string|string[],
         *   term_taxonomy_id?: int|int[],
         *   hierarchical?: bool,
         *   search?: string,
         *   name__like?: string,
         *   description__like?: string,
         *   pad_counts?: bool,
         *   get?: string,
         *   child_of?: int,
         *   parent?: int,
         *   childless?: bool,
         *   cache_domain?: string,
         *   cache_results?: bool,
         *   update_term_meta_cache?: bool,
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         * } $query See WP_Term_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * @param string|array $query
         * @return \WP_Term[]|int[]|string[]|string
         */
        public function query($query)
        {
        }
        /**
         * @return \WP_Term[]|int[]|string[]|string
         */
        public function get_terms()
        {
        }
        /**
         * @param string $orderby_raw
         * @return string|false
         */
        protected function parse_orderby($orderby_raw)
        {
        }
        /**
         * @param \WP_Term[] $term_objects
         * @param string $_fields
         * @return \WP_Term[]|int[]|string[]
         */
        protected function format_terms($term_objects, $_fields)
        {
        }
        /**
         * @param string $orderby_raw
         * @return string
         */
        protected function parse_orderby_meta($orderby_raw)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
        /**
         * @param string $search
         * @return string
         */
        protected function get_search_sql($search)
        {
        }
        /**
         * @param object[]|int[] $terms
         * @return \WP_Term[]
         */
        protected function populate_terms($terms)
        {
        }
        /**
         * @param array $args
         * @param string $sql
         * @return string
         */
        protected function generate_cache_key(array $args, $sql)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Term
    {
        /**
         * @var int
         */
        public $term_id;
        /**
         * @var string
         */
        public $name = '';
        /**
         * @var string
         */
        public $slug = '';
        /**
         * @var int
         */
        public $term_group = '';
        /**
         * @var int
         */
        public $term_taxonomy_id = 0;
        /**
         * @var string
         */
        public $taxonomy = '';
        /**
         * @var string
         */
        public $description = '';
        /**
         * @var int
         */
        public $parent = 0;
        /**
         * @var int
         */
        public $count = 0;
        /**
         * @var string
         */
        public $filter = 'raw';
        /**
         * @param int $term_id
         * @param string $taxonomy
         * @return \WP_Term|\WP_Error|false
         */
        public static function get_instance($term_id, $taxonomy = \null)
        {
        }
        /**
         * @param \WP_Term|object $term
         */
        public function __construct($term)
        {
        }
        /**
         * @phpstan-param 'edit'|'db'|'display'|'attribute'|'js'|'rss'|'raw' $filter
         */
        public function filter($filter)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Text_Diff_Renderer_inline extends \Text_Diff_Renderer_inline
    {
        /**
         * @param string $string
         * @param string $newlineEscape
         * @return string
         */
        public function _splitOnWords($string, $newlineEscape = "\n")
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Text_Diff_Renderer_Table extends \Text_Diff_Renderer
    {
        /**
         * @var int
         */
        public $_leading_context_lines = 10000;
        /**
         * @var int
         */
        public $_trailing_context_lines = 10000;
        /**
         * @var string|null
         */
        public $_title;
        /**
         * @var string|null
         */
        public $_title_left;
        /**
         * @var string|null
         */
        public $_title_right;
        /**
         * @var float
         */
        protected $_diff_threshold = 0.6;
        /**
         * @var string
         */
        protected $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';
        /**
         * @var string
         */
        protected $_show_split_view = \true;
        protected $compat_fields = array('_show_split_view', 'inline_diff_renderer', '_diff_threshold');
        /**
         * @var array
         */
        protected $count_cache = array();
        /**
         * @var array
         */
        protected $difference_cache = array();
        /**
         * @param array $params
         */
        public function __construct($params = array())
        {
        }
        /**
         * @param string $header
         * @return string
         */
        public function _startBlock($header)
        {
        }
        /**
         * @param array $lines
         * @param string $prefix
         */
        public function _lines($lines, $prefix = ' ')
        {
        }
        /**
         * @param string $line
         * @return string
         */
        public function addedLine($line)
        {
        }
        /**
         * @param string $line
         * @return string
         */
        public function deletedLine($line)
        {
        }
        /**
         * @param string $line
         * @return string
         */
        public function contextLine($line)
        {
        }
        /**
         * @return string
         */
        public function emptyLine()
        {
        }
        /**
         * @param array $lines
         * @param bool $encode
         * @return string
         */
        public function _added($lines, $encode = \true)
        {
        }
        /**
         * @param array $lines
         * @param bool $encode
         * @return string
         */
        public function _deleted($lines, $encode = \true)
        {
        }
        /**
         * @param array $lines
         * @param bool $encode
         * @return string
         */
        public function _context($lines, $encode = \true)
        {
        }
        /**
         * @param array $orig
         * @param array $final
         * @return string
         */
        public function _changed($orig, $final)
        {
        }
        /**
         * @param array $orig
         * @param array $final
         * @phpstan-return array{
         *   orig_matches: array,
         *   final_matches: array,
         *   orig_rows: array,
         *   final_rows: array,
         * }
         */
        public function interleave_changed_lines($orig, $final)
        {
        }
        /**
         * @param string $string1
         * @param string $string2
         * @return int
         */
        public function compute_string_distance($string1, $string2)
        {
        }
        /**
         * @param int $a
         * @param int $b
         * @return int
         */
        public function difference($a, $b)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @phpstan-return void
         */
        public function __unset($name)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Textdomain_Registry
    {
        /**
         * @var array
         */
        protected $all = array();
        /**
         * @var array
         */
        protected $current = array();
        /**
         * @var array
         */
        protected $custom_paths = array();
        /**
         * @var array
         */
        protected $cached_mo_files = array();
        /**
         * @var string[]
         */
        protected $domains_with_translations = array();
        public function init()
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         * @return string|false
         */
        public function get($domain, $locale)
        {
        }
        /**
         * @param string $domain
         * @return bool
         */
        public function has($domain)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         * @param string|false $path
         */
        public function set($domain, $locale, $path)
        {
        }
        /**
         * @param string $domain
         * @param string $path
         */
        public function set_custom_path($domain, $path)
        {
        }
        /**
         * @param string $path
         * @return array
         */
        public function get_language_files_from_path($path)
        {
        }
        /**
         * @param \WP_Upgrader $upgrader
         * @phpstan-param array{
         *   action?: string,
         *   type?: string,
         *   bulk?: bool,
         *   plugins?: array,
         *   themes?: array,
         *   translations?: array{
         *     language: string,
         *     type: string,
         *     slug: string,
         *     version: string,
         *   },
         * } $hook_extra
         * @phpstan-return void
         */
        public function invalidate_mo_files_cache($upgrader, $hook_extra)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Theme_JSON_Data
    {
        /**
         * @param array $data
         * @param string $origin
         */
        public function __construct($data = array('version' => \WP_Theme_JSON::LATEST_SCHEMA), $origin = 'theme')
        {
        }
        /**
         * @param array $new_data
         * @return \WP_Theme_JSON_Data
         */
        public function update_with($new_data)
        {
        }
        /**
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * @return \WP_Theme_JSON
         */
        public function get_theme_json()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Theme_JSON_Resolver
    {
        /**
         * @var array
         */
        protected static $blocks_cache = array('core' => array(), 'blocks' => array(), 'theme' => array(), 'user' => array());
        /**
         * @var \WP_Theme_JSON
         */
        protected static $core = \null;
        /**
         * @var \WP_Theme_JSON
         */
        protected static $blocks = \null;
        /**
         * @var \WP_Theme_JSON
         */
        protected static $theme = \null;
        /**
         * @var \WP_Theme_JSON
         */
        protected static $user = \null;
        /**
         * @var int
         */
        protected static $user_custom_post_type_id = \null;
        /**
         * @var array
         */
        protected static $i18n_schema = \null;
        /**
         * @var array
         */
        protected static $theme_json_file_cache = array();
        /**
         * @param string $file_path
         * @return array
         */
        protected static function read_json_file($file_path)
        {
        }
        /**
         * @return array
         */
        public static function get_fields_to_translate()
        {
        }
        /**
         * @param array $theme_json
         * @param string $domain
         * @return array
         */
        protected static function translate($theme_json, $domain = 'default')
        {
        }
        /**
         * @return \WP_Theme_JSON
         */
        public static function get_core_data()
        {
        }
        /**
         * @phpstan-param 'core'|'blocks'|'theme'|'user' $origin
         * @return bool
         */
        protected static function has_same_registered_blocks($origin)
        {
        }
        /**
         * @param array $deprecated
         * @phpstan-param array{
         *   with_supports?: bool,
         * } $options
         * @return \WP_Theme_JSON
         */
        public static function get_theme_data($deprecated = array(), $options = array())
        {
        }
        /**
         * @return \WP_Theme_JSON
         */
        public static function get_block_data()
        {
        }
        /**
         * @param \WP_Theme $theme
         * @param bool $create_post
         * @param array $post_status_filter
         * @return array
         */
        public static function get_user_data_from_wp_global_styles($theme, $create_post = \false, $post_status_filter = array('publish'))
        {
        }
        /**
         * @return \WP_Theme_JSON
         */
        public static function get_user_data()
        {
        }
        /**
         * @phpstan-param 'default'|'blocks'|'theme'|'custom' $origin
         * @return \WP_Theme_JSON
         */
        public static function get_merged_data($origin = 'custom')
        {
        }
        /**
         * @return int|null
         */
        public static function get_user_global_styles_post_id()
        {
        }
        /**
         * @return bool
         */
        public static function theme_has_support()
        {
        }
        /**
         * @param string $file_name
         * @param bool $template
         * @return string
         */
        protected static function get_file_path_from_theme($file_name, $template = \false)
        {
        }
        public static function clean_cached_data()
        {
        }
        /**
         * @param string $scope
         * @return array
         */
        public static function get_style_variations($scope = 'theme')
        {
        }
        /**
         * @param \WP_Theme_JSON $theme_json
         * @return array
         */
        public static function get_resolved_theme_uris($theme_json)
        {
        }
        /**
         * @param \WP_Theme_JSON $theme_json
         * @return \WP_Theme_JSON
         */
        public static function resolve_theme_file_uris($theme_json)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Theme_JSON_Schema
    {
        /**
         * Maps old properties to their new location within the schema's settings.
         * This will be applied at both the defaults and individual block levels.
         */
        const V1_TO_V2_RENAMED_PATHS = array('border.customRadius' => 'border.radius', 'spacing.customMargin' => 'spacing.margin', 'spacing.customPadding' => 'spacing.padding', 'typography.customLineHeight' => 'typography.lineHeight');
        /**
         * @param array $theme_json
         * @phpstan-param 'blocks'|'default'|'theme'|'custom' $origin
         * @return array
         */
        public static function migrate($theme_json, $origin = 'theme')
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Theme_JSON
    {
        /**
         * @var array
         */
        protected $theme_json = \null;
        /**
         * @var array
         */
        protected static $blocks_metadata = array();
        /**
         * The CSS selector for the top-level preset settings.
         *
         * @since 6.6.0
         * @var string
         */
        const ROOT_CSS_PROPERTIES_SELECTOR = ':root';
        /**
         * The CSS selector for the top-level styles.
         *
         * @since 5.8.0
         * @var string
         */
        const ROOT_BLOCK_SELECTOR = 'body';
        /**
         * The sources of data this object can represent.
         *
         * @since 5.8.0
         * @since 6.1.0 Added 'blocks'.
         * @var string[]
         */
        const VALID_ORIGINS = array('default', 'blocks', 'theme', 'custom');
        /**
         * Presets are a set of values that serve
         * to bootstrap some styles: colors, font sizes, etc.
         *
         * They are a unkeyed array of values such as:
         *
         *     array(
         *       array(
         *         'slug'      => 'unique-name-within-the-set',
         *         'name'      => 'Name for the UI',
         *         <value_key> => 'value'
         *       ),
         *     )
         *
         * This contains the necessary metadata to process them:
         *
         * - path             => Where to find the preset within the settings section.
         * - prevent_override => Disables override of default presets by theme presets.
         *                       The relationship between whether to override the defaults
         *                       and whether the defaults are enabled is inverse:
         *                         - If defaults are enabled  => theme presets should not be overridden
         *                         - If defaults are disabled => theme presets should be overridden
         *                       For example, a theme sets defaultPalette to false,
         *                       making the default palette hidden from the user.
         *                       In that case, we want all the theme presets to be present,
         *                       so they should override the defaults by setting this false.
         * - use_default_names => whether to use the default names
         * - value_key        => the key that represents the value
         * - value_func       => optionally, instead of value_key, a function to generate
         *                       the value that takes a preset as an argument
         *                       (either value_key or value_func should be present)
         * - css_vars         => template string to use in generating the CSS Custom Property.
         *                       Example output: "--wp--preset--duotone--blue: <value>" will generate as many CSS Custom Properties as presets defined
         *                       substituting the $slug for the slug's value for each preset value.
         * - classes          => array containing a structure with the classes to
         *                       generate for the presets, where for each array item
         *                       the key is the class name and the value the property name.
         *                       The "$slug" substring will be replaced by the slug of each preset.
         *                       For example:
         *                       'classes' => array(
         *                         '.has-$slug-color'            => 'color',
         *                         '.has-$slug-background-color' => 'background-color',
         *                         '.has-$slug-border-color'     => 'border-color',
         *                       )
         * - properties       => array of CSS properties to be used by kses to
         *                       validate the content of each preset
         *                       by means of the remove_insecure_properties method.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `color.duotone` and `typography.fontFamilies` presets,
         *              `use_default_names` preset key, and simplified the metadata structure.
         * @since 6.0.0 Replaced `override` with `prevent_override` and updated the
         *              `prevent_override` value for `color.duotone` to use `color.defaultDuotone`.
         * @since 6.2.0 Added 'shadow' presets.
         * @since 6.3.0 Replaced value_func for duotone with `null`. Custom properties are handled by class-wp-duotone.php.
         * @since 6.6.0 Added the `dimensions.aspectRatios` and `dimensions.defaultAspectRatios` presets.
         *              Updated the 'prevent_override' value for font size presets to use 'typography.defaultFontSizes'
         *              and spacing size presets to use `spacing.defaultSpacingSizes`.
         * @var array
         */
        const PRESETS_METADATA = array(array('path' => array('dimensions', 'aspectRatios'), 'prevent_override' => array('dimensions', 'defaultAspectRatios'), 'use_default_names' => \false, 'value_key' => 'ratio', 'css_vars' => '--wp--preset--aspect-ratio--$slug', 'classes' => array(), 'properties' => array('aspect-ratio')), array('path' => array('color', 'palette'), 'prevent_override' => array('color', 'defaultPalette'), 'use_default_names' => \false, 'value_key' => 'color', 'css_vars' => '--wp--preset--color--$slug', 'classes' => array('.has-$slug-color' => 'color', '.has-$slug-background-color' => 'background-color', '.has-$slug-border-color' => 'border-color'), 'properties' => array('color', 'background-color', 'border-color')), array('path' => array('color', 'gradients'), 'prevent_override' => array('color', 'defaultGradients'), 'use_default_names' => \false, 'value_key' => 'gradient', 'css_vars' => '--wp--preset--gradient--$slug', 'classes' => array('.has-$slug-gradient-background' => 'background'), 'properties' => array('background')), array(
            'path' => array('color', 'duotone'),
            'prevent_override' => array('color', 'defaultDuotone'),
            'use_default_names' => \false,
            'value_func' => \null,
            // CSS Custom Properties for duotone are handled by block supports in class-wp-duotone.php.
            'css_vars' => \null,
            'classes' => array(),
            'properties' => array('filter'),
        ), array('path' => array('typography', 'fontSizes'), 'prevent_override' => array('typography', 'defaultFontSizes'), 'use_default_names' => \true, 'value_func' => 'wp_get_typography_font_size_value', 'css_vars' => '--wp--preset--font-size--$slug', 'classes' => array('.has-$slug-font-size' => 'font-size'), 'properties' => array('font-size')), array('path' => array('typography', 'fontFamilies'), 'prevent_override' => \false, 'use_default_names' => \false, 'value_key' => 'fontFamily', 'css_vars' => '--wp--preset--font-family--$slug', 'classes' => array('.has-$slug-font-family' => 'font-family'), 'properties' => array('font-family')), array('path' => array('spacing', 'spacingSizes'), 'prevent_override' => array('spacing', 'defaultSpacingSizes'), 'use_default_names' => \true, 'value_key' => 'size', 'css_vars' => '--wp--preset--spacing--$slug', 'classes' => array(), 'properties' => array('padding', 'margin')), array('path' => array('shadow', 'presets'), 'prevent_override' => array('shadow', 'defaultPresets'), 'use_default_names' => \false, 'value_key' => 'shadow', 'css_vars' => '--wp--preset--shadow--$slug', 'classes' => array(), 'properties' => array('box-shadow')));
        /**
         * Metadata for style properties.
         *
         * Each element is a direct mapping from the CSS property name to the
         * path to the value in theme.json & block attributes.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `border-*`, `font-family`, `font-style`, `font-weight`,
         *              `letter-spacing`, `margin-*`, `padding-*`, `--wp--style--block-gap`,
         *              `text-decoration`, `text-transform`, and `filter` properties,
         *              simplified the metadata structure.
         * @since 6.1.0 Added the `border-*-color`, `border-*-width`, `border-*-style`,
         *              `--wp--style--root--padding-*`, and `box-shadow` properties,
         *              removed the `--wp--style--block-gap` property.
         * @since 6.2.0 Added `outline-*`, and `min-height` properties.
         * @since 6.3.0 Added `column-count` property.
         * @since 6.4.0 Added `writing-mode` property.
         * @since 6.5.0 Added `aspect-ratio` property.
         * @since 6.6.0 Added `background-[image|position|repeat|size]` properties.
         *
         * @var array
         */
        const PROPERTIES_METADATA = array('aspect-ratio' => array('dimensions', 'aspectRatio'), 'background' => array('color', 'gradient'), 'background-color' => array('color', 'background'), 'background-image' => array('background', 'backgroundImage'), 'background-position' => array('background', 'backgroundPosition'), 'background-repeat' => array('background', 'backgroundRepeat'), 'background-size' => array('background', 'backgroundSize'), 'border-radius' => array('border', 'radius'), 'border-top-left-radius' => array('border', 'radius', 'topLeft'), 'border-top-right-radius' => array('border', 'radius', 'topRight'), 'border-bottom-left-radius' => array('border', 'radius', 'bottomLeft'), 'border-bottom-right-radius' => array('border', 'radius', 'bottomRight'), 'border-color' => array('border', 'color'), 'border-width' => array('border', 'width'), 'border-style' => array('border', 'style'), 'border-top-color' => array('border', 'top', 'color'), 'border-top-width' => array('border', 'top', 'width'), 'border-top-style' => array('border', 'top', 'style'), 'border-right-color' => array('border', 'right', 'color'), 'border-right-width' => array('border', 'right', 'width'), 'border-right-style' => array('border', 'right', 'style'), 'border-bottom-color' => array('border', 'bottom', 'color'), 'border-bottom-width' => array('border', 'bottom', 'width'), 'border-bottom-style' => array('border', 'bottom', 'style'), 'border-left-color' => array('border', 'left', 'color'), 'border-left-width' => array('border', 'left', 'width'), 'border-left-style' => array('border', 'left', 'style'), 'color' => array('color', 'text'), 'text-align' => array('typography', 'textAlign'), 'column-count' => array('typography', 'textColumns'), 'font-family' => array('typography', 'fontFamily'), 'font-size' => array('typography', 'fontSize'), 'font-style' => array('typography', 'fontStyle'), 'font-weight' => array('typography', 'fontWeight'), 'letter-spacing' => array('typography', 'letterSpacing'), 'line-height' => array('typography', 'lineHeight'), 'margin' => array('spacing', 'margin'), 'margin-top' => array('spacing', 'margin', 'top'), 'margin-right' => array('spacing', 'margin', 'right'), 'margin-bottom' => array('spacing', 'margin', 'bottom'), 'margin-left' => array('spacing', 'margin', 'left'), 'min-height' => array('dimensions', 'minHeight'), 'outline-color' => array('outline', 'color'), 'outline-offset' => array('outline', 'offset'), 'outline-style' => array('outline', 'style'), 'outline-width' => array('outline', 'width'), 'padding' => array('spacing', 'padding'), 'padding-top' => array('spacing', 'padding', 'top'), 'padding-right' => array('spacing', 'padding', 'right'), 'padding-bottom' => array('spacing', 'padding', 'bottom'), 'padding-left' => array('spacing', 'padding', 'left'), '--wp--style--root--padding' => array('spacing', 'padding'), '--wp--style--root--padding-top' => array('spacing', 'padding', 'top'), '--wp--style--root--padding-right' => array('spacing', 'padding', 'right'), '--wp--style--root--padding-bottom' => array('spacing', 'padding', 'bottom'), '--wp--style--root--padding-left' => array('spacing', 'padding', 'left'), 'text-decoration' => array('typography', 'textDecoration'), 'text-transform' => array('typography', 'textTransform'), 'filter' => array('filter', 'duotone'), 'box-shadow' => array('shadow'), 'writing-mode' => array('typography', 'writingMode'));
        /**
         * Indirect metadata for style properties that are not directly output.
         *
         * Each element maps from a CSS property name to an array of
         * paths to the value in theme.json & block attributes.
         *
         * Indirect properties are not output directly by `compute_style_properties`,
         * but are used elsewhere in the processing of global styles. The indirect
         * property is used to validate whether a style value is allowed.
         *
         * @since 6.2.0
         * @since 6.6.0 Added background-image properties.
         *
         * @var array
         */
        const INDIRECT_PROPERTIES_METADATA = array('gap' => array(array('spacing', 'blockGap')), 'column-gap' => array(array('spacing', 'blockGap', 'left')), 'row-gap' => array(array('spacing', 'blockGap', 'top')), 'max-width' => array(array('layout', 'contentSize'), array('layout', 'wideSize')), 'background-image' => array(array('background', 'backgroundImage', 'url')));
        /**
         * Protected style properties.
         *
         * These style properties are only rendered if a setting enables it
         * via a value other than `null`.
         *
         * Each element maps the style property to the corresponding theme.json
         * setting key.
         *
         * @since 5.9.0
         */
        const PROTECTED_PROPERTIES = array('spacing.blockGap' => array('spacing', 'blockGap'));
        /**
         * The top-level keys a theme.json can have.
         *
         * @since 5.8.0 As `ALLOWED_TOP_LEVEL_KEYS`.
         * @since 5.9.0 Renamed from `ALLOWED_TOP_LEVEL_KEYS` to `VALID_TOP_LEVEL_KEYS`,
         *              added the `customTemplates` and `templateParts` values.
         * @since 6.3.0 Added the `description` value.
         * @since 6.6.0 Added `blockTypes` to support block style variation theme.json partials.
         * @var string[]
         */
        const VALID_TOP_LEVEL_KEYS = array('blockTypes', 'customTemplates', 'description', 'patterns', 'settings', 'slug', 'styles', 'templateParts', 'title', 'version');
        /**
         * The valid properties under the settings key.
         *
         * @since 5.8.0 As `ALLOWED_SETTINGS`.
         * @since 5.9.0 Renamed from `ALLOWED_SETTINGS` to `VALID_SETTINGS`,
         *              added new properties for `border`, `color`, `spacing`,
         *              and `typography`, and renamed others according to the new schema.
         * @since 6.0.0 Added `color.defaultDuotone`.
         * @since 6.1.0 Added `layout.definitions` and `useRootPaddingAwareAlignments`.
         * @since 6.2.0 Added `dimensions.minHeight`, 'shadow.presets', 'shadow.defaultPresets',
         *              `position.fixed` and `position.sticky`.
         * @since 6.3.0 Added support for `typography.textColumns`, removed `layout.definitions`.
         * @since 6.4.0 Added support for `layout.allowEditing`, `background.backgroundImage`,
         *              `typography.writingMode`, `lightbox.enabled` and `lightbox.allowEditing`.
         * @since 6.5.0 Added support for `layout.allowCustomContentAndWideSize`,
         *              `background.backgroundSize` and `dimensions.aspectRatio`.
         * @since 6.6.0 Added support for 'dimensions.aspectRatios', 'dimensions.defaultAspectRatios',
         *              'typography.defaultFontSizes', and 'spacing.defaultSpacingSizes'.
         * @var array
         */
        const VALID_SETTINGS = array('appearanceTools' => \null, 'useRootPaddingAwareAlignments' => \null, 'background' => array('backgroundImage' => \null, 'backgroundSize' => \null), 'border' => array('color' => \null, 'radius' => \null, 'style' => \null, 'width' => \null), 'color' => array('background' => \null, 'custom' => \null, 'customDuotone' => \null, 'customGradient' => \null, 'defaultDuotone' => \null, 'defaultGradients' => \null, 'defaultPalette' => \null, 'duotone' => \null, 'gradients' => \null, 'link' => \null, 'heading' => \null, 'button' => \null, 'caption' => \null, 'palette' => \null, 'text' => \null), 'custom' => \null, 'dimensions' => array('aspectRatio' => \null, 'aspectRatios' => \null, 'defaultAspectRatios' => \null, 'minHeight' => \null), 'layout' => array('contentSize' => \null, 'wideSize' => \null, 'allowEditing' => \null, 'allowCustomContentAndWideSize' => \null), 'lightbox' => array('enabled' => \null, 'allowEditing' => \null), 'position' => array('fixed' => \null, 'sticky' => \null), 'spacing' => array('customSpacingSize' => \null, 'defaultSpacingSizes' => \null, 'spacingSizes' => \null, 'spacingScale' => \null, 'blockGap' => \null, 'margin' => \null, 'padding' => \null, 'units' => \null), 'shadow' => array('presets' => \null, 'defaultPresets' => \null), 'typography' => array('fluid' => \null, 'customFontSize' => \null, 'defaultFontSizes' => \null, 'dropCap' => \null, 'fontFamilies' => \null, 'fontSizes' => \null, 'fontStyle' => \null, 'fontWeight' => \null, 'letterSpacing' => \null, 'lineHeight' => \null, 'textAlign' => \null, 'textColumns' => \null, 'textDecoration' => \null, 'textTransform' => \null, 'writingMode' => \null));
        /*
         * The valid properties for fontFamilies under settings key.
         *
         * @since 6.5.0
         *
         * @var array
         */
        const FONT_FAMILY_SCHEMA = array(array('fontFamily' => \null, 'name' => \null, 'slug' => \null, 'fontFace' => array(array('ascentOverride' => \null, 'descentOverride' => \null, 'fontDisplay' => \null, 'fontFamily' => \null, 'fontFeatureSettings' => \null, 'fontStyle' => \null, 'fontStretch' => \null, 'fontVariationSettings' => \null, 'fontWeight' => \null, 'lineGapOverride' => \null, 'sizeAdjust' => \null, 'src' => \null, 'unicodeRange' => \null))));
        /**
         * The valid properties under the styles key.
         *
         * @since 5.8.0 As `ALLOWED_STYLES`.
         * @since 5.9.0 Renamed from `ALLOWED_STYLES` to `VALID_STYLES`,
         *              added new properties for `border`, `filter`, `spacing`,
         *              and `typography`.
         * @since 6.1.0 Added new side properties for `border`,
         *              added new property `shadow`,
         *              updated `blockGap` to be allowed at any level.
         * @since 6.2.0 Added `outline`, and `minHeight` properties.
         * @since 6.3.0 Added support for `typography.textColumns`.
         * @since 6.5.0 Added support for `dimensions.aspectRatio`.
         * @since 6.6.0 Added `background` sub properties to top-level only.
         *
         * @var array
         */
        const VALID_STYLES = array('background' => array('backgroundImage' => 'top', 'backgroundPosition' => 'top', 'backgroundRepeat' => 'top', 'backgroundSize' => 'top'), 'border' => array('color' => \null, 'radius' => \null, 'style' => \null, 'width' => \null, 'top' => \null, 'right' => \null, 'bottom' => \null, 'left' => \null), 'color' => array('background' => \null, 'gradient' => \null, 'text' => \null), 'dimensions' => array('aspectRatio' => \null, 'minHeight' => \null), 'filter' => array('duotone' => \null), 'outline' => array('color' => \null, 'offset' => \null, 'style' => \null, 'width' => \null), 'shadow' => \null, 'spacing' => array('margin' => \null, 'padding' => \null, 'blockGap' => \null), 'typography' => array('fontFamily' => \null, 'fontSize' => \null, 'fontStyle' => \null, 'fontWeight' => \null, 'letterSpacing' => \null, 'lineHeight' => \null, 'textAlign' => \null, 'textColumns' => \null, 'textDecoration' => \null, 'textTransform' => \null, 'writingMode' => \null), 'css' => \null);
        /**
         * Defines which pseudo selectors are enabled for which elements.
         *
         * The order of the selectors should be: link, any-link, visited, hover, focus, active.
         * This is to ensure the user action (hover, focus and active) styles have a higher
         * specificity than the visited styles, which in turn have a higher specificity than
         * the unvisited styles.
         *
         * See https://core.trac.wordpress.org/ticket/56928.
         * Note: this will affect both top-level and block-level elements.
         *
         * @since 6.1.0
         * @since 6.2.0 Added support for ':link' and ':any-link'.
         */
        const VALID_ELEMENT_PSEUDO_SELECTORS = array('link' => array(':link', ':any-link', ':visited', ':hover', ':focus', ':active'), 'button' => array(':link', ':any-link', ':visited', ':hover', ':focus', ':active'));
        /**
         * The valid elements that can be found under styles.
         *
         * @since 5.8.0
         * @since 6.1.0 Added `heading`, `button`, and `caption` elements.
         * @var string[]
         */
        const ELEMENTS = array(
            'link' => 'a:where(:not(.wp-element-button))',
            // The `where` is needed to lower the specificity.
            'heading' => 'h1, h2, h3, h4, h5, h6',
            'h1' => 'h1',
            'h2' => 'h2',
            'h3' => 'h3',
            'h4' => 'h4',
            'h5' => 'h5',
            'h6' => 'h6',
            // We have the .wp-block-button__link class so that this will target older buttons that have been serialized.
            'button' => '.wp-element-button, .wp-block-button__link',
            // The block classes are necessary to target older content that won't use the new class names.
            'caption' => '.wp-element-caption, .wp-block-audio figcaption, .wp-block-embed figcaption, .wp-block-gallery figcaption, .wp-block-image figcaption, .wp-block-table figcaption, .wp-block-video figcaption',
            'cite' => 'cite',
        );
        const __EXPERIMENTAL_ELEMENT_CLASS_NAMES = array('button' => 'wp-element-button', 'caption' => 'wp-element-caption');
        /**
         * List of block support features that can have their related styles
         * generated under their own feature level selector rather than the block's.
         *
         * @since 6.1.0
         * @var string[]
         */
        const BLOCK_SUPPORT_FEATURE_LEVEL_SELECTORS = array('__experimentalBorder' => 'border', 'color' => 'color', 'spacing' => 'spacing', 'typography' => 'typography');
        /**
         * @param array $schema
         * @return array
         */
        protected static function schema_in_root_and_per_origin($schema)
        {
        }
        /**
         * @param string $element
         * @return string
         */
        public static function get_element_class_name($element)
        {
        }
        /**
         * Options that settings.appearanceTools enables.
         *
         * @since 6.0.0
         * @since 6.2.0 Added `dimensions.minHeight` and `position.sticky`.
         * @since 6.4.0 Added `background.backgroundImage`.
         * @since 6.5.0 Added `background.backgroundSize` and `dimensions.aspectRatio`.
         * @var array
         */
        const APPEARANCE_TOOLS_OPT_INS = array(array('background', 'backgroundImage'), array('background', 'backgroundSize'), array('border', 'color'), array('border', 'radius'), array('border', 'style'), array('border', 'width'), array('color', 'link'), array('color', 'heading'), array('color', 'button'), array('color', 'caption'), array('dimensions', 'aspectRatio'), array('dimensions', 'minHeight'), array('position', 'sticky'), array('spacing', 'blockGap'), array('spacing', 'margin'), array('spacing', 'padding'), array('typography', 'lineHeight'));
        /**
         * The latest version of the schema in use.
         *
         * @since 5.8.0
         * @since 5.9.0 Changed value from 1 to 2.
         * @since 6.6.0 Changed value from 2 to 3.
         * @var int
         */
        const LATEST_SCHEMA = 3;
        /**
         * @param array $theme_json
         * @phpstan-param 'blocks'|'default'|'theme'|'custom' $origin
         */
        public function __construct($theme_json = array('version' => self::LATEST_SCHEMA), $origin = 'theme')
        {
        }
        /**
         * @param array $theme_json
         * @return array
         */
        protected static function maybe_opt_in_into_settings($theme_json)
        {
        }
        /**
         * @param array $context
         */
        protected static function do_opt_in_into_settings(&$context)
        {
        }
        /**
         * @param array $input
         * @param array $valid_block_names
         * @param array $valid_element_names
         * @param array $valid_variations
         * @return array
         */
        protected static function sanitize($input, $valid_block_names, $valid_element_names, $valid_variations)
        {
        }
        /**
         * @param string $selector
         * @param string $to_append
         * @return string
         */
        protected static function append_to_selector($selector, $to_append)
        {
        }
        /**
         * @param string $selector
         * @param string $to_prepend
         * @return string
         */
        protected static function prepend_to_selector($selector, $to_prepend)
        {
        }
        /**
         * @return array
         */
        protected static function get_blocks_metadata()
        {
        }
        /**
         * @param array $tree
         * @param array $schema
         * @return array
         */
        protected static function remove_keys_not_in_schema($tree, $schema)
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @param string[] $types
         * @param string[] $origins
         * @phpstan-param array{
         *   scope?: string,
         *   root_selector?: string,
         *   skip_root_layout_styles?: bool,
         *   include_block_style_variations?: bool,
         * } $options
         * @return string
         */
        public function get_stylesheet($types = array('variables', 'styles', 'presets'), $origins = \null, $options = array())
        {
        }
        /**
         * @param string $css
         * @param string $selector
         * @return string
         */
        protected function process_blocks_custom_css($css, $selector)
        {
        }
        /**
         * @return string
         */
        public function get_custom_css()
        {
        }
        /**
         * @return array
         */
        public function get_custom_templates()
        {
        }
        /**
         * @return array
         */
        public function get_template_parts()
        {
        }
        /**
         * @param array $style_nodes
         * @return string
         */
        protected function get_block_classes($style_nodes)
        {
        }
        /**
         * @param array $block_metadata
         * @param array $types
         * @return string
         */
        protected function get_layout_styles($block_metadata, $types = array())
        {
        }
        /**
         * @param array $setting_nodes
         * @param string[] $origins
         * @return string
         */
        protected function get_preset_classes($setting_nodes, $origins)
        {
        }
        /**
         * @param array $nodes
         * @param string[] $origins
         * @return string
         */
        protected function get_css_variables($nodes, $origins)
        {
        }
        /**
         * @param string $selector
         * @param array $declarations
         * @return string
         */
        protected static function to_ruleset($selector, $declarations)
        {
        }
        /**
         * @param array $settings
         * @param string $selector
         * @param string[] $origins
         * @return string
         */
        protected static function compute_preset_classes($settings, $selector, $origins)
        {
        }
        /**
         * @param string $scope
         * @param string $selector
         * @return string
         */
        public static function scope_selector($scope, $selector)
        {
        }
        /**
         * @param string $scope
         * @param array $node
         * @return array
         */
        protected static function scope_style_node_selectors($scope, $node)
        {
        }
        /**
         * @param array $settings
         * @param array $preset_metadata
         * @param string[] $origins
         * @return array
         */
        protected static function get_settings_values_by_slug($settings, $preset_metadata, $origins)
        {
        }
        /**
         * @param array $settings
         * @param array $preset_metadata
         * @param string[] $origins
         * @return array
         */
        protected static function get_settings_slugs($settings, $preset_metadata, $origins = \null)
        {
        }
        /**
         * @param string $input
         * @param string $slug
         * @return string
         */
        protected static function replace_slug_in_string($input, $slug)
        {
        }
        /**
         * @param array $settings
         * @param string[] $origins
         * @return array
         */
        protected static function compute_preset_vars($settings, $origins)
        {
        }
        /**
         * @param array $settings
         * @return array
         */
        protected static function compute_theme_vars($settings)
        {
        }
        /**
         * @param array $tree
         * @param string $prefix
         * @param string $token
         * @return array
         */
        protected static function flatten_tree($tree, $prefix = '', $token = '--')
        {
        }
        /**
         * @param array $styles
         * @param array $settings
         * @param array $properties
         * @param array $theme_json
         * @param string $selector
         * @param bool $use_root_padding
         * @return array
         */
        protected static function compute_style_properties($styles, $settings = array(), $properties = \null, $theme_json = \null, $selector = \null, $use_root_padding = \null)
        {
        }
        /**
         * @param array $styles
         * @param array $path
         * @param array $theme_json
         * @return string|array
         */
        protected static function get_property_value($styles, $path, $theme_json = \null)
        {
        }
        /**
         * @param array $theme_json
         * @param array $selectors
         * @return array
         */
        protected static function get_setting_nodes($theme_json, $selectors = array())
        {
        }
        /**
         * @param array $theme_json
         * @param array $selectors
         * @phpstan-param array{
         *   include_block_style_variations?: bool,
         * } $options
         * @return array
         */
        protected static function get_style_nodes($theme_json, $selectors = array(), $options = array())
        {
        }
        /**
         * @return array
         */
        public function get_styles_block_nodes()
        {
        }
        /**
         * @param array $block_metadata
         * @return string
         */
        public function get_styles_for_block($block_metadata)
        {
        }
        /**
         * @param string $selector
         * @param array $block_metadata
         * @return string
         */
        public function get_root_layout_rules($selector, $block_metadata)
        {
        }
        /**
         * @param array $data
         * @param bool|array $path
         * @param bool $default_value
         * @return bool
         */
        protected static function get_metadata_boolean($data, $path, $default_value = \false)
        {
        }
        /**
         * @param \WP_Theme_JSON $incoming
         */
        public function merge($incoming)
        {
        }
        /**
         * @param array $origins
         * @return string
         */
        public function get_svg_filters($origins)
        {
        }
        /**
         * @param array $theme_json
         * @param array $path
         * @param bool|array $override
         * @return bool
         */
        protected static function should_override_preset($theme_json, $path, $override)
        {
        }
        /**
         * @param array $data
         * @param array $node_path
         * @return array
         */
        protected static function get_default_slugs($data, $node_path)
        {
        }
        /**
         * @param string $slug
         * @param array $base_path
         * @return string|null
         */
        protected function get_name_from_defaults($slug, $base_path)
        {
        }
        /**
         * @param array $node
         * @param array $slugs
         * @return array
         */
        protected static function filter_slugs($node, $slugs)
        {
        }
        /**
         * @param array $theme_json
         * @phpstan-param 'blocks'|'default'|'theme'|'custom' $origin
         * @return array
         */
        public static function remove_insecure_properties($theme_json, $origin = 'theme')
        {
        }
        /**
         * @param array $input
         * @return array
         */
        protected static function remove_insecure_settings($input)
        {
        }
        /**
         * @param array $input
         * @return array
         */
        protected static function remove_insecure_styles($input)
        {
        }
        /**
         * @param string $property_name
         * @param string $property_value
         * @return bool
         */
        protected static function is_safe_css_declaration($property_name, $property_value)
        {
        }
        /**
         * @return array
         */
        public function get_raw_data()
        {
        }
        /**
         * @param array $settings
         * @return array
         */
        public static function get_from_editor_settings($settings)
        {
        }
        /**
         * @return string[]
         */
        public function get_patterns()
        {
        }
        /**
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * @return null|void
         */
        public function set_spacing_sizes()
        {
        }
        /**
         * @param object $block_type
         * @param string $root_selector
         * @return array
         */
        protected static function get_block_selectors($block_type, $root_selector)
        {
        }
        /**
         * @param string $root_selector
         * @return array
         */
        protected static function get_block_element_selectors($root_selector)
        {
        }
        /**
         * @param object $metadata
         * @param object $node
         * @return array
         */
        protected function get_feature_declarations_for_node($metadata, &$node)
        {
        }
        /**
         * @param \WP_Theme_JSON $theme_json
         * @return \WP_Theme_JSON
         */
        public static function resolve_variables($theme_json)
        {
        }
        /**
         * @param string $variation_name
         * @param string $block_selector
         * @return string
         */
        protected static function get_block_style_variation_selector($variation_name, $block_selector)
        {
        }
        /**
         * @return array
         */
        protected static function get_valid_block_style_variations()
        {
        }
    }
    /**
     * @phpstan-type ThemeKey 'Name'|'Version'|'Status'|'Title'|'Author'|'Author Name'|'Author URI'|'Description'|'Template'|'Stylesheet'|'Template Files'|'Stylesheet Files'|'Template Dir'|'Stylesheet Dir'|'Screenshot'|'Tags'|'Theme Root'|'Theme Root URI'|'Parent Theme'
     */
    #[\AllowDynamicProperties]
    final class WP_Theme implements \ArrayAccess
    {
        /**
         * @var bool
         */
        public $update = \false;
        /**
         * @param string $theme_dir
         * @param string $theme_root
         * @param \WP_Theme|null $_child
         * @phpstan-return void
         */
        public function __construct($theme_dir, $theme_root, $_child = \null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $offset
         * @return bool
         */
        public function __isset($offset)
        {
        }
        /**
         * @param string $offset
         * @return mixed
         */
        public function __get($offset)
        {
        }
        /**
         * @param mixed $offset
         * @param mixed $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param mixed $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * @param mixed $offset
         * @return bool
         * @phpstan-return ($offset is ThemeKey ? true : false)
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param mixed $offset
         * @return mixed
         * @phpstan-return ($offset is ThemeKey ? mixed : null)
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @return \WP_Error|false
         */
        public function errors()
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return \WP_Theme|false
         */
        public function parent()
        {
        }
        public function __wakeup()
        {
        }
        public function cache_delete()
        {
        }
        /**
         * @param string $header
         * @return string|array|false
         * @phpstan-return ($header is 'Name'|'ThemeURI'|'Description'|'Author'|'AuthorURI'|'Version'|'Template'|'Status'|'Tags'|'TextDomain'|'DomainPath'|'RequiresWP'|'RequiresPHP'|'UpdateURI' ? ($header is 'Tags' ? string[] : string) : false)
         */
        public function get($header)
        {
        }
        /**
         * @param string $header
         * @param bool $markup
         * @param bool $translate
         * @return string|array|false
         */
        public function display($header, $markup = \true, $translate = \true)
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet_directory()
        {
        }
        /**
         * @return string
         */
        public function get_template_directory()
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet_directory_uri()
        {
        }
        /**
         * @return string
         */
        public function get_template_directory_uri()
        {
        }
        /**
         * @return string
         */
        public function get_theme_root()
        {
        }
        /**
         * @return string
         */
        public function get_theme_root_uri()
        {
        }
        /**
         * @param string $uri
         * @return string|false
         */
        public function get_screenshot($uri = 'uri')
        {
        }
        /**
         * @param string[]|string $type
         * @param int $depth
         * @param bool $search_parent
         * @return string[]
         */
        public function get_files($type = \null, $depth = 0, $search_parent = \false)
        {
        }
        /**
         * @return array[]
         */
        public function get_post_templates()
        {
        }
        /**
         * @param \WP_Post|null $post
         * @param string $post_type
         * @return string[]
         */
        public function get_page_templates($post = \null, $post_type = 'page')
        {
        }
        /**
         * @return bool
         */
        public function load_textdomain()
        {
        }
        /**
         * @param string $check
         * @param int $blog_id
         * @return bool
         */
        public function is_allowed($check = 'both', $blog_id = \null)
        {
        }
        /**
         * @return bool
         */
        public function is_block_theme()
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function get_file_path($file = '')
        {
        }
        /**
         * @return \WP_Theme|false
         */
        public static function get_core_default_theme()
        {
        }
        /**
         * @param int $blog_id
         * @return string[]
         */
        public static function get_allowed($blog_id = \null)
        {
        }
        /**
         * @return string[]
         */
        public static function get_allowed_on_network()
        {
        }
        /**
         * @param int $blog_id
         * @return string[]
         */
        public static function get_allowed_on_site($blog_id = \null)
        {
        }
        /**
         * @phpstan-return array{
         *   wp_template: string,
         *   wp_template_part: string,
         * }
         */
        public function get_block_template_folders()
        {
        }
        /**
         * @return array
         */
        public function get_block_patterns()
        {
        }
        public function delete_pattern_cache()
        {
        }
        /**
         * @param string|string[] $stylesheets
         * @phpstan-return void
         */
        public static function network_enable_theme($stylesheets)
        {
        }
        /**
         * @param string|string[] $stylesheets
         * @phpstan-return void
         */
        public static function network_disable_theme($stylesheets)
        {
        }
        /**
         * @param \WP_Theme[] $themes
         */
        public static function sort_by_name(&$themes)
        {
        }
    }
    class WP_Token_Map
    {
        /**
         * Denotes the version of the code which produces pre-computed source tables.
         *
         * This version will be used not only to verify pre-computed data, but also
         * to upgrade pre-computed data from older versions. Choosing a name that
         * corresponds to the WordPress release will help people identify where an
         * old copy of data came from.
         */
        const STORAGE_VERSION = '6.6.0-trunk';
        /**
         * Maximum length for each key and each transformed value in the table (in bytes).
         *
         * @since 6.6.0
         */
        const MAX_LENGTH = 256;
        /**
         * @param array $mappings
         * @param int $key_length
         * @return \WP_Token_Map|null
         */
        public static function from_array($mappings, $key_length = 2)
        {
        }
        /**
         * @phpstan-param array{
         *   storage_version?: string,
         *   key_length?: int,
         *   groups?: string,
         *   large_words?: array,
         *   small_words?: string,
         *   small_mappings?: array,
         * } $state
         * @return \WP_Token_Map
         */
        public static function from_precomputed_table($state)
        {
        }
        /**
         * @param string $word
         * @param string $case_sensitivity
         * @return bool
         */
        public function contains($word, $case_sensitivity = 'case-sensitive')
        {
        }
        /**
         * @param string $text
         * @param int $offset
         * @param ?int $matched_token_byte_length
         * @param string $case_sensitivity
         * @return string|null
         */
        public function read_token($text, $offset = 0, &$matched_token_byte_length = \null, $case_sensitivity = 'case-sensitive')
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @param string $indent
         * @return string
         */
        public function precomputed_php_source_table($indent = "\t")
        {
        }
    }
    class WP_User_Meta_Session_Tokens extends \WP_Session_Tokens
    {
        /**
         * @return array
         */
        protected function get_sessions()
        {
        }
        /**
         * @param mixed $session
         * @return array
         */
        protected function prepare_session($session)
        {
        }
        /**
         * @param string $verifier
         * @return array|null
         */
        protected function get_session($verifier)
        {
        }
        /**
         * @param string $verifier
         * @param array $session
         */
        protected function update_session($verifier, $session = \null)
        {
        }
        /**
         * @param array $sessions
         */
        protected function update_sessions($sessions)
        {
        }
        /**
         * @param string $verifier
         */
        protected function destroy_other_sessions($verifier)
        {
        }
        protected function destroy_all_sessions()
        {
        }
        public static function drop_sessions()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_User_Query
    {
        /**
         * @var array
         */
        public $query_vars = array();
        /**
         * @var \WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * @var string
         */
        public $request;
        // SQL clauses.
        public $query_fields;
        public $query_from;
        public $query_where;
        public $query_orderby;
        public $query_limit;
        /**
         * @param null|string|array $query
         * @phpstan-param array{
         *   blog_id?: int,
         *   role?: string|string[],
         *   role__in?: string[],
         *   role__not_in?: string[],
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         *   capability?: string|string[],
         *   capability__in?: string[],
         *   capability__not_in?: string[],
         *   include?: int[],
         *   exclude?: int[],
         *   search?: string,
         *   search_columns?: string[],
         *   orderby?: string|array,
         *   order?: string,
         *   offset?: int,
         *   number?: int,
         *   paged?: int,
         *   count_total?: bool,
         *   fields?: string|string[],
         *   who?: string,
         *   has_published_posts?: bool|string[],
         *   nicename?: string,
         *   nicename__in?: string[],
         *   nicename__not_in?: string[],
         *   login?: string,
         *   login__in?: string[],
         *   login__not_in?: string[],
         *   cache_results?: bool,
         * } $query See WP_User_Query::prepare_query()
         */
        public function __construct($query = \null)
        {
        }
        /**
         * @param string|array $args
         * @return array
         */
        public static function fill_query_vars($args)
        {
        }
        /**
         * @phpstan-param array{
         *   blog_id?: int,
         *   role?: string|string[],
         *   role__in?: string[],
         *   role__not_in?: string[],
         *   meta_key?: string|string[],
         *   meta_value?: string|string[],
         *   meta_compare?: string,
         *   meta_compare_key?: string,
         *   meta_type?: string,
         *   meta_type_key?: string,
         *   meta_query?: array,
         *   capability?: string|string[],
         *   capability__in?: string[],
         *   capability__not_in?: string[],
         *   include?: int[],
         *   exclude?: int[],
         *   search?: string,
         *   search_columns?: string[],
         *   orderby?: string|array,
         *   order?: string,
         *   offset?: int,
         *   number?: int,
         *   paged?: int,
         *   count_total?: bool,
         *   fields?: string|string[],
         *   who?: string,
         *   has_published_posts?: bool|string[],
         *   nicename?: string,
         *   nicename__in?: string[],
         *   nicename__not_in?: string[],
         *   login?: string,
         *   login__in?: string[],
         *   login__not_in?: string[],
         *   cache_results?: bool,
         * } $query
         */
        public function prepare_query($query = array())
        {
        }
        /**
         * @phpstan-return void
         */
        public function query()
        {
        }
        /**
         * @param string $query_var
         * @return mixed
         */
        public function get($query_var)
        {
        }
        /**
         * @param string $query_var
         * @param mixed $value
         */
        public function set($query_var, $value)
        {
        }
        /**
         * @param string $search
         * @param string[] $columns
         * @param bool $wild
         * @return string
         */
        protected function get_search_sql($search, $columns, $wild = \false)
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        /**
         * @return int
         */
        public function get_total()
        {
        }
        /**
         * @param string $orderby
         * @return string
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * @param array $args
         * @param string $sql
         * @return string
         */
        protected function generate_cache_key(array $args, $sql)
        {
        }
        /**
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @phpstan-return void
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_User_Request
    {
        /**
         * @var int
         */
        public $ID = 0;
        /**
         * @var int
         */
        public $user_id = 0;
        /**
         * @var string
         */
        public $email = '';
        /**
         * @var string
         */
        public $action_name = '';
        /**
         * @var string
         */
        public $status = '';
        /**
         * @var int|null
         */
        public $created_timestamp = \null;
        /**
         * @var int|null
         */
        public $modified_timestamp = \null;
        /**
         * @var int|null
         */
        public $confirmed_timestamp = \null;
        /**
         * @var int|null
         */
        public $completed_timestamp = \null;
        /**
         * @var array
         */
        public $request_data = array();
        /**
         * @var string
         */
        public $confirm_key = '';
        /**
         * @param \WP_Post|object $post
         */
        public function __construct($post)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_User
    {
        /**
         * @var \stdClass
         */
        public $data;
        /**
         * @var int
         */
        public $ID = 0;
        /**
         * @var bool[]
         */
        public $caps = array();
        /**
         * @var string
         */
        public $cap_key;
        /**
         * @var string[]
         */
        public $roles = array();
        /**
         * @var bool[]
         */
        public $allcaps = array();
        /**
         * @var string
         */
        public $filter = \null;
        /**
         * @param int|string|\stdClass|\WP_User $id
         * @param string $name
         * @param int $site_id
         * @phpstan-return void
         */
        public function __construct($id = 0, $name = '', $site_id = '')
        {
        }
        /**
         * @param object $data
         * @param int $site_id
         */
        public function init($data, $site_id = '')
        {
        }
        /**
         * @phpstan-param 'id'|'ID'|'slug'|'email'|'login' $field
         * @param string|int $value
         * @return object|false
         */
        public static function get_data_by($field, $value)
        {
        }
        /**
         * @param string $key
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function __unset($key)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         * @return bool
         */
        public function has_prop($key)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return mixed|false
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @param string $cap_key
         */
        protected function _init_caps($cap_key = '')
        {
        }
        /**
         * @return bool[]
         */
        public function get_role_caps()
        {
        }
        /**
         * @param string $role
         * @phpstan-return void
         */
        public function add_role($role)
        {
        }
        /**
         * @param string $role
         * @phpstan-return void
         */
        public function remove_role($role)
        {
        }
        /**
         * @param string $role
         * @phpstan-return void
         */
        public function set_role($role)
        {
        }
        /**
         * @param int $max
         * @param string $item
         * @return int
         */
        public function level_reduction($max, $item)
        {
        }
        public function update_user_level_from_caps()
        {
        }
        /**
         * @param string $cap
         * @param bool $grant
         */
        public function add_cap($cap, $grant = \true)
        {
        }
        /**
         * @param string $cap
         * @phpstan-return void
         */
        public function remove_cap($cap)
        {
        }
        public function remove_all_caps()
        {
        }
        /**
         * @param string $cap
         * @param mixed $args
         * @return bool
         */
        public function has_cap($cap, ...$args)
        {
        }
        /**
         * @param int $level
         * @return string
         */
        public function translate_level_to_cap($level)
        {
        }
        /**
         * @param int $blog_id
         */
        public function for_blog($blog_id = '')
        {
        }
        /**
         * @param int $site_id
         */
        public function for_site($site_id = '')
        {
        }
        /**
         * @return int
         */
        public function get_site_id()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Widget_Factory
    {
        /**
         * @var array
         */
        public $widgets = array();
        public function __construct()
        {
        }
        public function WP_Widget_Factory()
        {
        }
        /**
         * @param string|\WP_Widget $widget
         */
        public function register($widget)
        {
        }
        /**
         * @param string|\WP_Widget $widget
         */
        public function unregister($widget)
        {
        }
        public function _register_widgets()
        {
        }
        /**
         * @param string $id_base
         * @return \WP_Widget|null
         */
        public function get_widget_object($id_base)
        {
        }
        /**
         * @param string $id_base
         * @return string
         */
        public function get_widget_key($id_base)
        {
        }
    }
    /**
     * Widget API: WP_Widget base class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * @phpstan-template T of array<string, mixed>
     */
    #[\AllowDynamicProperties]
    class WP_Widget
    {
        /**
         * @var mixed|string
         */
        public $id_base;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $option_name;
        /**
         * @var string
         */
        public $alt_option_name;
        /**
         * @var array
         */
        public $widget_options;
        /**
         * @var array
         */
        public $control_options;
        /**
         * @var bool|int
         */
        public $number = \false;
        /**
         * @var bool|string
         */
        public $id = \false;
        /**
         * @var bool
         */
        public $updated = \false;
        //
        // Member functions that must be overridden by subclasses.
        //
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-param T $instance
         * @phpstan-param array{name:string,id:string,description:string,class:string,before_widget:string,after_widget:string,before_title:string,after_title:string,before_sidebar:string,after_sidebar:string,show_in_rest:boolean,widget_id:string,widget_name:string} $args
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         * @phpstan-param T $new_instance
         * @phpstan-param T $old_instance
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         * @return string
         * @phpstan-param T $instance
         */
        public function form($instance)
        {
        }
        // Functions you'll need to call.
        /**
         * @param string $id_base
         * @param string $name
         * @param array $widget_options
         * @param array $control_options
         * @phpstan-param array{
         *   classname?: string,
         *   description?: string,
         *   show_instance_in_rest?: bool,
         * } $widget_options See wp_register_sidebar_widget()
         * @phpstan-param array{
         *   height?: int,
         *   width?: int,
         *   id_base?: int|string,
         * } $control_options See wp_register_widget_control()
         */
        public function __construct($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * @param string $id_base
         * @param string $name
         * @param array $widget_options
         * @param array $control_options
         * @phpstan-param array{
         *   classname?: string,
         *   description?: string,
         *   show_instance_in_rest?: bool,
         * } $widget_options See wp_register_sidebar_widget()
         * @phpstan-param array{
         *   height?: int,
         *   width?: int,
         *   id_base?: int|string,
         * } $control_options See wp_register_widget_control()
         */
        public function WP_Widget($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * @param string $field_name
         * @return string
         */
        public function get_field_name($field_name)
        {
        }
        /**
         * @param string $field_name
         * @return string
         */
        public function get_field_id($field_name)
        {
        }
        public function _register()
        {
        }
        /**
         * @param int $number
         */
        public function _set($number)
        {
        }
        /**
         * @return callable
         */
        public function _get_display_callback()
        {
        }
        /**
         * @return callable
         */
        public function _get_update_callback()
        {
        }
        /**
         * @return callable
         */
        public function _get_form_callback()
        {
        }
        /**
         * @return bool
         */
        public function is_preview()
        {
        }
        /**
         * @param array $args
         * @phpstan-param int|array{
         *   number?: int,
         * } $widget_args
         * @phpstan-return void
         * @param array $args
         */
        public function display_callback($args, $widget_args = 1)
        {
        }
        /**
         * @param int $deprecated
         * @phpstan-return void
         */
        public function update_callback($deprecated = 1)
        {
        }
        /**
         * @phpstan-param int|array{
         *   number?: int,
         * } $widget_args
         * @return string|null
         */
        public function form_callback($widget_args = 1)
        {
        }
        /**
         * @param int $number
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * @param array $settings
         */
        public function save_settings($settings)
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
    }
    #[\AllowDynamicProperties]
    class wp_xmlrpc_server extends \IXR_Server
    {
        /**
         * @var array
         */
        public $methods;
        /**
         * @var array
         */
        public $blog_options;
        /**
         * @var \IXR_Error
         */
        public $error;
        /**
         * @var bool
         */
        protected $auth_failed = \false;
        public function __construct()
        {
        }
        /**
         * @param string $name
         * @param array $arguments
         * @return array|\IXR_Error|false
         */
        public function __call($name, $arguments)
        {
        }
        public function serve_request()
        {
        }
        /**
         * @return string
         */
        public function sayHello()
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         * } $args
         * @return int
         */
        public function addTwoNumbers($args)
        {
        }
        /**
         * @param string $username
         * @param string $password
         * @return \WP_User|false
         */
        public function login($username, $password)
        {
        }
        /**
         * @param string $username
         * @param string $password
         * @return bool
         */
        public function login_pass_ok($username, $password)
        {
        }
        /**
         * @param string|array $data
         * @return string|void
         */
        public function escape(&$data)
        {
        }
        /**
         * @param \IXR_Error|string $error
         * @param false $message
         */
        public function error($error, $message = \false)
        {
        }
        /**
         * @param int $post_id
         * @return array
         */
        public function get_custom_fields($post_id)
        {
        }
        /**
         * @param int $post_id
         * @param array $fields
         */
        public function set_custom_fields($post_id, $fields)
        {
        }
        /**
         * @param int $term_id
         * @return array
         */
        public function get_term_custom_fields($term_id)
        {
        }
        /**
         * @param int $term_id
         * @param array $fields
         */
        public function set_term_custom_fields($term_id, $fields)
        {
        }
        public function initialise_blog_option_info()
        {
        }
        /**
         * @phpstan-param array{
         *   0: string,
         *   1: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getUsersBlogs($args)
        {
        }
        /**
         * @param array $args
         * @param int $count
         * @return bool
         */
        protected function minimum_args($args, $count)
        {
        }
        /**
         * @param \WP_Taxonomy $taxonomy
         * @param array $fields
         * @return array
         */
        protected function _prepare_taxonomy($taxonomy, $fields)
        {
        }
        /**
         * @param array|object $term
         * @return array
         */
        protected function _prepare_term($term)
        {
        }
        /**
         * @param string $date
         * @return \IXR_Date
         */
        protected function _convert_date($date)
        {
        }
        /**
         * @param string $date_gmt
         * @param string $date
         * @return \IXR_Date
         */
        protected function _convert_date_gmt($date_gmt, $date)
        {
        }
        /**
         * @param array $post
         * @param array $fields
         * @return array
         */
        protected function _prepare_post($post, $fields)
        {
        }
        /**
         * @param \WP_Post_Type $post_type
         * @param array $fields
         * @return array
         */
        protected function _prepare_post_type($post_type, $fields)
        {
        }
        /**
         * @param \WP_Post $media_item
         * @param string $thumbnail_size
         * @return array
         */
        protected function _prepare_media_item($media_item, $thumbnail_size = 'thumbnail')
        {
        }
        /**
         * @param \WP_Post $page
         * @return array
         */
        protected function _prepare_page($page)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @return array
         */
        protected function _prepare_comment($comment)
        {
        }
        /**
         * @param \WP_User $user
         * @param array $fields
         * @return array
         */
        protected function _prepare_user($user, $fields)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array{
         *     post_type?: string,
         *     post_status?: string,
         *     post_title: string,
         *     post_author: int,
         *     post_excerpt: string,
         *     post_content: string,
         *     post_date_gmt: string,
         *     post_date: string,
         *     post_password: string,
         *     comment_status: string,
         *     ping_status: string,
         *     sticky: bool,
         *     post_thumbnail: int,
         *     custom_fields: array,
         *     terms: array,
         *     terms_names: array,
         *     enclosure: array{
         *       url: string,
         *       length: int,
         *       type: string,
         *     },
         *   },
         * } $args
         * @return int|\IXR_Error
         */
        public function wp_newPost($args)
        {
        }
        /**
         * @param \WP_User $user
         * @param array|\IXR_Error $content_struct
         * @return \IXR_Error|string
         */
        protected function _insert_post($user, $content_struct)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_editPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_deletePost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPosts($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return int|\IXR_Error
         */
        public function wp_newTerm($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_editTerm($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string,
         *   4: int,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_deleteTerm($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string,
         *   4: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getTerm($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getTerms($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getTaxonomy($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getTaxonomies($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getUser($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getUsers($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getProfile($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_editProfile($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         *   2: string,
         *   3: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPage($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPages($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return int|\IXR_Error
         */
        public function wp_newPage($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_deletePage($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         *   2: string,
         *   3: string,
         *   4: string,
         *   5: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_editPage($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPageList($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getAuthors($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getTags($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return int|\IXR_Error
         */
        public function wp_newCategory($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return bool|\IXR_Error
         */
        public function wp_deleteCategory($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_suggestCategories($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getComment($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getComments($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return bool|\IXR_Error
         */
        public function wp_deleteComment($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return true|\IXR_Error
         */
        public function wp_editComment($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string|int,
         *   4: array,
         * } $args
         * @return int|\IXR_Error
         */
        public function wp_newComment($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getCommentStatusList($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getCommentCount($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPostStatusList($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPageStatusList($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPageTemplates($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getOptions($args)
        {
        }
        /**
         * @param array $options
         * @return array
         */
        public function _getOptions($options)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_setOptions($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getMediaItem($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getMediaLibrary($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPostFormats($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: string,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPostType($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getPostTypes($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         *   4: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function wp_getRevisions($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return bool|\IXR_Error
         */
        public function wp_restoreRevision($args)
        {
        }
        /*
         * Blogger API functions.
         * Specs on http://plant.blogger.com/api and https://groups.yahoo.com/group/bloggerDev/
         */
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function blogger_getUsersBlogs($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        protected function _multisite_getUsersBlogs($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function blogger_getUserInfo($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         *   2: string,
         *   3: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function blogger_getPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: string,
         *   1: int,
         *   2: string,
         *   3: string,
         *   4: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function blogger_getRecentPosts($args)
        {
        }
        /**
         * @param array $args
         * @return \IXR_Error
         */
        public function blogger_getTemplate($args)
        {
        }
        /**
         * @param array $args
         * @return \IXR_Error
         */
        public function blogger_setTemplate($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: string,
         *   1: int,
         *   2: string,
         *   3: string,
         *   4: string,
         *   5: int,
         * } $args
         * @return int|\IXR_Error
         */
        public function blogger_newPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         *   2: string,
         *   3: string,
         *   4: string,
         *   5: int,
         * } $args
         * @return true|\IXR_Error
         */
        public function blogger_editPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: int,
         *   2: string,
         *   3: string,
         * } $args
         * @return true|\IXR_Error
         */
        public function blogger_deletePost($args)
        {
        }
        /*
         * MetaWeblog API functions.
         * Specs on wherever Dave Winer wants them to be.
         */
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: int,
         * } $args
         * @return int|\IXR_Error
         */
        public function mw_newPost($args)
        {
        }
        /**
         * @param int $post_id
         * @param array $enclosure
         */
        public function add_enclosure_if_new($post_id, $enclosure)
        {
        }
        /**
         * @param int $post_id
         * @param string $post_content
         */
        public function attach_uploads($post_id, $post_content)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         *   4: int,
         * } $args
         * @return true|\IXR_Error
         */
        public function mw_editPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function mw_getPost($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function mw_getRecentPosts($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function mw_getCategories($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return array|\IXR_Error
         */
        public function mw_newMediaObject($args)
        {
        }
        /*
         * MovableType API functions.
         * Specs archive on http://web.archive.org/web/20050220091302/http://www.movabletype.org:80/docs/mtmanual_programmatic.html
         */
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: int,
         * } $args
         * @return array|\IXR_Error
         */
        public function mt_getRecentPostTitles($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function mt_getCategoryList($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return array|\IXR_Error
         */
        public function mt_getPostCategories($args)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         *   3: array,
         * } $args
         * @return true|\IXR_Error
         */
        public function mt_setPostCategories($args)
        {
        }
        /**
         * @return array
         */
        public function mt_supportedMethods()
        {
        }
        public function mt_supportedTextFilters()
        {
        }
        /**
         * @param int $post_id
         * @return array|\IXR_Error
         */
        public function mt_getTrackbackPings($post_id)
        {
        }
        /**
         * @phpstan-param array{
         *   0: int,
         *   1: string,
         *   2: string,
         * } $args
         * @return int|\IXR_Error
         */
        public function mt_publishPost($args)
        {
        }
        /*
         * Pingback functions.
         * Specs on www.hixie.ch/specs/pingback/pingback
         */
        /**
         * @phpstan-param array{
         *   0: string,
         *   1: string,
         * } $args
         * @return string|\IXR_Error
         */
        public function pingback_ping($args)
        {
        }
        /**
         * @param string $url
         * @return array|\IXR_Error
         */
        public function pingback_extensions_getPingbacks($url)
        {
        }
        /**
         * @param int $code
         * @param string $message
         * @return \IXR_Error
         */
        protected function pingback_error($code, $message)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP
    {
        /**
         * @var string[]
         */
        public $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'pagename', 'page_id', 'error', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'favicon', 'taxonomy', 'term', 'cpage', 'post_type', 'embed');
        /**
         * @var string[]
         */
        public $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'title', 'fields');
        /**
         * @var array
         */
        public $extra_query_vars = array();
        /**
         * @var array
         */
        public $query_vars = array();
        /**
         * @var string
         */
        public $query_string = '';
        /**
         * @var string
         */
        public $request = '';
        /**
         * @var string
         */
        public $matched_rule = '';
        /**
         * @var string
         */
        public $matched_query = '';
        /**
         * @var bool
         */
        public $did_permalink = \false;
        /**
         * @param string $qv
         */
        public function add_query_var($qv)
        {
        }
        /**
         * @param string $name
         */
        public function remove_query_var($name)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function set_query_var($key, $value)
        {
        }
        /**
         * @param array|string $extra_query_vars
         * @return bool
         */
        public function parse_request($extra_query_vars = '')
        {
        }
        public function send_headers()
        {
        }
        public function build_query_string()
        {
        }
        public function register_globals()
        {
        }
        public function init()
        {
        }
        public function query_posts()
        {
        }
        /**
         * @phpstan-return void
         */
        public function handle_404()
        {
        }
        /**
         * @param string|array $query_args
         */
        public function main($query_args = '')
        {
        }
    }
    #[\AllowDynamicProperties]
    class wpdb
    {
        /**
         * @var bool
         */
        public $show_errors = \false;
        /**
         * @var bool
         */
        public $suppress_errors = \false;
        /**
         * @var string
         */
        public $last_error = '';
        /**
         * @var int
         */
        public $num_queries = 0;
        /**
         * @var int
         */
        public $num_rows = 0;
        /**
         * @var int
         */
        public $rows_affected = 0;
        /**
         * @var int
         */
        public $insert_id = 0;
        /**
         * @var string
         */
        public $last_query;
        /**
         * @var \stdClass[]|null
         */
        public $last_result;
        /**
         * @var \mysqli_result|bool|null
         */
        protected $result;
        /**
         * @var array
         */
        protected $col_meta = array();
        /**
         * @var string[]
         */
        protected $table_charset = array();
        /**
         * @var bool
         */
        protected $check_current_query = \true;
        /**
         * @var array
         */
        protected $col_info;
        /**
         * @phpstan-var array<int|string, array{
         *   0: string,
         *   1: float,
         *   2: string,
         *   3: float,
         *   4: array,
         * }>
         */
        public $queries;
        /**
         * @var int
         */
        protected $reconnect_retries = 5;
        /**
         * @var string
         */
        public $prefix = '';
        /**
         * @var string
         */
        public $base_prefix;
        /**
         * @var bool
         */
        public $ready = \false;
        /**
         * @var int
         */
        public $blogid = 0;
        /**
         * @var int
         */
        public $siteid = 0;
        /**
         * @var string[]
         */
        public $tables = array('posts', 'comments', 'links', 'options', 'postmeta', 'terms', 'term_taxonomy', 'term_relationships', 'termmeta', 'commentmeta');
        /**
         * @var string[]
         */
        public $old_tables = array('categories', 'post2cat', 'link2cat');
        /**
         * @var string[]
         */
        public $global_tables = array('users', 'usermeta');
        /**
         * @var string[]
         */
        public $ms_global_tables = array('blogs', 'blogmeta', 'signups', 'site', 'sitemeta', 'registration_log');
        /**
         * @var string[]
         */
        public $old_ms_global_tables = array('sitecategories');
        /**
         * @var string
         */
        public $comments;
        /**
         * @var string
         */
        public $commentmeta;
        /**
         * @var string
         */
        public $links;
        /**
         * @var string
         */
        public $options;
        /**
         * @var string
         */
        public $postmeta;
        /**
         * @var string
         */
        public $posts;
        /**
         * @var string
         */
        public $terms;
        /**
         * @var string
         */
        public $term_relationships;
        /**
         * @var string
         */
        public $term_taxonomy;
        /**
         * @var string
         */
        public $termmeta;
        //
        // Global and Multisite tables
        //
        /**
         * @var string
         */
        public $usermeta;
        /**
         * @var string
         */
        public $users;
        /**
         * @var string
         */
        public $blogs;
        /**
         * @var string
         */
        public $blogmeta;
        /**
         * @var string
         */
        public $registration_log;
        /**
         * @var string
         */
        public $signups;
        /**
         * @var string
         */
        public $site;
        /**
         * @var string
         */
        public $sitecategories;
        /**
         * @var string
         */
        public $sitemeta;
        /**
         * @var array
         */
        public $field_types = array();
        /**
         * @var string
         */
        public $charset;
        /**
         * @var string
         */
        public $collate;
        /**
         * @var string
         */
        protected $dbuser;
        /**
         * @var string
         */
        protected $dbpassword;
        /**
         * @var string
         */
        protected $dbname;
        /**
         * @var string
         */
        protected $dbhost;
        /**
         * @var \mysqli|false|null
         */
        protected $dbh;
        /**
         * @var string
         */
        public $func_call;
        /**
         * @var bool
         */
        public $is_mysql = \null;
        /**
         * @var string[]
         */
        protected $incompatible_modes = array('NO_ZERO_DATE', 'ONLY_FULL_GROUP_BY', 'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES', 'TRADITIONAL', 'ANSI');
        /**
         * @var float
         */
        public $time_start = \null;
        /**
         * @var \WP_Error|string
         */
        public $error = \null;
        /**
         * @param string $dbuser
         * @param string $dbpassword
         * @param string $dbname
         * @param string $dbhost
         * @phpstan-return void
         */
        public function __construct($dbuser, $dbpassword, $dbname, $dbhost)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @phpstan-return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        public function init_charset()
        {
        }
        /**
         * @param string $charset
         * @param string $collate
         * @phpstan-return array{
         *   charset: string,
         *   collate: string,
         * }
         */
        public function determine_charset($charset, $collate)
        {
        }
        /**
         * @param \mysqli $dbh
         * @param string $charset
         * @param string $collate
         */
        public function set_charset($dbh, $charset = \null, $collate = \null)
        {
        }
        /**
         * @param array $modes
         * @phpstan-return void
         */
        public function set_sql_mode($modes = array())
        {
        }
        /**
         * @param string $prefix
         * @param bool $set_table_names
         * @return string|\WP_Error
         */
        public function set_prefix($prefix, $set_table_names = \true)
        {
        }
        /**
         * @param int $blog_id
         * @param int $network_id
         * @return int
         */
        public function set_blog_id($blog_id, $network_id = 0)
        {
        }
        /**
         * @param int $blog_id
         * @return string
         */
        public function get_blog_prefix($blog_id = \null)
        {
        }
        /**
         * @param string $scope
         * @param bool $prefix
         * @param int $blog_id
         * @return string[]
         */
        public function tables($scope = 'all', $prefix = \true, $blog_id = 0)
        {
        }
        /**
         * @param string $db
         * @param \mysqli $dbh
         */
        public function select($db, $dbh = \null)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public function _weak_escape($data)
        {
        }
        /**
         * @param string $data
         * @return string
         */
        public function _real_escape($data)
        {
        }
        /**
         * @param string|array $data
         * @return string|array
         */
        public function _escape($data)
        {
        }
        /**
         * @param string|array $data
         * @return string|array
         */
        public function escape($data)
        {
        }
        /**
         * @param string $data
         */
        public function escape_by_ref(&$data)
        {
        }
        /**
         * @param string $identifier
         * @return string
         */
        public function quote_identifier($identifier)
        {
        }
        /**
         * @param string $query
         * @param array|mixed $args
         * @param mixed $args
         * @return string|void
         * @phpstan-param literal-string $query
         */
        public function prepare($query, ...$args)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public function esc_like($text)
        {
        }
        /**
         * @param string $str
         * @return void|false
         */
        public function print_error($str = '')
        {
        }
        /**
         * @param bool $show
         * @return bool
         */
        public function show_errors($show = \true)
        {
        }
        /**
         * @return bool
         */
        public function hide_errors()
        {
        }
        /**
         * @param bool $suppress
         * @return bool
         */
        public function suppress_errors($suppress = \true)
        {
        }
        /**
         * @phpstan-return void
         */
        public function flush()
        {
        }
        /**
         * @param bool $allow_bail
         * @return bool
         */
        public function db_connect($allow_bail = \true)
        {
        }
        /**
         * @param string $host
         * @phpstan-return false|array{
         *   0: string,
         *   1: string|null,
         *   2: string|null,
         *   3: bool,
         * }
         */
        public function parse_db_host($host)
        {
        }
        /**
         * @param bool $allow_bail
         * @return bool|void
         */
        public function check_connection($allow_bail = \true)
        {
        }
        /**
         * @param string $query
         * @return int|bool
         */
        public function query($query)
        {
        }
        /**
         * @param string $query
         * @param float $query_time
         * @param string $query_callstack
         * @param float $query_start
         * @param array $query_data
         */
        public function log_query($query, $query_time, $query_callstack, $query_start, $query_data)
        {
        }
        /**
         * @return string
         */
        public function placeholder_escape()
        {
        }
        /**
         * @param string $query
         * @return string
         */
        public function add_placeholder_escape($query)
        {
        }
        /**
         * @param string $query
         * @return string
         */
        public function remove_placeholder_escape($query)
        {
        }
        /**
         * @param string $table
         * @param array $data
         * @param string[]|string $format
         * @return int|false
         */
        public function insert($table, $data, $format = \null)
        {
        }
        /**
         * @param string $table
         * @param array $data
         * @param string[]|string $format
         * @return int|false
         */
        public function replace($table, $data, $format = \null)
        {
        }
        /**
         * @param string $table
         * @param array $data
         * @param string[]|string $format
         * @phpstan-param 'INSERT'|'REPLACE' $type
         * @return int|false
         */
        public function _insert_replace_helper($table, $data, $format = \null, $type = 'INSERT')
        {
        }
        /**
         * @param string $table
         * @param array $data
         * @param array $where
         * @param string[]|string $format
         * @param string[]|string $where_format
         * @return int|false
         */
        public function update($table, $data, $where, $format = \null, $where_format = \null)
        {
        }
        /**
         * @param string $table
         * @param array $where
         * @param string[]|string $where_format
         * @return int|false
         */
        public function delete($table, $where, $where_format = \null)
        {
        }
        /**
         * @param string $table
         * @param array $data
         * @param string[]|string $format
         * @return array|false
         */
        protected function process_fields($table, $data, $format)
        {
        }
        /**
         * @param array $data
         * @param string[]|string $format
         * @phpstan-return array{
         *   value: mixed,
         *   format: string,
         * }
         */
        protected function process_field_formats($data, $format)
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   value: mixed,
         *   format: string,
         * }> $data
         * @param string $table
         * @phpstan-return false|array<int|string, array{
         *   value: mixed,
         *   format: string,
         *   charset: string|false,
         * }>
         */
        protected function process_field_charsets($data, $table)
        {
        }
        /**
         * @phpstan-param array<int|string, array{
         *   value: mixed,
         *   format: string,
         *   charset: string|false,
         * }> $data
         * @param string $table
         * @phpstan-return false|array<int|string, array{
         *   value: mixed,
         *   format: string,
         *   charset: string|false,
         *   length: false|array{
         *     type: string,
         *     length: int,
         *   },
         * }>
         */
        protected function process_field_lengths($data, $table)
        {
        }
        /**
         * @param string|null $query
         * @param int $x
         * @param int $y
         * @return string|null
         */
        public function get_var($query = \null, $x = 0, $y = 0)
        {
        }
        /**
         * @param string|null $query
         * @param string $output
         * @param int $y
         * @return array|object|null|void
         * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
         * @phpstan-param 0|positive-int $y
         * @phpstan-return null|void|($output is 'ARRAY_A' ? array<array-key, mixed> : ($output is 'ARRAY_N' ? list<mixed> : \stdClass))
         */
        public function get_row($query = \null, $output = \OBJECT, $y = 0)
        {
        }
        /**
         * @param string|null $query
         * @param int $x
         * @return array
         */
        public function get_col($query = \null, $x = 0)
        {
        }
        /**
         * @param string $query
         * @param string $output
         * @return array|object|null
         * @phpstan-param 'OBJECT'|'OBJECT_K'|'ARRAY_A'|'ARRAY_N' $output
         * @phpstan-return null|($output is 'ARRAY_A' ? list<array<array-key, mixed>> : ($output is 'ARRAY_N' ? list<array<int, mixed>> : ($output is 'OBJECT_K' ? array<array-key, \stdClass> : list<\stdClass>)))
         */
        public function get_results($query = \null, $output = \OBJECT)
        {
        }
        /**
         * @param string $table
         * @return string|\WP_Error
         */
        protected function get_table_charset($table)
        {
        }
        /**
         * @param string $table
         * @param string $column
         * @return string|false|\WP_Error
         */
        public function get_col_charset($table, $column)
        {
        }
        /**
         * @param string $table
         * @param string $column
         * @phpstan-return false|\WP_Error|array{
         *   type: string,
         *   length: int,
         * }
         */
        public function get_col_length($table, $column)
        {
        }
        /**
         * @param string $input_string
         * @return bool
         */
        protected function check_ascii($input_string)
        {
        }
        /**
         * @param string $query
         * @return bool
         */
        protected function check_safe_collation($query)
        {
        }
        /**
         * @param array $data
         * @return array|\WP_Error
         */
        protected function strip_invalid_text($data)
        {
        }
        /**
         * @param string $query
         * @return string|\WP_Error
         */
        protected function strip_invalid_text_from_query($query)
        {
        }
        /**
         * @param string $table
         * @param string $column
         * @param string $value
         * @return string|\WP_Error
         */
        public function strip_invalid_text_for_column($table, $column, $value)
        {
        }
        /**
         * @param string $query
         * @return string|false
         */
        protected function get_table_from_query($query)
        {
        }
        /**
         * @phpstan-return void
         */
        protected function load_col_info()
        {
        }
        /**
         * @param string $info_type
         * @param int $col_offset
         * @return mixed
         */
        public function get_col_info($info_type = 'name', $col_offset = -1)
        {
        }
        /**
         * @return true
         */
        public function timer_start()
        {
        }
        /**
         * @return float
         */
        public function timer_stop()
        {
        }
        /**
         * @param string $message
         * @param string $error_code
         * @return void|false
         */
        public function bail($message, $error_code = '500')
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return void|\WP_Error
         */
        public function check_database_version()
        {
        }
        /**
         * @return bool
         */
        public function supports_collation()
        {
        }
        /**
         * @return string
         */
        public function get_charset_collate()
        {
        }
        /**
         * @phpstan-param 'collation'|'group_concat'|'subqueries'|'set_charset'|'utf8mb4'|'utf8mb4_520'|'identifier_placeholders' $db_cap
         * @return bool
         */
        public function has_cap($db_cap)
        {
        }
        /**
         * @return string
         */
        public function get_caller()
        {
        }
        /**
         * @return string|null
         */
        public function db_version()
        {
        }
        /**
         * @return string
         */
        public function db_server_info()
        {
        }
    }
    class WP_Customize_Media_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'media';
        /**
         * @var string
         */
        public $mime_type = '';
        /**
         * @var array
         */
        public $button_labels = array();
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        public function enqueue()
        {
        }
        public function to_json()
        {
        }
        public function render_content()
        {
        }
        public function content_template()
        {
        }
        /**
         * @return string[]
         */
        public function get_default_button_labels()
        {
        }
    }
    class WP_Customize_Upload_Control extends \WP_Customize_Media_Control
    {
        /**
         * @var string
         */
        public $type = 'upload';
        /**
         * @var string
         */
        public $mime_type = '';
        /**
         * @var array
         */
        public $button_labels = array();
        public $removed = '';
        // Unused.
        public $context;
        // Unused.
        public $extensions = array();
        public function to_json()
        {
        }
    }
    class WP_Customize_Image_Control extends \WP_Customize_Upload_Control
    {
        /**
         * @var string
         */
        public $type = 'image';
        /**
         * @var string
         */
        public $mime_type = 'image';
        public function prepare_control()
        {
        }
        /**
         * @param string $id
         * @param string $label
         * @param mixed $callback
         */
        public function add_tab($id, $label, $callback)
        {
        }
        /**
         * @param string $id
         */
        public function remove_tab($id)
        {
        }
        /**
         * @param string $url
         * @param string $thumbnail_url
         */
        public function print_tab_image($url, $thumbnail_url = \null)
        {
        }
    }
    class WP_Customize_Background_Image_Control extends \WP_Customize_Image_Control
    {
        /**
         * @var string
         */
        public $type = 'background';
        /**
         * @param \WP_Customize_Manager $manager
         */
        public function __construct($manager)
        {
        }
        public function enqueue()
        {
        }
    }
    final class WP_Customize_Background_Image_Setting extends \WP_Customize_Setting
    {
        /**
         * @var string
         */
        public $id = 'background_image_thumb';
        /**
         * @param mixed $value
         */
        public function update($value)
        {
        }
    }
    class WP_Customize_Background_Position_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'background_position';
        public function render_content()
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Code_Editor_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'code_editor';
        /**
         * @var string
         */
        public $code_type = '';
        /**
         * @var array|false
         */
        public $editor_settings = array();
        public function enqueue()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        public function render_content()
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Color_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'color';
        /**
         * @var array
         */
        public $statuses;
        /**
         * @var string
         */
        public $mode = 'full';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        public function enqueue()
        {
        }
        public function to_json()
        {
        }
        public function render_content()
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Cropped_Image_Control extends \WP_Customize_Image_Control
    {
        /**
         * @var string
         */
        public $type = 'cropped_image';
        /**
         * @var int
         */
        public $width = 150;
        /**
         * @var int
         */
        public $height = 150;
        /**
         * @var bool
         */
        public $flex_width = \false;
        /**
         * @var bool
         */
        public $flex_height = \false;
        public function enqueue()
        {
        }
        public function to_json()
        {
        }
    }
    final class WP_Customize_Custom_CSS_Setting extends \WP_Customize_Setting
    {
        /**
         * @var string
         */
        public $type = 'custom_css';
        /**
         * @var string
         */
        public $transport = 'postMessage';
        /**
         * @var string
         */
        public $capability = 'edit_css';
        /**
         * @var string
         */
        public $stylesheet = '';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * @return bool
         */
        public function preview()
        {
        }
        /**
         * @param string $css
         * @param string $stylesheet
         * @return string
         */
        public function filter_previewed_wp_get_custom_css($css, $stylesheet)
        {
        }
        /**
         * @return string
         */
        public function value()
        {
        }
        /**
         * @param string $value
         * @return true|\WP_Error
         */
        public function validate($value)
        {
        }
        /**
         * @param string $value
         * @return int|false
         */
        public function update($value)
        {
        }
    }
    class WP_Customize_Date_Time_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'date_time';
        /**
         * @var int
         */
        public $min_year = 1000;
        /**
         * @var int
         */
        public $max_year = 9999;
        /**
         * @var bool
         */
        public $allow_past_date = \true;
        /**
         * @var bool
         */
        public $include_time = \true;
        /**
         * @var bool
         */
        public $twelve_hour_format = \true;
        public function render_content()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        public function content_template()
        {
        }
        /**
         * @return array
         */
        public function get_month_choices()
        {
        }
        /**
         * @phpstan-return array{
         *   abbr: string,
         *   description: string,
         * }
         */
        public function get_timezone_info()
        {
        }
        /**
         * @param float $offset
         * @return string
         */
        public function format_gmt_offset($offset)
        {
        }
    }
    class WP_Customize_Filter_Setting extends \WP_Customize_Setting
    {
        /**
         * @param mixed $value
         */
        public function update($value)
        {
        }
    }
    class WP_Customize_Header_Image_Control extends \WP_Customize_Image_Control
    {
        /**
         * @var string
         */
        public $type = 'header';
        /**
         * @var string
         */
        public $uploaded_headers;
        /**
         * @var string
         */
        public $default_headers;
        /**
         * @param \WP_Customize_Manager $manager
         */
        public function __construct($manager)
        {
        }
        public function enqueue()
        {
        }
        /**
         * @phpstan-return void
         */
        public function prepare_control()
        {
        }
        public function print_header_image_template()
        {
        }
        /**
         * @return string|void
         */
        public function get_current_image_src()
        {
        }
        public function render_content()
        {
        }
    }
    final class WP_Customize_Header_Image_Setting extends \WP_Customize_Setting
    {
        /**
         * @var string
         */
        public $id = 'header_image_data';
        /**
         * @param mixed $value
         */
        public function update($value)
        {
        }
    }
    class WP_Customize_Nav_Menu_Auto_Add_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu_auto_add';
        protected function render_content()
        {
        }
        protected function content_template()
        {
        }
    }
    class WP_Customize_Nav_Menu_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu';
        public function render_content()
        {
        }
        public function content_template()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
    }
    class WP_Customize_Nav_Menu_Item_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu_item';
        /**
         * @var \WP_Customize_Nav_Menu_Item_Setting
         */
        public $setting;
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        public function render_content()
        {
        }
        public function content_template()
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
    }
    class WP_Customize_Nav_Menu_Item_Setting extends \WP_Customize_Setting
    {
        const ID_PATTERN = '/^nav_menu_item\\[(?P<id>-?\\d+)\\]$/';
        const POST_TYPE = 'nav_menu_item';
        const TYPE = 'nav_menu_item';
        /**
         * @var string
         */
        public $type = self::TYPE;
        /**
         * @var array
         */
        public $default = array(
            // The $menu_item_data for wp_update_nav_menu_item().
            'object_id' => 0,
            'object' => '',
            // Taxonomy name.
            'menu_item_parent' => 0,
            // A.K.A. menu-item-parent-id; note that post_parent is different, and not included.
            'position' => 0,
            // A.K.A. menu_order.
            'type' => 'custom',
            // Note that type_label is not included here.
            'title' => '',
            'url' => '',
            'target' => '',
            'attr_title' => '',
            'description' => '',
            'classes' => '',
            'xfn' => '',
            'status' => 'publish',
            'original_title' => '',
            'nav_menu_term_id' => 0,
            // This will be supplied as the $menu_id arg for wp_update_nav_menu_item().
            '_invalid' => \false,
        );
        /**
         * @var string
         */
        public $transport = 'refresh';
        /**
         * @var int
         */
        public $post_id;
        /**
         * @var array|null
         */
        protected $value;
        /**
         * @var int
         */
        public $previous_post_id;
        /**
         * @var int
         */
        public $original_nav_menu_term_id;
        /**
         * @var bool
         */
        protected $is_updated = \false;
        /**
         * @var string
         */
        public $update_status;
        /**
         * @var \WP_Error
         */
        public $update_error;
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * @param int $menu_id
         * @param int $menu_item_id
         */
        public function flush_cached_value($menu_id, $menu_item_id)
        {
        }
        /**
         * @return array|false
         */
        public function value()
        {
        }
        /**
         * @param object $item
         * @return string
         */
        protected function get_original_title($item)
        {
        }
        /**
         * @param object $item
         * @return string
         */
        protected function get_type_label($item)
        {
        }
        /**
         * @phpstan-return void
         */
        protected function populate_value()
        {
        }
        /**
         * @return bool
         */
        public function preview()
        {
        }
        /**
         * @param \WP_Post[] $items
         * @param \WP_Term $menu
         * @param array $args
         * @return \WP_Post[]
         */
        public function filter_wp_get_nav_menu_items($items, $menu, $args)
        {
        }
        /**
         * @param \WP_Post[] $items
         * @param \WP_Term $menu
         * @param array $args
         * @return \WP_Post[]
         */
        public static function sort_wp_get_nav_menu_items($items, $menu, $args)
        {
        }
        /**
         * @return \WP_Post
         */
        public function value_as_wp_post_nav_menu_item()
        {
        }
        /**
         * @param array $value
         * @return array|false|null|\WP_Error
         */
        public function sanitize($value)
        {
        }
        /**
         * @param array|false $value
         * @return null|void
         * @phpstan-return void
         */
        protected function update($value)
        {
        }
        /**
         * @param array $data
         * @return array
         */
        public function amend_customize_save_response($data)
        {
        }
    }
    class WP_Customize_Nav_Menu_Location_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu_location';
        /**
         * @var string
         */
        public $location_id = '';
        public function to_json()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_content()
        {
        }
    }
    class WP_Customize_Nav_Menu_Locations_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu_locations';
        public function render_content()
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Nav_Menu_Name_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'nav_menu_name';
        protected function render_content()
        {
        }
        protected function content_template()
        {
        }
    }
    class WP_Customize_Nav_Menu_Section extends \WP_Customize_Section
    {
        /**
         * @var string
         */
        public $type = 'nav_menu';
        /**
         * @return array
         */
        public function json()
        {
        }
    }
    class WP_Customize_Nav_Menu_Setting extends \WP_Customize_Setting
    {
        const ID_PATTERN = '/^nav_menu\\[(?P<id>-?\\d+)\\]$/';
        const TAXONOMY = 'nav_menu';
        const TYPE = 'nav_menu';
        /**
         * @var string
         */
        public $type = self::TYPE;
        /**
         * @var array
         */
        public $default = array('name' => '', 'description' => '', 'parent' => 0, 'auto_add' => \false);
        /**
         * @var string
         */
        public $transport = 'postMessage';
        /**
         * @var int
         */
        public $term_id;
        /**
         * @var int
         */
        public $previous_term_id;
        /**
         * @var bool
         */
        protected $is_updated = \false;
        /**
         * @var string
         */
        public $update_status;
        /**
         * @var \WP_Error
         */
        public $update_error;
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * @return array
         */
        public function value()
        {
        }
        /**
         * @return bool
         */
        public function preview()
        {
        }
        /**
         * @param \WP_Term[] $menus
         * @param array $args
         * @return \WP_Term[]
         */
        public function filter_wp_get_nav_menus($menus, $args)
        {
        }
        /**
         * @var string
         */
        protected $_current_menus_sort_orderby;
        /**
         * @param object $menu1
         * @param object $menu2
         * @return int
         */
        protected function _sort_menus_by_orderby($menu1, $menu2)
        {
        }
        /**
         * @param object|null $menu_obj
         * @param string $menu_id
         * @return object|null
         */
        public function filter_wp_get_nav_menu_object($menu_obj, $menu_id)
        {
        }
        /**
         * @param array $nav_menu_options
         * @return array
         */
        public function filter_nav_menu_options($nav_menu_options)
        {
        }
        /**
         * @param array $value
         * @return array|false|null
         */
        public function sanitize($value)
        {
        }
        /**
         * @var array
         */
        protected $_widget_nav_menu_updates = array();
        /**
         * @phpstan-param false|array{
         *   name?: string,
         *   description?: string,
         *   parent?: int,
         *   auto_add?: bool,
         * } $value
         * @return null|void
         * @phpstan-return void
         */
        protected function update($value)
        {
        }
        /**
         * @param array $nav_menu_options
         * @param int $menu_id
         * @param bool $auto_add
         * @return array
         */
        protected function filter_nav_menu_options_value($nav_menu_options, $menu_id, $auto_add)
        {
        }
        /**
         * @param array $data
         * @return array
         */
        public function amend_customize_save_response($data)
        {
        }
    }
    class WP_Customize_Nav_Menus_Panel extends \WP_Customize_Panel
    {
        /**
         * @var string
         */
        public $type = 'nav_menus';
        public function render_screen_options()
        {
        }
        public function wp_nav_menu_manage_columns()
        {
        }
        protected function content_template()
        {
        }
    }
    class WP_Customize_New_Menu_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'new_menu';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        public function render_content()
        {
        }
    }
    class WP_Customize_New_Menu_Section extends \WP_Customize_Section
    {
        /**
         * @var string
         */
        public $type = 'new_menu';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        protected function render()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Customize_Partial
    {
        /**
         * @var \WP_Customize_Selective_Refresh
         */
        public $component;
        /**
         * @var string
         */
        public $id;
        /**
         * @phpstan-var array{
         *   base: string,
         *   keys: array,
         * }
         */
        protected $id_data = array();
        /**
         * @var string
         */
        public $type = 'default';
        /**
         * @var string
         */
        public $selector;
        /**
         * @var string[]
         */
        public $settings;
        /**
         * @var string
         */
        public $primary_setting;
        /**
         * @var string
         */
        public $capability;
        /**
         * @var callable
         */
        public $render_callback;
        /**
         * @var bool
         */
        public $container_inclusive = \false;
        /**
         * @var bool
         */
        public $fallback_refresh = \true;
        /**
         * @param \WP_Customize_Selective_Refresh $component
         * @param string $id
         * @phpstan-param array{
         *   type?: string,
         *   selector?: string,
         *   settings?: string[],
         *   primary_setting?: string,
         *   capability?: string,
         *   render_callback?: callable,
         *   container_inclusive?: bool,
         *   fallback_refresh?: bool,
         * } $args
         */
        public function __construct(\WP_Customize_Selective_Refresh $component, $id, $args = array())
        {
        }
        /**
         * @phpstan-return array{
         *   base: string,
         *   keys: array,
         * }
         */
        public final function id_data()
        {
        }
        /**
         * @param array $container_context
         * @return string|array|false
         */
        public final function render($container_context = array())
        {
        }
        /**
         * @param \WP_Customize_Partial $partial
         * @param array $context
         * @return string|array|false
         */
        public function render_callback(\WP_Customize_Partial $partial, $context = array())
        {
        }
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public final function check_capabilities()
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Customize_Selective_Refresh
    {
        /**
         * Query var used in requests to render partials.
         *
         * @since 4.5.0
         */
        const RENDER_QUERY_VAR = 'wp_customize_render_partials';
        /**
         * @var \WP_Customize_Manager
         */
        public $manager;
        /**
         * @param \WP_Customize_Manager $manager
         */
        public function __construct(\WP_Customize_Manager $manager)
        {
        }
        /**
         * @return array
         */
        public function partials()
        {
        }
        /**
         * @param \WP_Customize_Partial|string $id
         * @param array $args
         * @return \WP_Customize_Partial
         * @phpstan-param array{
         *   type?: string,
         *   selector?: string,
         *   settings?: string[],
         *   primary_setting?: string,
         *   capability?: string,
         *   render_callback?: callable,
         *   container_inclusive?: bool,
         *   fallback_refresh?: bool,
         * } $args See WP_Customize_Partial::__construct()
         */
        public function add_partial($id, $args = array())
        {
        }
        /**
         * @param string $id
         * @return \WP_Customize_Partial|null
         */
        public function get_partial($id)
        {
        }
        /**
         * @param string $id
         */
        public function remove_partial($id)
        {
        }
        public function init_preview()
        {
        }
        public function enqueue_preview_scripts()
        {
        }
        public function export_preview_data()
        {
        }
        /**
         * @param string[] $partial_ids
         * @return \WP_Customize_Partial[]
         */
        public function add_dynamic_partials($partial_ids)
        {
        }
        /**
         * @return bool
         */
        public function is_render_partials_request()
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         * @return true
         */
        public function handle_error($errno, $errstr, $errfile = \null, $errline = \null)
        {
        }
        /**
         * @phpstan-return void
         */
        public function handle_render_partials_request()
        {
        }
    }
    class WP_Customize_Sidebar_Section extends \WP_Customize_Section
    {
        /**
         * @var string
         */
        public $type = 'sidebar';
        /**
         * @var string
         */
        public $sidebar_id;
        /**
         * @return array
         */
        public function json()
        {
        }
        /**
         * @return bool
         */
        public function active_callback()
        {
        }
    }
    class WP_Customize_Site_Icon_Control extends \WP_Customize_Cropped_Image_Control
    {
        /**
         * @var string
         */
        public $type = 'site_icon';
        /**
         * @param \WP_Customize_Manager $manager
         * @param string $id
         * @param array $args
         * @phpstan-param array{
         *   instance_number?: int,
         *   manager?: WP_Customize_Manager,
         *   id?: string,
         *   settings?: array,
         *   setting?: string,
         *   capability?: string,
         *   priority?: int,
         *   section?: string,
         *   label?: string,
         *   description?: string,
         *   choices?: array,
         *   input_attrs?: array,
         *   allow_addition?: bool,
         *   json?: array,
         *   type?: string,
         *   active_callback?: callable,
         * } $args See WP_Customize_Control::__construct()
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Theme_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'theme';
        /**
         * @var \WP_Theme
         */
        public $theme;
        public function to_json()
        {
        }
        public function render_content()
        {
        }
        public function content_template()
        {
        }
    }
    class WP_Customize_Themes_Panel extends \WP_Customize_Panel
    {
        /**
         * @var string
         */
        public $type = 'themes';
        protected function render_template()
        {
        }
        protected function content_template()
        {
        }
    }
    class WP_Customize_Themes_Section extends \WP_Customize_Section
    {
        /**
         * @var string
         */
        public $type = 'themes';
        /**
         * @var string
         */
        public $action = '';
        /**
         * @var string
         */
        public $filter_type = 'local';
        /**
         * @return array
         */
        public function json()
        {
        }
        protected function render_template()
        {
        }
        protected function filter_bar_content_template()
        {
        }
        protected function filter_drawer_content_template()
        {
        }
    }
    class WP_Sidebar_Block_Editor_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'sidebar_block_editor';
        public function render_content()
        {
        }
    }
    class WP_Widget_Area_Customize_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'sidebar_widgets';
        /**
         * @var int|string
         */
        public $sidebar_id;
        public function to_json()
        {
        }
        public function render_content()
        {
        }
    }
    class WP_Widget_Form_Customize_Control extends \WP_Customize_Control
    {
        /**
         * @var string
         */
        public $type = 'widget_form';
        /**
         * @var string
         */
        public $widget_id;
        /**
         * @var string
         */
        public $widget_id_base;
        /**
         * @var string
         */
        public $sidebar_id;
        /**
         * @var bool
         */
        public $is_new = \false;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var bool
         */
        public $is_wide = \false;
        public function to_json()
        {
        }
        public function render_content()
        {
        }
        /**
         * @return bool
         */
        public function active_callback()
        {
        }
    }
    final class WP_Font_Collection
    {
        /**
         * @var string
         */
        public $slug;
        /**
         * @param string $slug
         * @param array $args
         * @phpstan-param array{
         *   name?: string,
         *   description?: string,
         *   font_families?: array|string,
         *   categories?: array,
         * } $args See wp_register_font_collection()
         */
        public function __construct(string $slug, array $args)
        {
        }
        /**
         * @return array|\WP_Error
         */
        public function get_data()
        {
        }
    }
    class WP_Font_Face_Resolver
    {
        /**
         * @return array
         */
        public static function get_fonts_from_theme_json()
        {
        }
    }
    class WP_Font_Face
    {
        public function __construct()
        {
        }
        /**
         * @param array[][] $fonts
         * @phpstan-return void
         * @phpstan-param array[]<int|string, array{
         * ?: array<array-key, array{
         *     font-family: string,
         *     src: string|string[],
         *     font-style?: string,
         *     font-weight?: string,
         *     font-display?: string,
         *     ascent-override?: string,
         *     descent-override?: string,
         *     font-stretch?: string,
         *     font-variant?: string,
         *     font-feature-settings?: string,
         *     font-variation-settings?: string,
         *     line-gap-override?: string,
         *     size-adjust?: string,
         *     unicode-range?: string,
         * }>,
         * }> $fonts See wp_print_font_faces()
         */
        public function generate_and_print(array $fonts)
        {
        }
    }
    class WP_Font_Library
    {
        /**
         * @param string $slug
         * @param array $args
         * @return \WP_Font_Collection|\WP_Error
         * @phpstan-param array{
         *   name?: string,
         *   description?: string,
         *   font_families?: array|string,
         *   categories?: array,
         * } $args See wp_register_font_collection()
         */
        public function register_font_collection(string $slug, array $args)
        {
        }
        /**
         * @param string $slug
         * @return bool
         */
        public function unregister_font_collection(string $slug)
        {
        }
        /**
         * @return array
         */
        public function get_font_collections()
        {
        }
        /**
         * @param string $slug
         * @return \WP_Font_Collection|null
         */
        public function get_font_collection(string $slug)
        {
        }
        /**
         * @return \WP_Font_Library
         */
        public static function get_instance()
        {
        }
    }
    class WP_Font_Utils
    {
        /**
         * @param string $font_family
         * @return string
         */
        public static function sanitize_font_family($font_family)
        {
        }
        /**
         * @phpstan-param array{
         *   fontFamily?: string,
         *   fontStyle?: string,
         *   fontWeight?: string,
         *   fontStretch?: string,
         *   unicodeRange?: string,
         * } $settings
         * @return string
         */
        public static function get_font_face_slug($settings)
        {
        }
        /**
         * @param array $tree
         * @param array $schema
         * @return array
         */
        public static function sanitize_from_schema($tree, $schema)
        {
        }
        /**
         * @return string[]
         */
        public static function get_allowed_font_mime_types()
        {
        }
    }
    class WP_HTML_Active_Formatting_Elements
    {
        /**
         * @param \WP_HTML_Token $token
         * @return bool
         */
        public function contains_node($token)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return \WP_HTML_Token|null
         */
        public function current_node()
        {
        }
        /**
         * @param \WP_HTML_Token $token
         */
        public function push($token)
        {
        }
        /**
         * @param \WP_HTML_Token $token
         * @return bool
         */
        public function remove_node($token)
        {
        }
        public function walk_down()
        {
        }
        public function walk_up()
        {
        }
    }
    class WP_HTML_Attribute_Token
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var int
         */
        public $value_starts_at;
        /**
         * @var int
         */
        public $value_length;
        /**
         * @var int
         */
        public $start;
        /**
         * @var int
         */
        public $length;
        /**
         * @var bool
         */
        public $is_true;
        /**
         * @param string $name
         * @param int $value_start
         * @param int $value_length
         * @param int $start
         * @param int $length
         * @param bool $is_true
         */
        public function __construct($name, $value_start, $value_length, $start, $length, $is_true)
        {
        }
    }
    class WP_HTML_Decoder
    {
        /**
         * @param string $haystack
         * @param string $search_text
         * @param string $case_sensitivity
         * @return bool
         */
        public static function attribute_starts_with($haystack, $search_text, $case_sensitivity = 'case-sensitive')
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public static function decode_text_node($text)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public static function decode_attribute($text)
        {
        }
        /**
         * @param string $context
         * @param string $text
         * @return string
         */
        public static function decode($context, $text)
        {
        }
        /**
         * @param string $context
         * @param string $text
         * @param int $at
         * @param int $match_byte_length
         * @return string|false
         */
        public static function read_character_reference($context, $text, $at = 0, &$match_byte_length = \null)
        {
        }
        /**
         * @param int $code_point
         * @return string
         */
        public static function code_point_to_utf8_bytes($code_point)
        {
        }
    }
    class WP_HTML_Open_Elements
    {
        /**
         * @var \WP_HTML_Token[]
         */
        public $stack = array();
        /**
         * @param \Closure $handler
         */
        public function set_pop_handler(\Closure $handler)
        {
        }
        /**
         * @param \Closure $handler
         */
        public function set_push_handler(\Closure $handler)
        {
        }
        /**
         * @param \WP_HTML_Token $token
         * @return bool
         */
        public function contains_node($token)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return \WP_HTML_Token|null
         */
        public function current_node()
        {
        }
        /**
         * @param string $tag_name
         * @param string[] $termination_list
         * @return bool
         */
        public function has_element_in_specific_scope($tag_name, $termination_list)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function has_element_in_scope($tag_name)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function has_element_in_list_item_scope($tag_name)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function has_element_in_button_scope($tag_name)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function has_element_in_table_scope($tag_name)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function has_element_in_select_scope($tag_name)
        {
        }
        /**
         * @return bool
         */
        public function has_p_in_button_scope()
        {
        }
        /**
         * @return bool
         */
        public function pop()
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public function pop_until($tag_name)
        {
        }
        /**
         * @param \WP_HTML_Token $stack_item
         */
        public function push($stack_item)
        {
        }
        /**
         * @param \WP_HTML_Token $token
         * @return bool
         */
        public function remove_node($token)
        {
        }
        public function walk_down()
        {
        }
        /**
         * @param ?\WP_HTML_Token $above_this_node
         */
        public function walk_up($above_this_node = \null)
        {
        }
        /*
         * Internal helpers.
         */
        /**
         * @param \WP_HTML_Token $item
         */
        public function after_element_push($item)
        {
        }
        /**
         * @param \WP_HTML_Token $item
         */
        public function after_element_pop($item)
        {
        }
        public function __wakeup()
        {
        }
    }
    class WP_HTML_Processor_State
    {
        /*
         * Insertion mode constants.
         *
         * These constants exist and are named to make it easier to
         * discover and recognize the supported insertion modes in
         * the parser.
         *
         * Out of all the possible insertion modes, only those
         * supported by the parser are listed here. As support
         * is added to the parser for more modes, add them here
         * following the same naming and value pattern.
         *
         * @see https://html.spec.whatwg.org/#the-insertion-mode
         */
        /**
         * Initial insertion mode for full HTML parser.
         *
         * @since 6.4.0
         *
         * @see https://html.spec.whatwg.org/#the-initial-insertion-mode
         * @see WP_HTML_Processor_State::$insertion_mode
         *
         * @var string
         */
        const INSERTION_MODE_INITIAL = 'insertion-mode-initial';
        /**
         * In body insertion mode for full HTML parser.
         *
         * @since 6.4.0
         *
         * @see https://html.spec.whatwg.org/#parsing-main-inbody
         * @see WP_HTML_Processor_State::$insertion_mode
         *
         * @var string
         */
        const INSERTION_MODE_IN_BODY = 'insertion-mode-in-body';
        /**
         * @var \WP_HTML_Open_Elements
         */
        public $stack_of_open_elements = \null;
        /**
         * @var \WP_HTML_Active_Formatting_Elements
         */
        public $active_formatting_elements = \null;
        /**
         * @var \WP_HTML_Token|null
         */
        public $current_token = \null;
        /**
         * @var string
         */
        public $insertion_mode = self::INSERTION_MODE_INITIAL;
        public $context_node = \null;
        /**
         * @var bool
         */
        public $frameset_ok = \true;
        public function __construct()
        {
        }
    }
    class WP_HTML_Tag_Processor
    {
        /**
         * The maximum number of bookmarks allowed to exist at
         * any given time.
         *
         * @since 6.2.0
         * @var int
         *
         * @see WP_HTML_Tag_Processor::set_bookmark()
         */
        const MAX_BOOKMARKS = 10;
        /**
         * Maximum number of times seek() can be called.
         * Prevents accidental infinite loops.
         *
         * @since 6.2.0
         * @var int
         *
         * @see WP_HTML_Tag_Processor::seek()
         */
        const MAX_SEEK_OPS = 1000;
        /**
         * @var string
         */
        protected $html;
        /**
         * @var string
         */
        protected $parser_state = self::STATE_READY;
        /**
         * @var string|null
         */
        protected $comment_type = \null;
        /**
         * @var \WP_HTML_Span[]
         */
        protected $bookmarks = array();
        const ADD_CLASS = \true;
        const REMOVE_CLASS = \false;
        const SKIP_CLASS = \null;
        /**
         * @var \WP_HTML_Text_Replacement[]
         */
        protected $lexical_updates = array();
        /**
         * @var int
         */
        protected $seek_count = 0;
        /**
         * @param string $html
         */
        public function __construct($html)
        {
        }
        /**
         * @phpstan-param null|array{
         *   tag_name?: string|null,
         *   match_offset?: int|null,
         *   class_name?: string|null,
         *   tag_closers?: string|null,
         * } $query
         * @return bool
         */
        public function next_tag($query = \null)
        {
        }
        /**
         * @return bool
         */
        public function next_token()
        {
        }
        /**
         * @return bool
         */
        public function paused_at_incomplete_token()
        {
        }
        /**
         * @phpstan-return void
         */
        public function class_list()
        {
        }
        /**
         * @param string $wanted_class
         * @return bool|null
         */
        public function has_class($wanted_class)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function set_bookmark($name)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function release_bookmark($name)
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function has_bookmark($bookmark_name)
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function seek($bookmark_name)
        {
        }
        /**
         * @param string $name
         * @return string|true|null
         */
        public function get_attribute($name)
        {
        }
        /**
         * @param string $prefix
         * @return array|null
         */
        public function get_attribute_names_with_prefix($prefix)
        {
        }
        /**
         * @return string|null
         */
        public function get_tag()
        {
        }
        /**
         * @return bool
         */
        public function has_self_closing_flag()
        {
        }
        /**
         * @return bool
         */
        public function is_tag_closer()
        {
        }
        /**
         * @return string|null
         */
        public function get_token_type()
        {
        }
        /**
         * @return string|null
         */
        public function get_token_name()
        {
        }
        /**
         * @return string|null
         */
        public function get_comment_type()
        {
        }
        /**
         * @return string
         */
        public function get_modifiable_text()
        {
        }
        /**
         * @param string $name
         * @param string|bool $value
         * @return bool
         */
        public function set_attribute($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function remove_attribute($name)
        {
        }
        /**
         * @param string $class_name
         * @return bool
         */
        public function add_class($class_name)
        {
        }
        /**
         * @param string $class_name
         * @return bool
         */
        public function remove_class($class_name)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function get_updated_html()
        {
        }
        /**
         * Parser Ready State.
         *
         * Indicates that the parser is ready to run and waiting for a state transition.
         * It may not have started yet, or it may have just finished parsing a token and
         * is ready to find the next one.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_READY = 'STATE_READY';
        /**
         * Parser Complete State.
         *
         * Indicates that the parser has reached the end of the document and there is
         * nothing left to scan. It finished parsing the last token completely.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_COMPLETE = 'STATE_COMPLETE';
        /**
         * Parser Incomplete Input State.
         *
         * Indicates that the parser has reached the end of the document before finishing
         * a token. It started parsing a token but there is a possibility that the input
         * HTML document was truncated in the middle of a token.
         *
         * The parser is reset at the start of the incomplete token and has paused. There
         * is nothing more than can be scanned unless provided a more complete document.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_INCOMPLETE_INPUT = 'STATE_INCOMPLETE_INPUT';
        /**
         * Parser Matched Tag State.
         *
         * Indicates that the parser has found an HTML tag and it's possible to get
         * the tag name and read or modify its attributes (if it's not a closing tag).
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_MATCHED_TAG = 'STATE_MATCHED_TAG';
        /**
         * Parser Text Node State.
         *
         * Indicates that the parser has found a text node and it's possible
         * to read and modify that text.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_TEXT_NODE = 'STATE_TEXT_NODE';
        /**
         * Parser CDATA Node State.
         *
         * Indicates that the parser has found a CDATA node and it's possible
         * to read and modify its modifiable text. Note that in HTML there are
         * no CDATA nodes outside of foreign content (SVG and MathML). Outside
         * of foreign content, they are treated as HTML comments.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_CDATA_NODE = 'STATE_CDATA_NODE';
        /**
         * Indicates that the parser has found an HTML comment and it's
         * possible to read and modify its modifiable text.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_COMMENT = 'STATE_COMMENT';
        /**
         * Indicates that the parser has found a DOCTYPE node and it's
         * possible to read and modify its modifiable text.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_DOCTYPE = 'STATE_DOCTYPE';
        /**
         * Indicates that the parser has found an empty tag closer `</>`.
         *
         * Note that in HTML there are no empty tag closers, and they
         * are ignored. Nonetheless, the Tag Processor still
         * recognizes them as they appear in the HTML stream.
         *
         * These were historically discussed as a "presumptuous tag
         * closer," which would close the nearest open tag, but were
         * dismissed in favor of explicitly-closing tags.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_PRESUMPTUOUS_TAG = 'STATE_PRESUMPTUOUS_TAG';
        /**
         * Indicates that the parser has found a "funky comment"
         * and it's possible to read and modify its modifiable text.
         *
         * Example:
         *
         *     </%url>
         *     </{"wp-bit":"query/post-author"}>
         *     </2>
         *
         * Funky comments are tag closers with invalid tag names. Note
         * that in HTML these are turn into bogus comments. Nonetheless,
         * the Tag Processor recognizes them in a stream of HTML and
         * exposes them for inspection and modification.
         *
         * @since 6.5.0
         *
         * @access private
         */
        const STATE_FUNKY_COMMENT = 'STATE_WP_FUNKY';
        /**
         * Indicates that a comment was created when encountering abruptly-closed HTML comment.
         *
         * Example:
         *
         *     <!-->
         *     <!--->
         *
         * @since 6.5.0
         */
        const COMMENT_AS_ABRUPTLY_CLOSED_COMMENT = 'COMMENT_AS_ABRUPTLY_CLOSED_COMMENT';
        /**
         * Indicates that a comment would be parsed as a CDATA node,
         * were HTML to allow CDATA nodes outside of foreign content.
         *
         * Example:
         *
         *     <![CDATA[This is a CDATA node.]]>
         *
         * This is an HTML comment, but it looks like a CDATA node.
         *
         * @since 6.5.0
         */
        const COMMENT_AS_CDATA_LOOKALIKE = 'COMMENT_AS_CDATA_LOOKALIKE';
        /**
         * Indicates that a comment was created when encountering
         * normative HTML comment syntax.
         *
         * Example:
         *
         *     <!-- this is a comment -->
         *
         * @since 6.5.0
         */
        const COMMENT_AS_HTML_COMMENT = 'COMMENT_AS_HTML_COMMENT';
        /**
         * Indicates that a comment would be parsed as a Processing
         * Instruction node, were they to exist within HTML.
         *
         * Example:
         *
         *     <?wp __( 'Like' ) ?>
         *
         * This is an HTML comment, but it looks like a CDATA node.
         *
         * @since 6.5.0
         */
        const COMMENT_AS_PI_NODE_LOOKALIKE = 'COMMENT_AS_PI_NODE_LOOKALIKE';
        /**
         * Indicates that a comment was created when encountering invalid
         * HTML input, a so-called "bogus comment."
         *
         * Example:
         *
         *     <?nothing special>
         *     <!{nothing special}>
         *
         * @since 6.5.0
         */
        const COMMENT_AS_INVALID_HTML = 'COMMENT_AS_INVALID_HTML';
    }
    class WP_HTML_Processor extends \WP_HTML_Tag_Processor
    {
        /**
         * The maximum number of bookmarks allowed to exist at any given time.
         *
         * HTML processing requires more bookmarks than basic tag processing,
         * so this class constant from the Tag Processor is overwritten.
         *
         * @since 6.4.0
         *
         * @var int
         */
        const MAX_BOOKMARKS = 100;
        /*
         * Public Interface Functions
         */
        /**
         * @param string $html
         * @param string $context
         * @param string $encoding
         * @return static|null
         */
        public static function create_fragment($html, $context = '<body>', $encoding = 'UTF-8')
        {
        }
        /**
         * @param string $html
         * @param string|null $use_the_static_create_methods_instead
         */
        public function __construct($html, $use_the_static_create_methods_instead = \null)
        {
        }
        /**
         * @return string|null
         */
        public function get_last_error()
        {
        }
        /**
         * @phpstan-param null|array{
         *   tag_name?: string|null,
         *   tag_closers?: string,
         *   match_offset?: int|null,
         *   class_name?: string|null,
         *   breadcrumbs?: string[],
         * } $query
         * @return bool
         */
        public function next_tag($query = \null)
        {
        }
        /**
         * @return bool
         */
        public function next_token()
        {
        }
        /**
         * @return bool
         */
        public function is_tag_closer()
        {
        }
        /**
         * @param string[] $breadcrumbs
         * @return bool
         */
        public function matches_breadcrumbs($breadcrumbs)
        {
        }
        /**
         * @param ?\WP_HTML_Token $node
         * @return bool
         */
        public function expects_closer($node = \null)
        {
        }
        /**
         * @param string $node_to_process
         * @return bool
         */
        public function step($node_to_process = self::PROCESS_NEXT_NODE)
        {
        }
        /**
         * @return string[]|null
         */
        public function get_breadcrumbs()
        {
        }
        /**
         * @return int
         */
        public function get_current_depth()
        {
        }
        /*
         * HTML semantic overrides for Tag Processor
         */
        /**
         * @return string|null
         */
        public function get_tag()
        {
        }
        /**
         * @return bool
         */
        public function has_self_closing_flag()
        {
        }
        /**
         * @return string|null
         */
        public function get_token_name()
        {
        }
        /**
         * @return string|null
         */
        public function get_token_type()
        {
        }
        /**
         * @param string $name
         * @return string|true|null
         */
        public function get_attribute($name)
        {
        }
        /**
         * @param string $name
         * @param string|bool $value
         * @return bool
         */
        public function set_attribute($name, $value)
        {
        }
        /**
         * @param string $name
         * @return bool
         */
        public function remove_attribute($name)
        {
        }
        /**
         * @param string $prefix
         * @return array|null
         */
        public function get_attribute_names_with_prefix($prefix)
        {
        }
        /**
         * @param string $class_name
         * @return bool
         */
        public function add_class($class_name)
        {
        }
        /**
         * @param string $class_name
         * @return bool
         */
        public function remove_class($class_name)
        {
        }
        /**
         * @param string $wanted_class
         * @return bool|null
         */
        public function has_class($wanted_class)
        {
        }
        public function class_list()
        {
        }
        /**
         * @return string
         */
        public function get_modifiable_text()
        {
        }
        /**
         * @return string|null
         */
        public function get_comment_type()
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function release_bookmark($bookmark_name)
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function seek($bookmark_name)
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function set_bookmark($bookmark_name)
        {
        }
        /**
         * @param string $bookmark_name
         * @return bool
         */
        public function has_bookmark($bookmark_name)
        {
        }
        /*
         * HTML Specification Helpers
         */
        /**
         * @param string $tag_name
         * @return bool
         */
        public static function is_special($tag_name)
        {
        }
        /**
         * @param string $tag_name
         * @return bool
         */
        public static function is_void($tag_name)
        {
        }
        /*
         * Constants that would pollute the top of the class if they were found there.
         */
        /**
         * Indicates that the next HTML token should be parsed and processed.
         *
         * @since 6.4.0
         *
         * @var string
         */
        const PROCESS_NEXT_NODE = 'process-next-node';
        /**
         * Indicates that the current HTML token should be reprocessed in the newly-selected insertion mode.
         *
         * @since 6.4.0
         *
         * @var string
         */
        const REPROCESS_CURRENT_NODE = 'reprocess-current-node';
        /**
         * Indicates that the current HTML token should be processed without advancing the parser.
         *
         * @since 6.5.0
         *
         * @var string
         */
        const PROCESS_CURRENT_NODE = 'process-current-node';
        /**
         * Indicates that the parser encountered unsupported markup and has bailed.
         *
         * @since 6.4.0
         *
         * @var string
         */
        const ERROR_UNSUPPORTED = 'unsupported';
        /**
         * Indicates that the parser encountered more HTML tokens than it
         * was able to process and has bailed.
         *
         * @since 6.4.0
         *
         * @var string
         */
        const ERROR_EXCEEDED_MAX_BOOKMARKS = 'exceeded-max-bookmarks';
        /**
         * Unlock code that must be passed into the constructor to create this class.
         *
         * This class extends the WP_HTML_Tag_Processor, which has a public class
         * constructor. Therefore, it's not possible to have a private constructor here.
         *
         * This unlock code is used to ensure that anyone calling the constructor is
         * doing so with a full understanding that it's intended to be a private API.
         *
         * @access private
         */
        const CONSTRUCTOR_UNLOCK_CODE = 'Use WP_HTML_Processor::create_fragment() instead of calling the class constructor directly.';
    }
    class WP_HTML_Span
    {
        /**
         * @var int
         */
        public $start;
        /**
         * @var int
         */
        public $length;
        /**
         * @param int $start
         * @param int $length
         */
        public function __construct($start, $length)
        {
        }
    }
    class WP_HTML_Stack_Event
    {
        /**
         * Refers to popping an element off of the stack of open elements.
         *
         * @since 6.6.0
         */
        const POP = 'pop';
        /**
         * Refers to pushing an element onto the stack of open elements.
         *
         * @since 6.6.0
         */
        const PUSH = 'push';
        /**
         * @var \WP_HTML_Token
         */
        public $token;
        /**
         * @var string
         */
        public $operation;
        /**
         * @var string
         */
        public $provenance;
        /**
         * @param \WP_HTML_Token $token
         * @param string $operation
         * @param string $provenance
         */
        public function __construct($token, $operation, $provenance)
        {
        }
    }
    class WP_HTML_Text_Replacement
    {
        /**
         * @var int
         */
        public $start;
        /**
         * @var int
         */
        public $length;
        /**
         * @var string
         */
        public $text;
        /**
         * @param int $start
         * @param int $length
         * @param string $text
         */
        public function __construct($start, $length, $text)
        {
        }
    }
    class WP_HTML_Token
    {
        /**
         * @var string
         */
        public $bookmark_name = \null;
        /**
         * @var string
         */
        public $node_name = \null;
        /**
         * @var bool
         */
        public $has_self_closing_flag = \false;
        /**
         * @var callable|null
         */
        public $on_destroy = \null;
        /**
         * @param string $bookmark_name
         * @param string $node_name
         * @param bool $has_self_closing_flag
         * @param callable $on_destroy
         */
        public function __construct($bookmark_name, $node_name, $has_self_closing_flag, $on_destroy = \null)
        {
        }
        public function __destruct()
        {
        }
        public function __wakeup()
        {
        }
    }
    class WP_HTML_Unsupported_Exception extends \Exception
    {
    }
    final class WP_Interactivity_API_Directives_Processor extends \WP_HTML_Tag_Processor
    {
        /**
         * List of tags whose closer tag is not visited by the WP_HTML_Tag_Processor.
         *
         * @since 6.5.0
         * @var string[]
         */
        const TAGS_THAT_DONT_VISIT_CLOSER_TAG = array('SCRIPT', 'IFRAME', 'NOEMBED', 'NOFRAMES', 'STYLE', 'TEXTAREA', 'TITLE', 'XMP');
        /**
         * @return string|null
         */
        public function get_content_between_balanced_template_tags()
        {
        }
        /**
         * @param string $new_content
         * @return bool
         */
        public function set_content_between_balanced_tags(string $new_content) : bool
        {
        }
        /**
         * @param string $new_content
         * @return bool
         */
        public function append_content_after_template_tag_closer(string $new_content) : bool
        {
        }
        /**
         * @return bool
         */
        public function skip_to_tag_closer() : bool
        {
        }
        /**
         * @return bool
         */
        public function next_balanced_tag_closer_tag() : bool
        {
        }
        /**
         * @return bool
         */
        public function has_and_visits_its_closer_tag() : bool
        {
        }
    }
    final class WP_Interactivity_API
    {
        /**
         * @param string $store_namespace
         * @param array $state
         * @return array
         */
        public function state(?string $store_namespace = \null, ?array $state = \null) : array
        {
        }
        /**
         * @param string $store_namespace
         * @param array $config
         * @return array
         */
        public function config(string $store_namespace, array $config = array()) : array
        {
        }
        /**
         * @phpstan-return void
         */
        public function print_client_interactivity_data()
        {
        }
        /**
         * @param string $store_namespace
         */
        public function get_context(?string $store_namespace = \null) : array
        {
        }
        public function register_script_modules()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $html
         * @return string
         */
        public function process_directives(string $html) : string
        {
        }
        public function print_router_loading_and_screen_reader_markup()
        {
        }
    }
    final class WP_Translation_Controller
    {
        /**
         * @return \WP_Translation_Controller
         */
        public static function get_instance() : \WP_Translation_Controller
        {
        }
        /**
         * @return string
         */
        public function get_locale() : string
        {
        }
        /**
         * @param string $locale
         */
        public function set_locale(string $locale)
        {
        }
        /**
         * @param string $translation_file
         * @param string $textdomain
         * @param string $locale
         * @return bool
         */
        public function load_file(string $translation_file, string $textdomain = 'default', ?string $locale = \null) : bool
        {
        }
        /**
         * @param \WP_Translation_File|string $file
         * @param string $textdomain
         * @param string $locale
         * @return bool
         */
        public function unload_file($file, string $textdomain = 'default', ?string $locale = \null) : bool
        {
        }
        /**
         * @param string $textdomain
         * @param string $locale
         * @return bool
         */
        public function unload_textdomain(string $textdomain = 'default', ?string $locale = \null) : bool
        {
        }
        /**
         * @param string $textdomain
         * @param string $locale
         * @return bool
         */
        public function is_textdomain_loaded(string $textdomain = 'default', ?string $locale = \null) : bool
        {
        }
        /**
         * @param string $text
         * @param string $context
         * @param string $textdomain
         * @param string $locale
         * @return string|false
         */
        public function translate(string $text, string $context = '', string $textdomain = 'default', ?string $locale = \null)
        {
        }
        /**
         * @phpstan-param array{
         *   0: string,
         *   1: string,
         * } $plurals
         * @param int $number
         * @param string $context
         * @param string $textdomain
         * @param string|null $locale
         * @return string|false
         */
        public function translate_plural(array $plurals, int $number, string $context = '', string $textdomain = 'default', ?string $locale = \null)
        {
        }
        /**
         * @param string $textdomain
         * @return array<string,string>
         */
        public function get_headers(string $textdomain = 'default') : array
        {
        }
        /**
         * @param string $textdomain
         * @return array<string,string>
         */
        public function get_entries(string $textdomain = 'default') : array
        {
        }
    }
    abstract class WP_Translation_File
    {
        /**
         * @var array<string,string>
         */
        protected $headers = array();
        /**
         * @var bool
         */
        protected $parsed = \false;
        /**
         * @var string|null
         */
        protected $error;
        /**
         * @var string
         */
        protected $file = '';
        /**
         * @var array<string,string>
         */
        protected $entries = array();
        /**
         * @var callable|null
         */
        protected $plural_forms = \null;
        /**
         * @param string $file
         */
        protected function __construct(string $file)
        {
        }
        /**
         * @param string $file
         * @param string|null $filetype
         * @return false|\WP_Translation_File
         */
        public static function create(string $file, ?string $filetype = \null)
        {
        }
        /**
         * @param string $file
         * @param string $filetype
         * @return string|false
         */
        public static function transform(string $file, string $filetype)
        {
        }
        /**
         * @return array<string,string>
         */
        public function headers() : array
        {
        }
        /**
         * @return array<string,string[]>
         */
        public function entries() : array
        {
        }
        /**
         * @return string|null
         */
        public function error()
        {
        }
        /**
         * @return string
         */
        public function get_file() : string
        {
        }
        /**
         * @param string $text
         * @return false|string
         */
        public function translate(string $text)
        {
        }
        /**
         * @param int $number
         * @return int
         */
        public function get_plural_form(int $number) : int
        {
        }
        /**
         * @param string $header
         * @return string
         */
        protected function get_plural_expression_from_header(string $header) : string
        {
        }
        /**
         * @param string $expression
         * @return callable
         */
        protected function make_plural_form_function(string $expression) : callable
        {
        }
        /**
         * @param \WP_Translation_File $source
         * @return bool
         */
        protected function import(\WP_Translation_File $source) : bool
        {
        }
        protected abstract function parse_file();
        /**
         * @return string
         */
        public abstract function export();
    }
    class WP_Translation_File_MO extends \WP_Translation_File
    {
        /**
         * @var false|"V"|"N"
         */
        protected $uint32 = \false;
        /**
         * The magic number of the GNU message catalog format.
         *
         * @since 6.5.0
         * @var int
         */
        const MAGIC_MARKER = 0x950412de;
        /**
         * @param string $header
         * @return false|"V"|"N"
         */
        protected function detect_endian_and_validate_file(string $header)
        {
        }
        /**
         * @return bool
         */
        protected function parse_file() : bool
        {
        }
        /**
         * @return string
         */
        public function export() : string
        {
        }
    }
    class WP_Translation_File_PHP extends \WP_Translation_File
    {
        /**
         * @phpstan-return void
         */
        protected function parse_file()
        {
        }
        /**
         * @return string
         */
        public function export() : string
        {
        }
    }
    class WP_Translations
    {
        /**
         * @var string
         */
        protected $textdomain = 'default';
        /**
         * @var \WP_Translation_Controller
         */
        protected $controller;
        /**
         * @param \WP_Translation_Controller $controller
         * @param string $textdomain
         */
        public function __construct(\WP_Translation_Controller $controller, string $textdomain = 'default')
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get(string $name)
        {
        }
        /**
         * @param string|null $singular
         * @param string|null $plural
         * @param int|float $count
         * @param string|null $context
         * @return string|null
         */
        public function translate_plural($singular, $plural, $count = 1, $context = '')
        {
        }
        /**
         * @param string|null $singular
         * @param string|null $context
         * @return string|null
         */
        public function translate($singular, $context = '')
        {
        }
    }
    class wp_atom_server
    {
        public function __call($name, $arguments)
        {
        }
        public static function __callStatic($name, $arguments)
        {
        }
    }
    #[\AllowDynamicProperties]
    class Translation_Entry
    {
        /**
         * @var bool
         */
        public $is_plural = \false;
        public $context = \null;
        public $singular = \null;
        public $plural = \null;
        public $translations = array();
        public $translator_comments = '';
        public $extracted_comments = '';
        public $references = array();
        public $flags = array();
        /**
         * @phpstan-param array{
         *   singular?: string,
         *   plural?: string,
         *   translations?: array,
         *   context?: string,
         *   translator_comments?: string,
         *   extracted_comments?: string,
         *   references?: array,
         *   flags?: array,
         * } $args
         * @phpstan-return void
         */
        public function __construct($args = array())
        {
        }
        public function Translation_Entry($args = array())
        {
        }
        /**
         * @return string|false
         */
        public function key()
        {
        }
        /**
         * @param \Translation_Entry $other
         */
        public function merge_with(&$other)
        {
        }
    }
    #[\AllowDynamicProperties]
    class Translations
    {
        /**
         * @var \Translation_Entry[]
         */
        public $entries = array();
        /**
         * @var array<string,string>
         */
        public $headers = array();
        /**
         * @param array|\Translation_Entry $entry
         * @return bool
         */
        public function add_entry($entry)
        {
        }
        /**
         * @param array|\Translation_Entry $entry
         * @return bool
         */
        public function add_entry_or_merge($entry)
        {
        }
        /**
         * @param string $header
         * @param string $value
         */
        public function set_header($header, $value)
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $header
         * @return string|false
         */
        public function get_header($header)
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return \Translation_Entry|false
         */
        public function translate_entry(&$entry)
        {
        }
        /**
         * @param string $singular
         * @param string $context
         * @return string
         */
        public function translate($singular, $context = \null)
        {
        }
        /**
         * @param int $count
         * @return int
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int $count
         * @param string $context
         * @return string
         */
        public function translate_plural($singular, $plural, $count, $context = \null)
        {
        }
        /**
         * @param \Translations $other
         */
        public function merge_with(&$other)
        {
        }
        /**
         * @param \Translations $other
         */
        public function merge_originals_with(&$other)
        {
        }
    }
    class Gettext_Translations extends \Translations
    {
        /**
         * @var int
         */
        public $_nplurals;
        /**
         * @var callable
         */
        public $_gettext_select_plural_form;
        /**
         * @param int $count
         * @return int
         */
        public function gettext_select_plural_form($count)
        {
        }
        /**
         * @param string $header
         * @return array{0: int, 1: string}
         */
        public function nplurals_and_expression_from_header($header)
        {
        }
        /**
         * @param int $nplurals
         * @param string $expression
         * @return callable
         */
        public function make_plural_form_function($nplurals, $expression)
        {
        }
        /**
         * @param string $expression
         * @return string
         */
        public function parenthesize_plural_exression($expression)
        {
        }
        /**
         * @param string $translation
         * @return array<string,string>
         */
        public function make_headers($translation)
        {
        }
        /**
         * @param string $header
         * @param string $value
         */
        public function set_header($header, $value)
        {
        }
    }
    class MO extends \Gettext_Translations
    {
        /**
         * @var int
         */
        public $_nplurals = 2;
        /**
         * @return string
         */
        public function get_filename()
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public function import_from_file($filename)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public function export_to_file($filename)
        {
        }
        /**
         * @return string|false
         */
        public function export()
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return bool
         */
        public function is_entry_good_for_export($entry)
        {
        }
        /**
         * @param resource $fh
         * @return true
         */
        public function export_to_file_handle($fh)
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return string
         */
        public function export_original($entry)
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return string
         */
        public function export_translations($entry)
        {
        }
        /**
         * @return string
         */
        public function export_headers()
        {
        }
        /**
         * @param int $magic
         * @return string|false
         */
        public function get_byteorder($magic)
        {
        }
        /**
         * @param \POMO_FileReader $reader
         * @return bool
         */
        public function import_from_reader($reader)
        {
        }
        /**
         * @param string $original
         * @param string $translation
         * @return \Translation_Entry
         */
        public function &make_entry($original, $translation)
        {
        }
        /**
         * @param int $count
         * @return string
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
    }
    #[\AllowDynamicProperties]
    class Plural_Forms
    {
        /**
         * Operator characters.
         *
         * @since 4.9.0
         * @var string OP_CHARS Operator characters.
         */
        const OP_CHARS = '|&><!=%?:';
        /**
         * Valid number characters.
         *
         * @since 4.9.0
         * @var string NUM_CHARS Valid number characters.
         */
        const NUM_CHARS = '0123456789';
        /**
         * @var array
         */
        protected static $op_precedence = array('%' => 6, '<' => 5, '<=' => 5, '>' => 5, '>=' => 5, '==' => 4, '!=' => 4, '&&' => 3, '||' => 2, '?:' => 1, '?' => 1, '(' => 0, ')' => 0);
        /**
         * @var array
         */
        protected $tokens = array();
        /**
         * @var array
         */
        protected $cache = array();
        /**
         * @param string $str
         */
        public function __construct($str)
        {
        }
        /**
         * @param string $str
         */
        protected function parse($str)
        {
        }
        /**
         * @param int $num
         * @return int
         */
        public function get($num)
        {
        }
        /**
         * @param int $n
         * @return int
         */
        public function execute($n)
        {
        }
    }
    class PO extends \Gettext_Translations
    {
        public $comments_before_headers = '';
        /**
         * @return string
         */
        public function export_headers()
        {
        }
        /**
         * @return string
         */
        public function export_entries()
        {
        }
        /**
         * @param bool $include_headers
         * @return string
         */
        public function export($include_headers = \true)
        {
        }
        /**
         * @param string $filename
         * @param bool $include_headers
         * @return bool
         */
        public function export_to_file($filename, $include_headers = \true)
        {
        }
        /**
         * @param string $text
         */
        public function set_comment_before_headers($text)
        {
        }
        /**
         * @param string $input_string
         * @return string
         */
        public static function poify($input_string)
        {
        }
        /**
         * @param string $input_string
         * @return string
         */
        public static function unpoify($input_string)
        {
        }
        /**
         * @param string $input_string
         * @param string $with
         */
        public static function prepend_each_line($input_string, $with)
        {
        }
        /**
         * @param string $text
         * @param string $char
         */
        public static function comment_block($text, $char = ' ')
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return string|false
         */
        public static function export_entry($entry)
        {
        }
        public static function match_begin_and_end_newlines($translation, $original)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public function import_from_file($filename)
        {
        }
        /**
         * @param string $context
         * @return bool
         */
        protected static function is_final($context)
        {
        }
        /**
         * @param resource $f
         * @param int $lineno
         * @return null|false|array
         */
        public function read_entry($f, $lineno = 0)
        {
        }
        /**
         * @param resource $f
         * @param string $action
         * @return bool
         */
        public function read_line($f, $action = 'read')
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @param string $po_comment_line
         */
        public function add_comment_to_entry(&$entry, $po_comment_line)
        {
        }
        /**
         * @param string $s
         * @return string
         */
        public static function trim_quotes($s)
        {
        }
    }
    #[\AllowDynamicProperties]
    class POMO_Reader
    {
        public $endian = 'little';
        public $_pos;
        public $is_overloaded;
        public function __construct()
        {
        }
        public function POMO_Reader()
        {
        }
        /**
         * @phpstan-param 'big'|'little' $endian
         */
        public function setEndian($endian)
        {
        }
        /**
         * @return mixed
         */
        public function readint32()
        {
        }
        /**
         * @param int $count
         * @return mixed
         */
        public function readint32array($count)
        {
        }
        /**
         * @param string $input_string
         * @param int $start
         * @param int $length
         * @return string
         */
        public function substr($input_string, $start, $length)
        {
        }
        /**
         * @param string $input_string
         * @return int
         */
        public function strlen($input_string)
        {
        }
        /**
         * @param string $input_string
         * @param int $chunk_size
         * @return array
         */
        public function str_split($input_string, $chunk_size)
        {
        }
        /**
         * @return int
         */
        public function pos()
        {
        }
        /**
         * @return true
         */
        public function is_resource()
        {
        }
        /**
         * @return true
         */
        public function close()
        {
        }
    }
    class POMO_FileReader extends \POMO_Reader
    {
        /**
         * @var resource|false
         */
        public $_f;
        /**
         * @param string $filename
         */
        public function __construct($filename)
        {
        }
        public function POMO_FileReader($filename)
        {
        }
        /**
         * @param int $bytes
         * @return string|false
         */
        public function read($bytes)
        {
        }
        /**
         * @param int $pos
         * @return bool
         */
        public function seekto($pos)
        {
        }
        /**
         * @return bool
         */
        public function is_resource()
        {
        }
        /**
         * @return bool
         */
        public function feof()
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return string
         */
        public function read_all()
        {
        }
    }
    class POMO_StringReader extends \POMO_Reader
    {
        public $_str = '';
        public function __construct($str = '')
        {
        }
        public function POMO_StringReader($str = '')
        {
        }
        /**
         * @param string $bytes
         * @return string
         */
        public function read($bytes)
        {
        }
        /**
         * @param int $pos
         * @return int
         */
        public function seekto($pos)
        {
        }
        /**
         * @return int
         */
        public function length()
        {
        }
        /**
         * @return string
         */
        public function read_all()
        {
        }
    }
    class POMO_CachedFileReader extends \POMO_StringReader
    {
        public function __construct($filename)
        {
        }
        public function POMO_CachedFileReader($filename)
        {
        }
    }
    class POMO_CachedIntFileReader extends \POMO_CachedFileReader
    {
        public function __construct($filename)
        {
        }
        public function POMO_CachedIntFileReader($filename)
        {
        }
    }
    #[\AllowDynamicProperties]
    class NOOP_Translations
    {
        /**
         * @var \Translation_Entry[]
         */
        public $entries = array();
        /**
         * @var array<string,string>
         */
        public $headers = array();
        public function add_entry($entry)
        {
        }
        /**
         * @param string $header
         * @param string $value
         */
        public function set_header($header, $value)
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $header
         * @return false
         */
        public function get_header($header)
        {
        }
        /**
         * @param \Translation_Entry $entry
         * @return false
         */
        public function translate_entry(&$entry)
        {
        }
        /**
         * @param string $singular
         * @param string $context
         */
        public function translate($singular, $context = \null)
        {
        }
        /**
         * @param int $count
         * @return int
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int $count
         * @param string $context
         * @return string
         */
        public function translate_plural($singular, $plural, $count, $context = \null)
        {
        }
        /**
         * @param \Translations $other
         */
        public function merge_with(&$other)
        {
        }
    }
    /**
     * REST API: WP_REST_Request class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.4.0
     */
    /**
     * @phpstan-template T of array
     * @phpstan-implements ArrayAccess<key-of<T>, value-of<T>>
     */
    #[\AllowDynamicProperties]
    class WP_REST_Request implements \ArrayAccess
    {
        /**
         * @var string
         */
        protected $method = '';
        /**
         * @var array
         */
        protected $params;
        /**
         * @var array
         */
        protected $headers = array();
        /**
         * @var string
         */
        protected $body = \null;
        /**
         * @var string
         */
        protected $route;
        /**
         * @var array
         */
        protected $attributes = array();
        /**
         * @var bool
         */
        protected $parsed_json = \false;
        /**
         * @var bool
         */
        protected $parsed_body = \false;
        /**
         * @param string $method
         * @param string $route
         * @param array $attributes
         */
        public function __construct($method = '', $route = '', $attributes = array())
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        /**
         * @return array
         */
        public function get_headers()
        {
        }
        /**
         * @param string $key
         * @return string
         */
        public static function canonicalize_header_name($key)
        {
        }
        /**
         * @param string $key
         * @return string|null
         */
        public function get_header($key)
        {
        }
        /**
         * @param string $key
         * @return array|null
         */
        public function get_header_as_array($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         */
        public function set_header($key, $value)
        {
        }
        /**
         * @param string $key
         * @param string $value
         */
        public function add_header($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function remove_header($key)
        {
        }
        /**
         * @param array $headers
         * @param bool $override
         */
        public function set_headers($headers, $override = \true)
        {
        }
        /**
         * @return array|null
         */
        public function get_content_type()
        {
        }
        /**
         * @return bool
         */
        public function is_json_content_type()
        {
        }
        /**
         * @return string[]
         */
        protected function get_parameter_order()
        {
        }
        /**
         * @param string $key
         * @return mixed|null
         * @phpstan-template TOffset of key-of<T>
         * @phpstan-param TOffset $key
         * @phpstan-return T[TOffset]|null
         */
        public function get_param($key)
        {
        }
        /**
         * @param string $key
         * @return bool
         * @phpstan-param key-of<T> $key
         */
        public function has_param($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         * @phpstan-template TOffset of key-of<T>
         * @phpstan-param TOffset $key
         * @phpstan-param T[TOffset] $value
         * @phpstan-return void
         */
        public function set_param($key, $value)
        {
        }
        /**
         * @return array
         * @phpstan-return T
         */
        public function get_params()
        {
        }
        /**
         * @return array
         */
        public function get_url_params()
        {
        }
        /**
         * @param array $params
         */
        public function set_url_params($params)
        {
        }
        /**
         * @return array
         */
        public function get_query_params()
        {
        }
        /**
         * @param array $params
         */
        public function set_query_params($params)
        {
        }
        /**
         * @return array
         */
        public function get_body_params()
        {
        }
        /**
         * @param array $params
         */
        public function set_body_params($params)
        {
        }
        /**
         * @return array
         */
        public function get_file_params()
        {
        }
        /**
         * @param array $params
         */
        public function set_file_params($params)
        {
        }
        /**
         * @return array
         */
        public function get_default_params()
        {
        }
        /**
         * @param array $params
         */
        public function set_default_params($params)
        {
        }
        /**
         * @return string
         */
        public function get_body()
        {
        }
        /**
         * @param string $data
         */
        public function set_body($data)
        {
        }
        /**
         * @return array
         */
        public function get_json_params()
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function parse_json_params()
        {
        }
        /**
         * @phpstan-return void
         */
        protected function parse_body_params()
        {
        }
        /**
         * @return string
         */
        public function get_route()
        {
        }
        /**
         * @param string $route
         */
        public function set_route($route)
        {
        }
        /**
         * @return array
         */
        public function get_attributes()
        {
        }
        /**
         * @param array $attributes
         */
        public function set_attributes($attributes)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function sanitize_params()
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function has_valid_params()
        {
        }
        /**
         * @param string $offset
         * @return bool
         * @phpstan-param key-of<T> $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         * @return mixed|null
         * @phpstan-template TOffset of key-of<T>
         * @phpstan-param TOffset $offset
         * @phpstan-return T[TOffset]|null
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param mixed $value
         * @phpstan-template TOffset of key-of<T>
         * @phpstan-param TOffset $offset
         * @phpstan-param T[TOffset] $value
         * @phpstan-return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         * @phpstan-template TOffset of key-of<T>
         * @phpstan-param TOffset $offset
         * @phpstan-return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * @param string $url
         * @return \WP_REST_Request|false
         */
        public static function from_url($url)
        {
        }
    }
    class WP_REST_Response extends \WP_HTTP_Response
    {
        /**
         * @var array
         */
        protected $links = array();
        /**
         * @var string
         */
        protected $matched_route = '';
        /**
         * @var null|array
         */
        protected $matched_handler = \null;
        /**
         * @param string $rel
         * @param string $href
         * @param array $attributes
         */
        public function add_link($rel, $href, $attributes = array())
        {
        }
        /**
         * @param string $rel
         * @param string $href
         * @phpstan-return void
         */
        public function remove_link($rel, $href = \null)
        {
        }
        /**
         * @param array $links
         */
        public function add_links($links)
        {
        }
        /**
         * @return array
         */
        public function get_links()
        {
        }
        /**
         * @param string $rel
         * @param string $link
         * @param array $other
         */
        public function link_header($rel, $link, $other = array())
        {
        }
        /**
         * @return string
         */
        public function get_matched_route()
        {
        }
        /**
         * @param string $route
         */
        public function set_matched_route($route)
        {
        }
        /**
         * @return null|array
         */
        public function get_matched_handler()
        {
        }
        /**
         * @param array $handler
         */
        public function set_matched_handler($handler)
        {
        }
        /**
         * @return bool
         */
        public function is_error()
        {
        }
        /**
         * @return \WP_Error|null
         */
        public function as_error()
        {
        }
        /**
         * @return array
         */
        public function get_curies()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_REST_Server
    {
        /**
         * Alias for GET transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const READABLE = 'GET';
        /**
         * Alias for POST transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const CREATABLE = 'POST';
        /**
         * Alias for POST, PUT, PATCH transport methods together.
         *
         * @since 4.4.0
         * @var string
         */
        const EDITABLE = 'POST, PUT, PATCH';
        /**
         * Alias for DELETE transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const DELETABLE = 'DELETE';
        /**
         * Alias for GET, POST, PUT, PATCH & DELETE transport methods together.
         *
         * @since 4.4.0
         * @var string
         */
        const ALLMETHODS = 'GET, POST, PUT, PATCH, DELETE';
        /**
         * @var array
         */
        protected $namespaces = array();
        /**
         * @var array
         */
        protected $endpoints = array();
        /**
         * @var array
         */
        protected $route_options = array();
        /**
         * @var array
         */
        protected $embed_cache = array();
        /**
         * @var array
         */
        protected $dispatching_requests = array();
        public function __construct()
        {
        }
        /**
         * @return \WP_Error|null|true
         */
        public function check_authentication()
        {
        }
        /**
         * @param \WP_Error $error
         * @return \WP_REST_Response
         */
        protected function error_to_response($error)
        {
        }
        /**
         * @param string $code
         * @param string $message
         * @param int $status
         * @return string
         */
        protected function json_error($code, $message, $status = \null)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return int
         */
        protected function get_json_encode_options(\WP_REST_Request $request)
        {
        }
        /**
         * @param string $path
         * @return null|false
         */
        public function serve_request($path = \null)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @param bool|string[] $embed
         * @phpstan-return array{
         *   _links: array,
         *   _embedded: array,
         * }
         */
        public function response_to_data($response, $embed)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @return array
         */
        public static function get_response_links($response)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @return array
         */
        public static function get_compact_response_links($response)
        {
        }
        /**
         * @param array $data
         * @param bool|string[] $embed
         * @phpstan-return array{
         *   _links: array,
         *   _embedded: array,
         * }
         */
        protected function embed_links($data, $embed = \true)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @param bool|string[] $embed
         * @return \WP_REST_Response
         */
        public function envelope_response($response, $embed)
        {
        }
        /**
         * @param string $route_namespace
         * @param string $route
         * @param array $route_args
         * @param bool $override
         */
        public function register_route($route_namespace, $route, $route_args, $override = \false)
        {
        }
        /**
         * @param string $route_namespace
         * @return array
         */
        public function get_routes($route_namespace = '')
        {
        }
        /**
         * @return string[]
         */
        public function get_namespaces()
        {
        }
        /**
         * @param string $route
         * @return array|null
         */
        public function get_route_options($route)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function dispatch($request)
        {
        }
        /**
         * @return bool
         */
        public function is_dispatching()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        protected function match_request_to_handler($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @param string $route
         * @param array $handler
         * @param \WP_Error|null $response
         * @return \WP_REST_Response
         */
        protected function respond_to_request($request, $route, $handler, $response)
        {
        }
        /**
         * @return false|string
         */
        protected function get_json_last_error()
        {
        }
        /**
         * @phpstan-param array{
         *   context?: string,
         * } $request
         * @return \WP_REST_Response
         */
        public function get_index($request)
        {
        }
        /**
         * @param \WP_REST_Response $response
         */
        protected function add_active_theme_link_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * @param \WP_REST_Response $response
         */
        protected function add_site_logo_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * @param \WP_REST_Response $response
         */
        protected function add_site_icon_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @param int $image_id
         * @param string $type
         */
        protected function add_image_to_index(\WP_REST_Response $response, $image_id, $type)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_namespace_index($request)
        {
        }
        /**
         * @param array $routes
         * @phpstan-param 'view'|'help' $context
         * @return array[]
         */
        public function get_data_for_routes($routes, $context = 'view')
        {
        }
        /**
         * @param string $route
         * @param array $callbacks
         * @phpstan-param 'view'|'help' $context
         * @return array|null
         */
        public function get_data_for_route($route, $callbacks, $context = 'view')
        {
        }
        /**
         * @return int
         */
        protected function get_max_batch_size()
        {
        }
        /**
         * @param \WP_REST_Request $batch_request
         * @return \WP_REST_Response
         */
        public function serve_batch_request_v1(\WP_REST_Request $batch_request)
        {
        }
        /**
         * @param int $code
         */
        protected function set_status($code)
        {
        }
        /**
         * @param string $key
         * @param string $value
         */
        public function send_header($key, $value)
        {
        }
        /**
         * @param array $headers
         */
        public function send_headers($headers)
        {
        }
        /**
         * @param string $key
         */
        public function remove_header($key)
        {
        }
        /**
         * @return string
         */
        public static function get_raw_data()
        {
        }
        /**
         * @param array $server
         * @return array
         */
        public function get_headers($server)
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_REST_Controller
    {
        /**
         * @var string
         */
        protected $namespace;
        /**
         * @var string
         */
        protected $rest_base;
        /**
         * @var array
         */
        protected $schema;
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param mixed $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @return array|mixed
         */
        public function prepare_response_for_collection($response)
        {
        }
        /**
         * @param array $response_data
         * @param string $context
         * @return array
         */
        public function filter_response_by_context($response_data, $context)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_public_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param array $args
         * @return array
         */
        public function get_context_param($args = array())
        {
        }
        /**
         * @param array $response_data
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function add_additional_fields_to_object($response_data, $request)
        {
        }
        /**
         * @param object $data_object
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function update_additional_fields_for_object($data_object, $request)
        {
        }
        /**
         * @param array $schema
         * @return array
         */
        protected function add_additional_fields_schema($schema)
        {
        }
        /**
         * @param string $object_type
         * @return array
         */
        protected function get_additional_fields($object_type = \null)
        {
        }
        /**
         * @return string
         */
        protected function get_object_type()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return string[]
         */
        public function get_fields_for_response($request)
        {
        }
        /**
         * @param string $method
         * @return array
         */
        public function get_endpoint_args_for_item_schema($method = \WP_REST_Server::CREATABLE)
        {
        }
        /**
         * @param string $slug
         * @return string
         */
        public function sanitize_slug($slug)
        {
        }
    }
    class WP_REST_Application_Passwords_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_current_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_current_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function do_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_User $user
         * @param array $item
         * @return array
         */
        protected function prepare_links(\WP_User $user, $item)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_User|\WP_Error
         */
        protected function get_user($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        protected function get_application_password($request)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Posts_Controller extends \WP_REST_Controller
    {
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @var \WP_REST_Post_Meta_Fields
         */
        protected $meta;
        /**
         * @var int[]
         */
        protected $password_check_passed = array();
        /**
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        /**
         * @param string $post_type
         */
        public function __construct($post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param bool $required
         * @param \WP_Post $post
         * @return bool
         */
        public function check_password_required($required, $post)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_Post|\WP_Error
         */
        protected function get_post($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return bool|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return bool
         */
        public function can_access_password_content($post, $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param array $prepared_args
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * @param string $date_gmt
         * @param string|null $date
         * @return string|null
         */
        protected function prepare_date_response($date_gmt, $date = \null)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param string $status
         * @param \WP_REST_Request $request
         * @param string $param
         * @return true|\WP_Error
         */
        public function check_status($status, $request, $param)
        {
        }
        /**
         * @param string $post_status
         * @param \WP_Post_Type $post_type
         * @return string|\WP_Error
         */
        protected function handle_status_param($post_status, $post_type)
        {
        }
        /**
         * @param int $featured_media
         * @param int $post_id
         * @return bool|\WP_Error
         */
        protected function handle_featured_media($featured_media, $post_id)
        {
        }
        /**
         * @param string $template
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function check_template($template, $request)
        {
        }
        /**
         * @param string $template
         * @param int $post_id
         * @param bool $validate
         */
        public function handle_template($template, $post_id, $validate = \false)
        {
        }
        /**
         * @param int $post_id
         * @param \WP_REST_Request $request
         * @return null|\WP_Error
         */
        protected function handle_terms($post_id, $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return bool
         */
        protected function check_assign_terms_permission($request)
        {
        }
        /**
         * @param \WP_Post_Type|string $post_type
         * @return bool
         */
        protected function check_is_post_type_allowed($post_type)
        {
        }
        /**
         * @param \WP_Post $post
         * @return bool
         */
        public function check_read_permission($post)
        {
        }
        /**
         * @param \WP_Post $post
         * @return bool
         */
        protected function check_update_permission($post)
        {
        }
        /**
         * @param \WP_Post $post
         * @return bool
         */
        protected function check_create_permission($post)
        {
        }
        /**
         * @param \WP_Post $post
         * @return bool
         */
        protected function check_delete_permission($post)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return string
         */
        public function protected_title_format()
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function prepare_links($post)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function get_available_actions($post, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        protected function get_schema_links()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string|array $statuses
         * @param \WP_REST_Request $request
         * @param string $parameter
         * @return array|\WP_Error
         */
        public function sanitize_post_statuses($statuses, $request, $parameter)
        {
        }
    }
    class WP_REST_Attachments_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * @var false
         */
        protected $allow_batch = \false;
        public function register_routes()
        {
        }
        /**
         * @param array $prepared_args
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        protected function insert_attachment($request)
        {
        }
        /**
         * @param int $featured_media
         * @param int $post_id
         * @return bool|\WP_Error
         */
        protected function handle_featured_media($featured_media, $post_id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function post_process_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function post_process_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function edit_media_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function edit_media_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param string $data
         * @param array $headers
         * @param string|null $time
         * @return array|\WP_Error
         */
        protected function upload_from_data($data, $headers, $time = \null)
        {
        }
        /**
         * @param string[] $disposition_header
         * @return string|null
         */
        public static function get_filename_from_disposition($disposition_header)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param array $files
         * @param array $headers
         * @param string|null $time
         * @return array|\WP_Error
         */
        protected function upload_from_file($files, $headers, $time = \null)
        {
        }
        /**
         * @return array
         */
        protected function get_media_types()
        {
        }
        /**
         * @param array $file
         * @return true|\WP_Error
         */
        protected function check_upload_size($file)
        {
        }
        /**
         * @return array
         */
        protected function get_edit_media_item_args()
        {
        }
    }
    class WP_REST_Revisions_Controller extends \WP_REST_Controller
    {
        /**
         * @var \WP_REST_Post_Meta_Fields
         */
        protected $meta;
        /**
         * @param string $parent_post_type
         */
        public function __construct($parent_post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param int $parent_post_id
         * @return \WP_Post|\WP_Error
         */
        protected function get_parent($parent_post_id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_Post|\WP_Error
         */
        protected function get_revision($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param array $prepared_args
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param string $date_gmt
         * @param string|null $date
         * @return string|null
         */
        protected function prepare_date_response($date_gmt, $date = \null)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string $excerpt
         * @param \WP_Post $post
         * @return string
         */
        protected function prepare_excerpt_response($excerpt, $post)
        {
        }
    }
    class WP_REST_Autosaves_Controller extends \WP_REST_Revisions_Controller
    {
        /**
         * @param string $parent_post_type
         */
        public function __construct($parent_post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param int $parent_id
         * @return \WP_Post|\WP_Error
         */
        protected function get_parent($parent_id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Post|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param array $post_data
         * @param array $meta
         * @return mixed
         */
        public function create_post_autosave($post_data, array $meta = array())
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Block_Directory_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param array $plugin
         * @return array
         */
        protected function prepare_links($plugin)
        {
        }
        /**
         * @param string $slug
         * @return string
         */
        protected function find_plugin_for_slug($slug)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Block_Pattern_Categories_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Error|\WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Block_Patterns_Controller extends \WP_REST_Controller
    {
        /**
         * @var array
         */
        protected static $categories_migration = array('buttons' => 'call-to-action', 'columns' => 'text', 'query' => 'posts');
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param array $pattern
         * @return array
         */
        protected function migrate_pattern_categories($pattern)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Block_Renderer_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Block_Types_Controller extends \WP_REST_Controller
    {
        const NAME_PATTERN = '^[a-z][a-z0-9-]*/[a-z][a-z0-9-]*$';
        /**
         * @var \WP_Block_Type_Registry
         */
        protected $block_registry;
        /**
         * @var \WP_Block_Styles_Registry
         */
        protected $style_registry;
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function check_read_permission()
        {
        }
        /**
         * @param string $name
         * @return \WP_Block_Type|\WP_Error
         */
        protected function get_block($name)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_Block_Type $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Block_Type $block_type
         * @return array
         */
        protected function prepare_links($block_type)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Blocks_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * @param \WP_Post $post
         * @return bool
         */
        public function check_read_permission($post)
        {
        }
        /**
         * @param array $data
         * @param string $context
         * @return array
         */
        public function filter_response_by_context($data, $context)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Comments_Controller extends \WP_REST_Controller
    {
        /**
         * @var \WP_REST_Comment_Meta_Fields
         */
        protected $meta;
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_Comment|\WP_Error
         */
        protected function get_comment($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_Comment $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @return array
         */
        protected function prepare_links($comment)
        {
        }
        /**
         * @param string $query_param
         * @return string
         */
        protected function normalize_query_param($query_param)
        {
        }
        /**
         * @param string|int $comment_approved
         * @return string
         */
        protected function prepare_status_response($comment_approved)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string|int $new_status
         * @param int $comment_id
         * @return bool
         */
        protected function handle_status_param($new_status, $comment_id)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return bool
         */
        protected function check_read_post_permission($post, $request)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @param \WP_REST_Request $request
         * @return bool
         */
        protected function check_read_permission($comment, $request)
        {
        }
        /**
         * @param \WP_Comment $comment
         * @return bool
         */
        protected function check_edit_permission($comment)
        {
        }
        /**
         * @param string $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return string|\WP_Error
         */
        public function check_comment_author_email($value, $request, $param)
        {
        }
        /**
         * @param array $prepared_comment
         * @return bool
         */
        protected function check_is_comment_content_allowed($prepared_comment)
        {
        }
    }
    class WP_REST_Edit_Site_Export_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return \WP_Error|true
         */
        public function permissions_check()
        {
        }
        /**
         * @return \WP_Error|void
         */
        public function export()
        {
        }
    }
    class WP_REST_Font_Collections_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_Font_Collection $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param \WP_Font_Collection $collection
         * @return array
         */
        protected function prepare_links($collection)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
    }
    class WP_REST_Font_Faces_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * The latest version of theme.json schema supported by the controller.
         *
         * @since 6.5.0
         * @var int
         */
        const LATEST_THEME_JSON_VERSION_SUPPORTED = 3;
        /**
         * @var false
         */
        protected $allow_batch = \false;
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param string $value
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function validate_create_font_face_settings($value, $request)
        {
        }
        /**
         * @param string $value
         * @return array
         */
        public function sanitize_font_face_settings($value)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_public_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_create_params()
        {
        }
        /**
         * @param int $font_family_id
         * @return \WP_Post|\WP_Error
         */
        protected function get_parent_font_family_post($font_family_id)
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function prepare_links($post)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param string $value
         * @return string
         */
        protected function sanitize_src($value)
        {
        }
        /**
         * @param array $file
         * @return array|\WP_Error
         */
        protected function handle_font_file_upload($file)
        {
        }
        /**
         * @param array $file
         * @param string $message
         * @return \WP_Error
         */
        public function handle_font_file_upload_error($file, $message)
        {
        }
        /**
         * @param string $path
         * @return string
         */
        protected function relative_fonts_path($path)
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function get_settings_from_post($post)
        {
        }
    }
    class WP_REST_Font_Families_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * The latest version of theme.json schema supported by the controller.
         *
         * @since 6.5.0
         * @var int
         */
        const LATEST_THEME_JSON_VERSION_SUPPORTED = 3;
        /**
         * @var false
         */
        protected $allow_batch = \false;
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param string $value
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function validate_font_family_settings($value, $request)
        {
        }
        /**
         * @param string $value
         * @return array
         */
        public function sanitize_font_family_settings($value)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_public_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_endpoint_args_for_item_schema($method = \WP_REST_Server::CREATABLE)
        {
        }
        /**
         * @param int $font_family_id
         * @return int[]
         */
        protected function get_font_face_ids($font_family_id)
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function prepare_links($post)
        {
        }
        /**
         * @param int $font_family_id
         * @return array
         */
        protected function prepare_font_face_links($font_family_id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function get_settings_from_post($post)
        {
        }
    }
    class WP_REST_Global_Styles_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * @var array
         */
        protected $allow_batch = array('v1' => \false);
        /**
         * @param string $post_type
         */
        public function __construct($post_type = 'wp_global_styles')
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param string $id_or_stylesheet
         * @return string
         */
        public function _sanitize_global_styles_callback($id_or_stylesheet)
        {
        }
        /**
         * @param int $id
         * @return \WP_Post|\WP_Error
         */
        protected function get_post($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_Post $post
         * @return bool
         */
        public function check_read_permission($post)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($post, $request)
        {
        }
        /**
         * @param int $id
         * @return array
         */
        protected function prepare_links($id)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function get_available_actions($post, $request)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_theme_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_theme_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_theme_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_theme_items($request)
        {
        }
        /**
         * @param string $css
         * @return true|\WP_Error
         */
        protected function validate_custom_css($css)
        {
        }
    }
    class WP_REST_Global_Styles_Revisions_Controller extends \WP_REST_Revisions_Controller
    {
        /**
         * @var string
         */
        protected $parent_base;
        /**
         * @var string
         */
        protected $parent_post_type;
        /**
         * @param string $parent_post_type
         */
        public function __construct($parent_post_type = 'wp_global_styles')
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param string $raw_json
         * @return array|\WP_Error
         */
        protected function get_decoded_global_styles_json($raw_json)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($post, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Menu_Items_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * @param int $id
         * @return object|\WP_Error
         */
        protected function get_nav_menu_item($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return bool|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function check_has_read_only_access($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Post $post
         * @return array
         */
        protected function prepare_links($post)
        {
        }
        /**
         * @return array
         */
        protected function get_schema_links()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param array $prepared_args
         * @param \WP_REST_Request $request
         * @return array
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * @param int $menu_item_id
         * @return int
         */
        protected function get_menu_id($menu_item_id)
        {
        }
    }
    class WP_REST_Menu_Locations_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Error|bool
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Error|\WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Error|\WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * @param \stdClass $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \stdClass $location
         * @return array
         */
        protected function prepare_links($location)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Terms_Controller extends \WP_REST_Controller
    {
        /**
         * @var string
         */
        protected $taxonomy;
        /**
         * @var \WP_REST_Term_Meta_Fields
         */
        protected $meta;
        /**
         * @var string
         */
        protected $sort_column;
        /**
         * @var int
         */
        protected $total_terms;
        /**
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        /**
         * @param string $taxonomy
         */
        public function __construct($taxonomy)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_Post $post
         * @param \WP_REST_Request $request
         * @return bool
         */
        public function check_read_terms_permission_for_post($post, $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return bool|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_Term|\WP_Error
         */
        protected function get_term($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object
         */
        public function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Term $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Term $term
         * @return array
         */
        protected function prepare_links($term)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string $taxonomy
         * @return bool
         */
        protected function check_is_taxonomy_allowed($taxonomy)
        {
        }
    }
    class WP_REST_Menus_Controller extends \WP_REST_Terms_Controller
    {
        /**
         * @param \WP_REST_Request $request
         * @return bool|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_Term|\WP_Error
         */
        protected function get_term($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function check_has_read_only_access($request)
        {
        }
        /**
         * @param \WP_Term $term
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($term, $request)
        {
        }
        /**
         * @param \WP_Term $term
         * @return array
         */
        protected function prepare_links($term)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object
         */
        public function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param int $menu_id
         * @return bool
         */
        protected function get_menu_auto_add($menu_id)
        {
        }
        /**
         * @param int $menu_id
         * @param \WP_REST_Request $request
         * @return bool
         */
        protected function handle_auto_add($menu_id, $request)
        {
        }
        /**
         * @param int $menu_id
         * @return string[]
         */
        protected function get_menu_locations($menu_id)
        {
        }
        /**
         * @param int $menu_id
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function handle_locations($menu_id, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Navigation_Fallback_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
    }
    class WP_REST_Pattern_Directory_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param object $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /*
         * Include a hash of the query args, so that different requests are stored in
         * separate caches.
         *
         * MD5 is chosen for its speed, low-collision rate, universal availability, and to stay
         * under the character limit for `_site_transient_timeout_{...}` keys.
         *
         * @link https://stackoverflow.com/questions/3665247/fastest-hash-for-non-cryptographic-uses
         *
         * @since 6.0.0
         *
         * @param array $query_args Query arguments to generate a transient key from.
         * @return string Transient key.
         */
        protected function get_transient_key($query_args)
        {
        }
    }
    class WP_REST_Plugins_Controller extends \WP_REST_Controller
    {
        const PATTERN = '[^.\\/]+(?:\\/[^.\\/]+)?';
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param string $plugin
         * @return true|\WP_Error
         */
        protected function check_read_permission($plugin)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param array $item
         * @return array[]
         */
        protected function prepare_links($item)
        {
        }
        /**
         * @param string $plugin
         * @return array|\WP_Error
         */
        protected function get_plugin_data($plugin)
        {
        }
        /**
         * @param string $plugin
         * @phpstan-return 'network-active'|'active'|'inactive'
         */
        protected function get_plugin_status($plugin)
        {
        }
        /**
         * @param string $plugin
         * @param string $new_status
         * @param string $current_status
         * @return true|\WP_Error
         */
        protected function plugin_status_permission_check($plugin, $new_status, $current_status)
        {
        }
        /**
         * @param string $plugin
         * @param string $new_status
         * @param string $current_status
         * @return true|\WP_Error
         */
        protected function handle_plugin_status($plugin, $new_status, $current_status)
        {
        }
        /**
         * @param string $file
         * @return bool
         */
        public function validate_plugin_param($file)
        {
        }
        /**
         * @param string $file
         * @return string
         */
        public function sanitize_plugin_param($file)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @param array $item
         * @return bool
         */
        protected function does_plugin_match_request($request, $item)
        {
        }
        /**
         * @param string $plugin
         * @return bool
         */
        protected function is_plugin_installed($plugin)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function is_filesystem_available()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Post_Statuses_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param object $status
         * @return bool
         */
        protected function check_read_permission($status)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \stdClass $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Post_Types_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_Post_Type $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Post_Type $post_type
         * @return array
         */
        protected function prepare_links($post_type)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Search_Controller extends \WP_REST_Controller
    {
        /**
         * ID property name.
         */
        const PROP_ID = 'id';
        /**
         * Title property name.
         */
        const PROP_TITLE = 'title';
        /**
         * URL property name.
         */
        const PROP_URL = 'url';
        /**
         * Type property name.
         */
        const PROP_TYPE = 'type';
        /**
         * Subtype property name.
         */
        const PROP_SUBTYPE = 'subtype';
        /**
         * Identifier for the 'any' type.
         */
        const TYPE_ANY = 'any';
        /**
         * @var \WP_REST_Search_Handler[]
         */
        protected $search_handlers = array();
        /**
         * @param array $search_handlers
         */
        public function __construct(array $search_handlers)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permission_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param int|string $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string|array $subtypes
         * @param \WP_REST_Request $request
         * @param string $parameter
         * @return string[]|\WP_Error
         */
        public function sanitize_subtypes($subtypes, $request, $parameter)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Search_Handler|\WP_Error
         */
        protected function get_search_handler($request)
        {
        }
    }
    class WP_REST_Settings_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return bool
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param mixed $value
         * @param array $schema
         * @return mixed
         */
        protected function prepare_value($value, $schema)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @return array
         */
        protected function get_registered_options()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return mixed|\WP_Error
         */
        public function sanitize_callback($value, $request, $param)
        {
        }
        /**
         * @param array $schema
         * @return array
         */
        protected function set_additional_properties_to_false($schema)
        {
        }
    }
    class WP_REST_Sidebars_Controller extends \WP_REST_Controller
    {
        /**
         * @var bool
         */
        protected $widgets_retrieved = \false;
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param array $sidebar
         * @return bool
         */
        protected function check_read_permission($sidebar)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function do_permissions_check()
        {
        }
        /**
         * @param string|int $id
         * @return array|null
         */
        protected function get_sidebar($id)
        {
        }
        protected function retrieve_widgets()
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param array $sidebar
         * @return array
         */
        protected function prepare_links($sidebar)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Site_Health_Controller extends \WP_REST_Controller
    {
        /**
         * @param \WP_Site_Health $site_health
         */
        public function __construct($site_health)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param string $check
         * @return bool
         */
        protected function validate_request_permission($check)
        {
        }
        /**
         * @return array
         */
        public function test_background_updates()
        {
        }
        /**
         * @return array
         */
        public function test_dotorg_communication()
        {
        }
        /**
         * @return array
         */
        public function test_loopback_requests()
        {
        }
        /**
         * @return array
         */
        public function test_https_status()
        {
        }
        /**
         * @return array
         */
        public function test_authorization_header()
        {
        }
        /**
         * @return array
         */
        public function test_page_cache()
        {
        }
        /**
         * @return array|\WP_Error
         */
        public function get_directory_sizes()
        {
        }
        protected function load_admin_textdomain()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Taxonomies_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_Taxonomy $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Taxonomy $taxonomy
         * @return array
         */
        protected function prepare_links($taxonomy)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Template_Autosaves_Controller extends \WP_REST_Autosaves_Controller
    {
        /**
         * @param string $parent_post_type
         */
        public function __construct($parent_post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_Post|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param int $parent_id
         * @return \WP_Post|\WP_Error
         */
        protected function get_parent($parent_id)
        {
        }
        /**
         * @param \WP_Block_Template $template
         * @return array
         */
        protected function prepare_links($template)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Template_Revisions_Controller extends \WP_REST_Revisions_Controller
    {
        /**
         * @param string $parent_post_type
         */
        public function __construct($parent_post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param string $parent_template_id
         * @return \WP_Post|\WP_Error
         */
        protected function get_parent($parent_template_id)
        {
        }
        /**
         * @param \WP_Post $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_Block_Template $template
         * @return array
         */
        protected function prepare_links($template)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Templates_Controller extends \WP_REST_Controller
    {
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @param string $post_type
         */
        public function __construct($post_type)
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_template_fallback($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function permissions_check($request)
        {
        }
        /**
         * @param string $id
         * @return string
         */
        public function _sanitize_template_id($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \stdClass|\WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param \WP_Block_Template $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param int $id
         * @return array
         */
        protected function prepare_links($id)
        {
        }
        /**
         * @return string[]
         */
        protected function get_available_actions()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class WP_REST_Themes_Controller extends \WP_REST_Controller
    {
        /**
         * Matches theme's directory: `/themes/<subdirectory>/<theme>/` or `/themes/<theme>/`.
         * Excludes invalid directory name characters: `/:<>*?"|`.
         */
        const PATTERN = '[^\\/:<>\\*\\?"\\|]+(?:\\/[^\\/:<>\\*\\?"\\|]+)?';
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param string $stylesheet
         * @return string
         */
        public function _sanitize_stylesheet_callback($stylesheet)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function check_read_active_theme_permission()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_Theme $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_Theme $theme
         * @return array
         */
        protected function prepare_links($theme)
        {
        }
        /**
         * @param \WP_Theme $theme_a
         * @param \WP_Theme $theme_b
         * @return bool
         */
        protected function is_same_theme($theme_a, $theme_b)
        {
        }
        /**
         * @param mixed $support
         * @param array $args
         * @param string $feature
         * @param \WP_REST_Request $request
         * @return mixed
         */
        protected function prepare_theme_support($support, $args, $feature, $request)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * @param string|array $statuses
         * @param \WP_REST_Request $request
         * @param string $parameter
         * @return array|\WP_Error
         */
        public function sanitize_theme_status($statuses, $request, $parameter)
        {
        }
    }
    class WP_REST_URL_Details_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function parse_url_details($request)
        {
        }
        /**
         * @return \WP_Error|bool
         */
        public function permissions_check()
        {
        }
    }
    class WP_REST_Users_Controller extends \WP_REST_Controller
    {
        /**
         * @var \WP_REST_User_Meta_Fields
         */
        protected $meta;
        /**
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param int|bool $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return int|bool|\WP_Error
         */
        public function check_reassign($value, $request, $param)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param int $id
         * @return \WP_User|\WP_Error
         */
        protected function get_user($id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_current_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_current_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_current_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_current_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_current_item($request)
        {
        }
        /**
         * @param \WP_User $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param \WP_User $user
         * @return array
         */
        protected function prepare_links($user)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return object
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * @param int $user_id
         * @param array $roles
         * @return true|\WP_Error
         */
        protected function check_role_update($user_id, $roles)
        {
        }
        /**
         * @param string $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return string|\WP_Error
         */
        public function check_username($value, $request, $param)
        {
        }
        /**
         * @param string $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return string|\WP_Error
         */
        public function check_user_password($value, $request, $param)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Widget_Types_Controller extends \WP_REST_Controller
    {
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @return true|\WP_Error
         */
        protected function check_read_permission()
        {
        }
        /**
         * @param string $id
         * @return array|\WP_Error
         */
        public function get_widget($id)
        {
        }
        /**
         * @return array
         */
        protected function get_widgets()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param array $widget_type
         * @return array
         */
        protected function prepare_links($widget_type)
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function encode_form_data($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array
         */
        public function render($request)
        {
        }
        /**
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    class WP_REST_Widgets_Controller extends \WP_REST_Controller
    {
        /**
         * @var bool
         */
        protected $widgets_retrieved = \false;
        /**
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        public function __construct()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * @param string $sidebar_id
         * @return bool
         */
        protected function check_read_sidebar_permission($sidebar_id)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function create_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function update_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return true|\WP_Error
         */
        protected function permissions_check($request)
        {
        }
        protected function retrieve_widgets()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @param string $sidebar_id
         * @return string|\WP_Error
         */
        protected function save_widget($request, $sidebar_id)
        {
        }
        /**
         * @param array $item
         * @param \WP_REST_Request $request
         * @return \WP_REST_Response|\WP_Error
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * @param array $prepared
         * @return array
         */
        protected function prepare_links($prepared)
        {
        }
        /**
         * @return array[]
         */
        public function get_collection_params()
        {
        }
        /**
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_REST_Meta_Fields
    {
        /**
         * @return string
         */
        protected abstract function get_meta_type();
        /**
         * @return string
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_rest_field_type();
        public function register_field()
        {
        }
        /**
         * @param int $object_id
         * @param \WP_REST_Request $request
         * @return array
         */
        public function get_value($object_id, $request)
        {
        }
        /**
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param array $args
         * @return mixed
         */
        protected function prepare_value_for_response($value, $request, $args)
        {
        }
        /**
         * @param array $meta
         * @param int $object_id
         * @return null|\WP_Error
         */
        public function update_value($meta, $object_id)
        {
        }
        /**
         * @param int $object_id
         * @param string $meta_key
         * @param string $name
         * @return true|\WP_Error
         */
        protected function delete_meta_value($object_id, $meta_key, $name)
        {
        }
        /**
         * @param int $object_id
         * @param string $meta_key
         * @param string $name
         * @param array $values
         * @return true|\WP_Error
         */
        protected function update_multi_meta_value($object_id, $meta_key, $name, $values)
        {
        }
        /**
         * @param int $object_id
         * @param string $meta_key
         * @param string $name
         * @param mixed $value
         * @return true|\WP_Error
         */
        protected function update_meta_value($object_id, $meta_key, $name, $value)
        {
        }
        /**
         * @param string $meta_key
         * @param string $subtype
         * @param mixed $stored_value
         * @param mixed $user_value
         * @return bool
         */
        protected function is_meta_value_same_as_stored_value($meta_key, $subtype, $stored_value, $user_value)
        {
        }
        /**
         * @return array
         */
        protected function get_registered_fields()
        {
        }
        /**
         * @return array
         */
        public function get_field_schema()
        {
        }
        /**
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param array $args
         * @return mixed
         */
        public static function prepare_value($value, $request, $args)
        {
        }
        /**
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param string $param
         * @return array|false
         */
        public function check_meta_is_array($value, $request, $param)
        {
        }
        /**
         * @param array $schema
         * @return array
         */
        protected function default_additional_properties_to_false($schema)
        {
        }
        /**
         * @param string $type
         * @return mixed
         */
        protected static function get_empty_value_for_type($type)
        {
        }
    }
    class WP_REST_Comment_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @return string
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * @return string
         */
        public function get_rest_field_type()
        {
        }
    }
    class WP_REST_Post_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @param string $post_type
         */
        public function __construct($post_type)
        {
        }
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @return string
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * @return string
         */
        public function get_rest_field_type()
        {
        }
    }
    class WP_REST_Term_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * @var string
         */
        protected $taxonomy;
        /**
         * @param string $taxonomy
         */
        public function __construct($taxonomy)
        {
        }
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @return string
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * @return string
         */
        public function get_rest_field_type()
        {
        }
    }
    class WP_REST_User_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @return string
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * @return string
         */
        public function get_rest_field_type()
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_REST_Search_Handler
    {
        /**
         * Field containing the IDs in the search result.
         */
        const RESULT_IDS = 'ids';
        /**
         * Field containing the total count in the search result.
         */
        const RESULT_TOTAL = 'total';
        /**
         * @var string
         */
        protected $type = '';
        /**
         * @var string[]
         */
        protected $subtypes = array();
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string[]
         */
        public function get_subtypes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @return array
         */
        public abstract function search_items(\WP_REST_Request $request);
        /**
         * @param int|string $id
         * @param array $fields
         * @return array
         */
        public abstract function prepare_item($id, array $fields);
        /**
         * @param int|string $id
         * @return array
         */
        public abstract function prepare_item_links($id);
    }
    class WP_REST_Post_Format_Search_Handler extends \WP_REST_Search_Handler
    {
        public function __construct()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @phpstan-return array{
         *   ids: string[],
         *   total: int,
         * }
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * @param string $id
         * @param array $fields
         * @phpstan-return array{
         *   id: string,
         *   title: string,
         *   url: string,
         *   type: string,
         * }
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * @param string $id
         * @return array
         */
        public function prepare_item_links($id)
        {
        }
    }
    class WP_REST_Post_Search_Handler extends \WP_REST_Search_Handler
    {
        public function __construct()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @phpstan-return array{
         *   ids: int[],
         *   total: int,
         * }
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * @param int $id
         * @param array $fields
         * @phpstan-return array{
         *   id: int,
         *   title: string,
         *   url: string,
         *   type: string,
         * }
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * @param int $id
         * @return array
         */
        public function prepare_item_links($id)
        {
        }
        /**
         * @return string
         */
        public function protected_title_format()
        {
        }
        /**
         * @param \WP_Post $post
         * @return string
         */
        protected function detect_rest_item_route($post)
        {
        }
    }
    class WP_REST_Term_Search_Handler extends \WP_REST_Search_Handler
    {
        public function __construct()
        {
        }
        /**
         * @param \WP_REST_Request $request
         * @phpstan-return array{
         *   ids: int[],
         *   total: string|int|WP_Error,
         * }
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * @param int $id
         * @param array $fields
         * @phpstan-return array{
         *   id: int,
         *   title: string,
         *   url: string,
         *   type: string,
         * }
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * @param int $id
         * @return array[]
         */
        public function prepare_item_links($id)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Sitemaps_Index
    {
        /**
         * @var \WP_Sitemaps_Registry
         */
        protected $registry;
        /**
         * @param \WP_Sitemaps_Registry $registry
         */
        public function __construct(\WP_Sitemaps_Registry $registry)
        {
        }
        /**
         * @return array[]
         */
        public function get_sitemap_list()
        {
        }
        /**
         * @return string
         */
        public function get_index_url()
        {
        }
    }
    #[\AllowDynamicProperties]
    abstract class WP_Sitemaps_Provider
    {
        /**
         * @var string
         */
        protected $name = '';
        /**
         * @var string
         */
        protected $object_type = '';
        /**
         * @param int $page_num
         * @param string $object_subtype
         * @return array[]
         */
        public abstract function get_url_list($page_num, $object_subtype = '');
        /**
         * @param string $object_subtype
         * @return int
         */
        public abstract function get_max_num_pages($object_subtype = '');
        /**
         * @return array[]
         */
        public function get_sitemap_type_data()
        {
        }
        /**
         * @return array[]
         */
        public function get_sitemap_entries()
        {
        }
        /**
         * @param string $name
         * @param int $page
         * @return string
         */
        public function get_sitemap_url($name, $page)
        {
        }
        /**
         * @return array
         */
        public function get_object_subtypes()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Sitemaps_Registry
    {
        /**
         * @param string $name
         * @param \WP_Sitemaps_Provider $provider
         * @return bool
         */
        public function add_provider($name, \WP_Sitemaps_Provider $provider)
        {
        }
        /**
         * @param string $name
         * @return \WP_Sitemaps_Provider|null
         */
        public function get_provider($name)
        {
        }
        /**
         * @return \WP_Sitemaps_Provider[]
         */
        public function get_providers()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Sitemaps_Renderer
    {
        /**
         * @var string
         */
        protected $stylesheet = '';
        /**
         * @var string
         */
        protected $stylesheet_index = '';
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function get_sitemap_stylesheet_url()
        {
        }
        /**
         * @return string
         */
        public function get_sitemap_index_stylesheet_url()
        {
        }
        /**
         * @param array $sitemaps
         */
        public function render_index($sitemaps)
        {
        }
        /**
         * @param array $sitemaps
         * @return string|false
         */
        public function get_sitemap_index_xml($sitemaps)
        {
        }
        /**
         * @param array $url_list
         */
        public function render_sitemap($url_list)
        {
        }
        /**
         * @param array $url_list
         * @return string|false
         */
        public function get_sitemap_xml($url_list)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Sitemaps_Stylesheet
    {
        /**
         * @phpstan-param 'sitemap'|'index' $type
         * @phpstan-return never
         */
        public function render_stylesheet($type)
        {
        }
        public function get_sitemap_stylesheet()
        {
        }
        public function get_sitemap_index_stylesheet()
        {
        }
        /**
         * @return string
         */
        public function get_stylesheet_css()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Sitemaps
    {
        /**
         * @var \WP_Sitemaps_Index
         */
        public $index;
        /**
         * @var \WP_Sitemaps_Registry
         */
        public $registry;
        /**
         * @var \WP_Sitemaps_Renderer
         */
        public $renderer;
        public function __construct()
        {
        }
        /**
         * @phpstan-return void
         */
        public function init()
        {
        }
        /**
         * @return bool
         */
        public function sitemaps_enabled()
        {
        }
        public function register_sitemaps()
        {
        }
        public function register_rewrites()
        {
        }
        /**
         * @phpstan-return void
         */
        public function render_sitemaps()
        {
        }
        /**
         * @param bool $bypass
         * @param \WP_Query $query
         * @return bool
         */
        public function redirect_sitemapxml($bypass, $query)
        {
        }
        /**
         * @param string $output
         * @param bool $is_public
         * @return string
         */
        public function add_robots($output, $is_public)
        {
        }
    }
    class WP_Sitemaps_Posts extends \WP_Sitemaps_Provider
    {
        public function __construct()
        {
        }
        /**
         * @return \WP_Post_Type[]
         */
        public function get_object_subtypes()
        {
        }
        /**
         * @param int $page_num
         * @param string $object_subtype
         * @return array[]
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * @param string $object_subtype
         * @return int
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * @param string $post_type
         * @return array
         */
        protected function get_posts_query_args($post_type)
        {
        }
    }
    class WP_Sitemaps_Taxonomies extends \WP_Sitemaps_Provider
    {
        public function __construct()
        {
        }
        /**
         * @return \WP_Taxonomy[]
         */
        public function get_object_subtypes()
        {
        }
        /**
         * @param int $page_num
         * @param string $object_subtype
         * @return array[]
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * @param string $object_subtype
         * @return int
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * @param string $taxonomy
         * @return array
         */
        protected function get_taxonomies_query_args($taxonomy)
        {
        }
    }
    class WP_Sitemaps_Users extends \WP_Sitemaps_Provider
    {
        public function __construct()
        {
        }
        /**
         * @param int $page_num
         * @param string $object_subtype
         * @return array[]
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * @param string $object_subtype
         * @return int
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * @return array
         */
        protected function get_users_query_args()
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Style_Engine_CSS_Declarations
    {
        /**
         * @var string[]
         */
        protected $declarations = array();
        /**
         * @param string[] $declarations
         */
        public function __construct($declarations = array())
        {
        }
        /**
         * @param string $property
         * @param string $value
         * @return \WP_Style_Engine_CSS_Declarations
         */
        public function add_declaration($property, $value)
        {
        }
        /**
         * @param string $property
         * @return \WP_Style_Engine_CSS_Declarations
         */
        public function remove_declaration($property)
        {
        }
        /**
         * @param string[] $declarations
         * @return \WP_Style_Engine_CSS_Declarations
         */
        public function add_declarations($declarations)
        {
        }
        /**
         * @param string[] $properties
         * @return \WP_Style_Engine_CSS_Declarations
         */
        public function remove_declarations($properties = array())
        {
        }
        /**
         * @return string[]
         */
        public function get_declarations()
        {
        }
        /**
         * @param string $property
         * @param string $value
         * @param string $spacer
         * @return string
         */
        protected static function filter_declaration($property, $value, $spacer = '')
        {
        }
        /**
         * @param bool $should_prettify
         * @param int $indent_count
         * @return string
         */
        public function get_declarations_string($should_prettify = \false, $indent_count = 0)
        {
        }
        /**
         * @param string $property
         * @return string
         */
        protected function sanitize_property($property)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Style_Engine_CSS_Rule
    {
        /**
         * @var string
         */
        protected $selector;
        /**
         * @var \WP_Style_Engine_CSS_Declarations
         */
        protected $declarations;
        /**
         * @var string
         */
        protected $rules_group;
        /**
         * @param string $selector
         * @param string[]|\WP_Style_Engine_CSS_Declarations $declarations
         * @param string $rules_group
         */
        public function __construct($selector = '', $declarations = array(), $rules_group = '')
        {
        }
        /**
         * @param string $selector
         * @return \WP_Style_Engine_CSS_Rule
         */
        public function set_selector($selector)
        {
        }
        /**
         * @param string[]|\WP_Style_Engine_CSS_Declarations $declarations
         * @return \WP_Style_Engine_CSS_Rule
         */
        public function add_declarations($declarations)
        {
        }
        /**
         * @param string $rules_group
         * @return \WP_Style_Engine_CSS_Rule
         */
        public function set_rules_group($rules_group)
        {
        }
        /**
         * @return string
         */
        public function get_rules_group()
        {
        }
        /**
         * @return \WP_Style_Engine_CSS_Declarations
         */
        public function get_declarations()
        {
        }
        /**
         * @return string
         */
        public function get_selector()
        {
        }
        /**
         * @param bool $should_prettify
         * @param int $indent_count
         * @return string
         */
        public function get_css($should_prettify = \false, $indent_count = 0)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Style_Engine_CSS_Rules_Store
    {
        /**
         * @var \WP_Style_Engine_CSS_Rules_Store[]
         */
        protected static $stores = array();
        /**
         * @var string
         */
        protected $name = '';
        /**
         * @var \WP_Style_Engine_CSS_Rule[]
         */
        protected $rules = array();
        /**
         * @param string $store_name
         * @return \WP_Style_Engine_CSS_Rules_Store|void
         */
        public static function get_store($store_name = 'default')
        {
        }
        /**
         * @return \WP_Style_Engine_CSS_Rules_Store[]
         */
        public static function get_stores()
        {
        }
        public static function remove_all_stores()
        {
        }
        /**
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return \WP_Style_Engine_CSS_Rule[]
         */
        public function get_all_rules()
        {
        }
        /**
         * @param string $selector
         * @param string $rules_group
         * @return \WP_Style_Engine_CSS_Rule|void
         */
        public function add_rule($selector, $rules_group = '')
        {
        }
        /**
         * @param string $selector
         */
        public function remove_rule($selector)
        {
        }
    }
    #[\AllowDynamicProperties]
    class WP_Style_Engine_Processor
    {
        /**
         * @var \WP_Style_Engine_CSS_Rules_Store[]
         */
        protected $stores = array();
        /**
         * @var \WP_Style_Engine_CSS_Rule[]
         */
        protected $css_rules = array();
        /**
         * @param \WP_Style_Engine_CSS_Rules_Store $store
         * @return \WP_Style_Engine_Processor
         */
        public function add_store($store)
        {
        }
        /**
         * @param \WP_Style_Engine_CSS_Rule|\WP_Style_Engine_CSS_Rule[] $css_rules
         * @return \WP_Style_Engine_Processor
         */
        public function add_rules($css_rules)
        {
        }
        /**
         * @phpstan-param array{
         *   optimize?: bool,
         *   prettify?: bool,
         * } $options
         * @return string
         */
        public function get_css($options = array())
        {
        }
    }
    #[\AllowDynamicProperties]
    final class WP_Style_Engine
    {
        /**
         * Style definitions that contain the instructions to parse/output valid Gutenberg styles from a block's attributes.
         *
         * For every style definition, the following properties are valid:
         *
         *  - classnames    => (array) an array of classnames to be returned for block styles. The key is a classname or pattern.
         *                    A value of `true` means the classname should be applied always. Otherwise, a valid CSS property (string)
         *                    to match the incoming value, e.g., "color" to match var:preset|color|somePresetSlug.
         *  - css_vars      => (array) an array of key value pairs used to generate CSS var values.
         *                     The key should be the CSS property name that matches the second element of the preset string value,
         *                     i.e., "color" in var:preset|color|somePresetSlug. The value is a CSS var pattern (e.g. `--wp--preset--color--$slug`),
         *                     whose `$slug` fragment will be replaced with the preset slug, which is the third element of the preset string value,
         *                     i.e., `somePresetSlug` in var:preset|color|somePresetSlug.
         *  - property_keys => (array) array of keys whose values represent a valid CSS property, e.g., "margin" or "border".
         *  - path          => (array) a path that accesses the corresponding style value in the block style object.
         *  - value_func    => (string) the name of a function to generate a CSS definition array for a particular style object. The output of this function should be `array( "$property" => "$value", ... )`.
         *
         * @since 6.1.0
         * @var array
         */
        const BLOCK_STYLE_DEFINITIONS_METADATA = array('background' => array('backgroundImage' => array('property_keys' => array('default' => 'background-image'), 'value_func' => array(self::class, 'get_url_or_value_css_declaration'), 'path' => array('background', 'backgroundImage')), 'backgroundPosition' => array('property_keys' => array('default' => 'background-position'), 'path' => array('background', 'backgroundPosition')), 'backgroundRepeat' => array('property_keys' => array('default' => 'background-repeat'), 'path' => array('background', 'backgroundRepeat')), 'backgroundSize' => array('property_keys' => array('default' => 'background-size'), 'path' => array('background', 'backgroundSize'))), 'color' => array('text' => array('property_keys' => array('default' => 'color'), 'path' => array('color', 'text'), 'css_vars' => array('color' => '--wp--preset--color--$slug'), 'classnames' => array('has-text-color' => \true, 'has-$slug-color' => 'color')), 'background' => array('property_keys' => array('default' => 'background-color'), 'path' => array('color', 'background'), 'css_vars' => array('color' => '--wp--preset--color--$slug'), 'classnames' => array('has-background' => \true, 'has-$slug-background-color' => 'color')), 'gradient' => array('property_keys' => array('default' => 'background'), 'path' => array('color', 'gradient'), 'css_vars' => array('gradient' => '--wp--preset--gradient--$slug'), 'classnames' => array('has-background' => \true, 'has-$slug-gradient-background' => 'gradient'))), 'border' => array('color' => array('property_keys' => array('default' => 'border-color', 'individual' => 'border-%s-color'), 'path' => array('border', 'color'), 'classnames' => array('has-border-color' => \true, 'has-$slug-border-color' => 'color')), 'radius' => array('property_keys' => array('default' => 'border-radius', 'individual' => 'border-%s-radius'), 'path' => array('border', 'radius')), 'style' => array('property_keys' => array('default' => 'border-style', 'individual' => 'border-%s-style'), 'path' => array('border', 'style')), 'width' => array('property_keys' => array('default' => 'border-width', 'individual' => 'border-%s-width'), 'path' => array('border', 'width')), 'top' => array('value_func' => array(self::class, 'get_individual_property_css_declarations'), 'path' => array('border', 'top'), 'css_vars' => array('color' => '--wp--preset--color--$slug')), 'right' => array('value_func' => array(self::class, 'get_individual_property_css_declarations'), 'path' => array('border', 'right'), 'css_vars' => array('color' => '--wp--preset--color--$slug')), 'bottom' => array('value_func' => array(self::class, 'get_individual_property_css_declarations'), 'path' => array('border', 'bottom'), 'css_vars' => array('color' => '--wp--preset--color--$slug')), 'left' => array('value_func' => array(self::class, 'get_individual_property_css_declarations'), 'path' => array('border', 'left'), 'css_vars' => array('color' => '--wp--preset--color--$slug'))), 'shadow' => array('shadow' => array('property_keys' => array('default' => 'box-shadow'), 'path' => array('shadow'), 'css_vars' => array('shadow' => '--wp--preset--shadow--$slug'))), 'dimensions' => array('aspectRatio' => array('property_keys' => array('default' => 'aspect-ratio'), 'path' => array('dimensions', 'aspectRatio'), 'classnames' => array('has-aspect-ratio' => \true)), 'minHeight' => array('property_keys' => array('default' => 'min-height'), 'path' => array('dimensions', 'minHeight'), 'css_vars' => array('spacing' => '--wp--preset--spacing--$slug'))), 'spacing' => array('padding' => array('property_keys' => array('default' => 'padding', 'individual' => 'padding-%s'), 'path' => array('spacing', 'padding'), 'css_vars' => array('spacing' => '--wp--preset--spacing--$slug')), 'margin' => array('property_keys' => array('default' => 'margin', 'individual' => 'margin-%s'), 'path' => array('spacing', 'margin'), 'css_vars' => array('spacing' => '--wp--preset--spacing--$slug'))), 'typography' => array('fontSize' => array('property_keys' => array('default' => 'font-size'), 'path' => array('typography', 'fontSize'), 'css_vars' => array('font-size' => '--wp--preset--font-size--$slug'), 'classnames' => array('has-$slug-font-size' => 'font-size')), 'fontFamily' => array('property_keys' => array('default' => 'font-family'), 'css_vars' => array('font-family' => '--wp--preset--font-family--$slug'), 'path' => array('typography', 'fontFamily'), 'classnames' => array('has-$slug-font-family' => 'font-family')), 'fontStyle' => array('property_keys' => array('default' => 'font-style'), 'path' => array('typography', 'fontStyle')), 'fontWeight' => array('property_keys' => array('default' => 'font-weight'), 'path' => array('typography', 'fontWeight')), 'lineHeight' => array('property_keys' => array('default' => 'line-height'), 'path' => array('typography', 'lineHeight')), 'textColumns' => array('property_keys' => array('default' => 'column-count'), 'path' => array('typography', 'textColumns')), 'textDecoration' => array('property_keys' => array('default' => 'text-decoration'), 'path' => array('typography', 'textDecoration')), 'textTransform' => array('property_keys' => array('default' => 'text-transform'), 'path' => array('typography', 'textTransform')), 'letterSpacing' => array('property_keys' => array('default' => 'letter-spacing'), 'path' => array('typography', 'letterSpacing'))));
        /**
         * @param string $store_name
         * @param string $css_selector
         * @param string[] $css_declarations
         * @param string $rules_group
         * @phpstan-return void
         */
        public static function store_css_rule($store_name, $css_selector, $css_declarations, $rules_group = '')
        {
        }
        /**
         * @param string $store_name
         * @return \WP_Style_Engine_CSS_Rules_Store|null
         */
        public static function get_store($store_name)
        {
        }
        /**
         * @param array $block_styles
         * @phpstan-param array{
         *   convert_vars_to_classnames?: bool,
         *   selector?: string,
         * } $options
         * @phpstan-return array{
         *   classnames: string[],
         *   declarations: string[],
         * }
         */
        public static function parse_block_styles($block_styles, $options)
        {
        }
        /**
         * @param string[] $css_declarations
         * @param string $css_selector
         * @return string
         */
        public static function compile_css($css_declarations, $css_selector)
        {
        }
        /**
         * @param \WP_Style_Engine_CSS_Rule[] $css_rules
         * @phpstan-param array{
         *   context?: string|null,
         *   optimize?: bool,
         *   prettify?: bool,
         * } $options
         * @return string
         */
        public static function compile_stylesheet_from_css_rules($css_rules, $options = array())
        {
        }
    }
    class WP_Nav_Menu_Widget extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Archives extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Block extends \WP_Widget
    {
        /**
         * @var array
         */
        protected $default_instance = array('content' => '');
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        /**
         * @param bool $is_wide
         * @param string $widget_id
         * @return bool
         */
        public function set_is_wide_widget_in_customizer($is_wide, $widget_id)
        {
        }
    }
    class WP_Widget_Calendar extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Categories extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Custom_HTML extends \WP_Widget
    {
        /**
         * @var bool
         */
        protected $registered = \false;
        /**
         * @var array
         */
        protected $default_instance = array('title' => '', 'content' => '');
        public function __construct()
        {
        }
        /**
         * @param int $number
         * @phpstan-return void
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * @param array $attrs
         * @return array
         */
        public function _filter_gallery_shortcode_attrs($attrs)
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        public static function render_control_template_scripts()
        {
        }
        public static function add_help_text()
        {
        }
    }
    class WP_Widget_Links extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    abstract class WP_Widget_Media extends \WP_Widget
    {
        /**
         * @var array
         */
        public $l10n = array('add_to_widget' => '', 'replace_media' => '', 'edit_media' => '', 'media_library_state_multi' => '', 'media_library_state_single' => '', 'missing_attachment' => '', 'no_media_selected' => '', 'add_media' => '');
        /**
         * @var bool
         */
        protected $registered = \false;
        /**
         * @var string
         */
        protected static $default_description = '';
        /**
         * @var string[]
         */
        protected static $l10n_defaults = array();
        /**
         * @param string $id_base
         * @param string $name
         * @param array $widget_options
         * @param array $control_options
         * @phpstan-param array{
         *   classname?: string,
         *   description?: string,
         *   show_instance_in_rest?: bool,
         * } $widget_options See wp_register_sidebar_widget()
         * @phpstan-param array{
         *   height?: int,
         *   width?: int,
         *   id_base?: int|string,
         * } $control_options See wp_register_widget_control()
         */
        public function __construct($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * @param int $number
         * @phpstan-return void
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * @return array
         */
        public function get_instance_schema()
        {
        }
        /**
         * @param int|\WP_Post $attachment
         * @param string $mime_type
         * @return bool
         */
        public function is_attachment_with_mime_type($attachment, $mime_type)
        {
        }
        /**
         * @param string|array $tokens
         * @return string
         */
        public function sanitize_token_list($tokens)
        {
        }
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public abstract function render_media($instance);
        /**
         * @param array $instance
         */
        public final function form($instance)
        {
        }
        /**
         * @param array $states
         * @param \WP_Post $post
         * @return array
         */
        public function display_media_state($states, $post = \null)
        {
        }
        public function enqueue_preview_scripts()
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        public function render_control_template_scripts()
        {
        }
        public static function reset_default_labels()
        {
        }
        /**
         * @param array $instance
         * @return bool
         */
        protected function has_content($instance)
        {
        }
        /**
         * @return string
         */
        protected static function get_default_description()
        {
        }
        /**
         * @return (string|array)[]
         */
        protected static function get_l10n_defaults()
        {
        }
    }
    class WP_Widget_Media_Audio extends \WP_Widget_Media
    {
        public function __construct()
        {
        }
        /**
         * @return array
         */
        public function get_instance_schema()
        {
        }
        /**
         * @param array $instance
         */
        public function render_media($instance)
        {
        }
        public function enqueue_preview_scripts()
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        public function render_control_template_scripts()
        {
        }
    }
    class WP_Widget_Media_Gallery extends \WP_Widget_Media
    {
        public function __construct()
        {
        }
        /**
         * @return array
         */
        public function get_instance_schema()
        {
        }
        /**
         * @param array $instance
         */
        public function render_media($instance)
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        public function render_control_template_scripts()
        {
        }
        /**
         * @param array $instance
         * @return bool
         */
        protected function has_content($instance)
        {
        }
    }
    class WP_Widget_Media_Image extends \WP_Widget_Media
    {
        public function __construct()
        {
        }
        /**
         * @return array
         */
        public function get_instance_schema()
        {
        }
        /**
         * @param array $instance
         * @phpstan-return void
         */
        public function render_media($instance)
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        public function render_control_template_scripts()
        {
        }
    }
    class WP_Widget_Media_Video extends \WP_Widget_Media
    {
        public function __construct()
        {
        }
        /**
         * @return array
         */
        public function get_instance_schema()
        {
        }
        /**
         * @param array $instance
         * @phpstan-return void
         */
        public function render_media($instance)
        {
        }
        /**
         * @param string $html
         * @return string
         */
        public function inject_video_max_width_style($html)
        {
        }
        public function enqueue_preview_scripts()
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        public function render_control_template_scripts()
        {
        }
    }
    class WP_Widget_Meta extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Pages extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Recent_Comments extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @phpstan-return void
         */
        public function recent_comments_style()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        public function flush_widget_cache()
        {
        }
    }
    class WP_Widget_Recent_Posts extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_RSS extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
    }
    class WP_Widget_Search extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
    }
    class WP_Widget_Tag_Cloud extends \WP_Widget
    {
        public function __construct()
        {
        }
        /**
         * @param array $args
         * @param array $instance
         * @phpstan-return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        /**
         * @param array $instance
         * @return string
         */
        public function _get_current_taxonomy($instance)
        {
        }
    }
    class WP_Widget_Text extends \WP_Widget
    {
        /**
         * @var bool
         */
        protected $registered = \false;
        public function __construct()
        {
        }
        /**
         * @param int $number
         * @phpstan-return void
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * @phpstan-param array{
         *   text?: string,
         *   filter?: bool|string,
         *   legacy?: bool,
         * } $instance
         * @return bool
         */
        public function is_legacy_instance($instance)
        {
        }
        /**
         * @param array $attrs
         * @return array
         */
        public function _filter_gallery_shortcode_attrs($attrs)
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $matches
         * @return string
         */
        public function inject_video_max_width_style($matches)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        public function enqueue_preview_scripts()
        {
        }
        public function enqueue_admin_scripts()
        {
        }
        /**
         * @param array $instance
         */
        public function form($instance)
        {
        }
        public static function render_control_template_scripts()
        {
        }
    }
}
/**
 * Copyright (c) 2021, Alliance for Open Media. All rights reserved
 *
 * This source code is subject to the terms of the BSD 2 Clause License and
 * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
 * was not distributed with this source code in the LICENSE file, you can
 * obtain it at www.aomedia.org/license/software. If the Alliance for Open
 * Media Patent License 1.0 was not distributed with this source code in the
 * PATENTS file, you can obtain it at www.aomedia.org/license/patent.
 *
 * Note: this class is from libavifinfo - https://aomedia.googlesource.com/libavifinfo/+/refs/heads/main/avifinfo.php at f509487.
 * It is used as a fallback to parse AVIF files when the server doesn't support AVIF,
 * primarily to identify the width and height of the image.
 *
 * Note PHP 8.2 added native support for AVIF, so this class can be removed when WordPress requires PHP 8.2.
 */
namespace Avifinfo {
    // Value was not yet parsed.
    /**
     * @param int $num_bytes
     * @return int
     */
    function read_big_endian($input, $num_bytes)
    {
    }
    /**
     * @param \stream $handle
     * @param int $num_bytes
     * @return \binary
     */
    function read($handle, $num_bytes)
    {
    }
    /**
     * @param \stream $handle
     * @param int $num_bytes
     * @return bool
     */
    // Skips 'num_bytes' from the 'stream'. 'num_bytes' can be zero.
    function skip($handle, $num_bytes)
    {
    }
}
namespace {
    function do_activate_header()
    {
    }
    function wpmu_activate_stylesheet()
    {
    }
    function export_add_js()
    {
    }
    /**
     * @param string $post_type
     * @phpstan-return void
     */
    function export_date_options($post_type = 'post')
    {
    }
    /**
     * Administration API: Core Ajax handlers
     *
     * @package WordPress
     * @subpackage Administration
     * @since 2.1.0
     */
    //
    // No-privilege Ajax handlers.
    //
    /**
     * @phpstan-return never
     */
    function wp_ajax_nopriv_heartbeat()
    {
    }
    //
    // GET-based Ajax handlers.
    //
    /**
     * @phpstan-return never
     */
    function wp_ajax_fetch_list()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_ajax_tag_search()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_compression_test()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_imgedit_preview()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_oembed_cache()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_autocomplete_user()
    {
    }
    function wp_ajax_get_community_events()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_dashboard_widgets()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_logged_in()
    {
    }
    //
    // Ajax helpers.
    //
    /**
     * @param int $comment_id
     * @param int $delta
     */
    function _wp_ajax_delete_comment_response($comment_id, $delta = -1)
    {
    }
    function _wp_ajax_add_hierarchical_term()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_delete_comment()
    {
    }
    function wp_ajax_delete_tag()
    {
    }
    function wp_ajax_delete_link()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_delete_meta()
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_delete_post($action)
    {
    }
    /**
     * @param string $action
     * @phpstan-return never
     */
    function wp_ajax_trash_post($action)
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_untrash_post($action)
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_delete_page($action)
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_dim_comment()
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_add_link_category($action)
    {
    }
    function wp_ajax_add_tag()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_get_tagcloud()
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_get_comments($action)
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_replyto_comment($action)
    {
    }
    function wp_ajax_edit_comment()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_add_menu_item()
    {
    }
    function wp_ajax_add_meta()
    {
    }
    /**
     * @param string $action
     */
    function wp_ajax_add_user($action)
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_closed_postboxes()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_hidden_columns()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_update_welcome_panel()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_menu_get_metabox()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_link_ajax()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_menu_locations_save()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_meta_box_order()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_menu_quick_search()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_get_permalink()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_sample_permalink()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_inline_save()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_inline_save_tax()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_find_posts()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_widgets_order()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_widget()
    {
    }
    function wp_ajax_update_widget()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_delete_inactive_widgets()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_media_create_image_subsizes()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_upload_attachment()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_image_editor()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_set_post_thumbnail()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_get_post_thumbnail_html()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_set_attachment_thumbnail()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_date_format()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_time_format()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_fullscreen_save_post()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_remove_post_lock()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_dismiss_wp_pointer()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_get_attachment()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_query_attachments()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_attachment()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_attachment_compat()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_attachment_order()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_send_attachment_to_editor()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_send_link_to_editor()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_heartbeat()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_get_revision_diffs()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_user_color_scheme()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_query_themes()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_parse_embed()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_parse_media_shortcode()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_destroy_sessions()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_crop_image()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_generate_password()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_nopriv_generate_password()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_save_wporg_username()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_install_theme()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_update_theme()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_delete_theme()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_install_plugin()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_activate_plugin()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_update_plugin()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_delete_plugin()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_search_plugins()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_search_install_plugins()
    {
    }
    function wp_ajax_edit_theme_plugin_file()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_privacy_export_personal_data()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_wp_privacy_erase_personal_data()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_health_check_dotorg_communication()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_health_check_background_updates()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_health_check_loopback_requests()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_health_check_site_status_result()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_health_check_get_sizes()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_rest_nonce()
    {
    }
    /**
     * @phpstan-return never
     */
    function wp_ajax_toggle_auto_updates()
    {
    }
    function wp_ajax_send_password_reset()
    {
    }
    /**
     * WordPress Bookmark Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return int|\WP_Error
     */
    function add_link()
    {
    }
    /**
     * @param int $link_id
     * @return int|\WP_Error
     */
    function edit_link($link_id = 0)
    {
    }
    /**
     * @return \stdClass
     */
    function get_default_link_to_edit()
    {
    }
    /**
     * @param int $link_id
     * @return true
     */
    function wp_delete_link($link_id)
    {
    }
    /**
     * @param int $link_id
     * @return int[]
     */
    function wp_get_link_cats($link_id = 0)
    {
    }
    /**
     * @param int|\stdClass $link
     * @return object
     */
    function get_link_to_edit($link)
    {
    }
    /**
     * @phpstan-param array{
     *   link_id?: int,
     *   link_url?: string,
     *   link_name?: string,
     *   link_image?: string,
     *   link_target?: string,
     *   link_description?: string,
     *   link_visible?: string,
     *   link_owner?: int,
     *   link_rating?: int,
     *   link_rel?: string,
     *   link_notes?: string,
     *   link_rss?: string,
     *   link_category?: int,
     * } $linkdata
     * @param bool $wp_error
     * @return int|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int : positive-int|\WP_Error)
     */
    function wp_insert_link($linkdata, $wp_error = \false)
    {
    }
    /**
     * @param int $link_id
     * @param int[] $link_categories
     */
    function wp_set_link_cats($link_id = 0, $link_categories = array())
    {
    }
    /**
     * @param array $linkdata
     * @return int|\WP_Error
     * @phpstan-param array{
     *   link_id?: int,
     *   link_url?: string,
     *   link_name?: string,
     *   link_image?: string,
     *   link_target?: string,
     *   link_description?: string,
     *   link_visible?: string,
     *   link_owner?: int,
     *   link_rating?: int,
     *   link_rel?: string,
     *   link_notes?: string,
     *   link_rss?: string,
     *   link_category?: int,
     * } $linkdata See wp_insert_link()
     */
    function wp_update_link($linkdata)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_link_manager_disabled_message()
    {
    }
    // End of class
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilPathReduction()
    // Description :
    // Parameters :
    // Return Values :
    // --------------------------------------------------------------------------------
    function PclZipUtilPathReduction($p_dir)
    {
    }
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilPathInclusion()
    // Description :
    //   This function indicates if the path $p_path is under the $p_dir tree. Or,
    //   said in an other way, if the file or sub-dir $p_path is inside the dir
    //   $p_dir.
    //   The function indicates also if the path is exactly the same as the dir.
    //   This function supports path with duplicated '/' like '//', but does not
    //   support '.' or '..' statements.
    // Parameters :
    // Return Values :
    //   0 if $p_path is not inside directory $p_dir
    //   1 if $p_path is inside directory $p_dir
    //   2 if $p_path is exactly the same as $p_dir
    // --------------------------------------------------------------------------------
    function PclZipUtilPathInclusion($p_dir, $p_path)
    {
    }
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilCopyBlock()
    // Description :
    // Parameters :
    //   $p_mode : read/write compression mode
    //             0 : src & dest normal
    //             1 : src gzip, dest normal
    //             2 : src normal, dest gzip
    //             3 : src & dest gzip
    // Return Values :
    // --------------------------------------------------------------------------------
    function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode = 0)
    {
    }
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilRename()
    // Description :
    //   This function tries to do a simple rename() function. If it fails, it
    //   tries to copy the $p_src file in a new $p_dest file and then unlink the
    //   first one.
    // Parameters :
    //   $p_src : Old filename
    //   $p_dest : New filename
    // Return Values :
    //   1 on success, 0 on failure.
    // --------------------------------------------------------------------------------
    function PclZipUtilRename($p_src, $p_dest)
    {
    }
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilOptionText()
    // Description :
    //   Translate option value in text. Mainly for debug purpose.
    // Parameters :
    //   $p_option : the option value.
    // Return Values :
    //   The option text value.
    // --------------------------------------------------------------------------------
    function PclZipUtilOptionText($p_option)
    {
    }
    // --------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------
    // Function : PclZipUtilTranslateWinPath()
    // Description :
    //   Translate windows path by replacing '\' by '/' and optionally removing
    //   drive letter.
    // Parameters :
    //   $p_path : path to translate.
    //   $p_remove_disk_letter : true | false
    // Return Values :
    //   The path translated.
    // --------------------------------------------------------------------------------
    function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter = \true)
    {
    }
    /**
     * @param string $param
     * @param bool $required
     * @return mixed
     */
    function get_cli_args($param, $required = \false)
    {
    }
    /**
     * WordPress Comment Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     * @since 2.3.0
     */
    /**
     * @param string $comment_author
     * @param string $comment_date
     * @phpstan-param 'blog'|'gmt' $timezone
     * @return string|null
     */
    function comment_exists($comment_author, $comment_date, $timezone = 'blog')
    {
    }
    /**
     * @return int|\WP_Error
     */
    function edit_comment()
    {
    }
    /**
     * @param int $id
     * @return \WP_Comment|false
     */
    function get_comment_to_edit($id)
    {
    }
    /**
     * @param int|int[] $post_id
     * @return int|int[]
     */
    function get_pending_comments_num($post_id)
    {
    }
    /**
     * @param string $name
     * @return string
     */
    function floated_admin_avatar($name)
    {
    }
    function enqueue_comment_hotkeys_js()
    {
    }
    /**
     * @param string $msg
     * @phpstan-return never
     */
    function comment_footer_die($msg)
    {
    }
    /**
     * WordPress Credits Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * @param string $version
     * @param string $locale
     * @return array|false
     */
    function wp_credits($version = '', $locale = '')
    {
    }
    /**
     * @param string $display_name
     * @param string $username
     * @param string $profiles
     */
    function _wp_credits_add_profile_link(&$display_name, $username, $profiles)
    {
    }
    /**
     * @param string $data
     */
    function _wp_credits_build_object_link(&$data)
    {
    }
    /**
     * @param array $group_data
     * @phpstan-return void
     */
    function wp_credits_section_title($group_data = array())
    {
    }
    /**
     * @param array $credits
     * @param string $slug
     * @phpstan-return void
     */
    function wp_credits_section_list($credits = array(), $slug = '')
    {
    }
    function wp_dashboard_setup()
    {
    }
    /**
     * @param string $widget_id
     * @param string $widget_name
     * @param callable $callback
     * @param callable $control_callback
     * @param array $callback_args
     * @phpstan-param 'normal'|'side'|'column3'|'column4' $context
     * @phpstan-param 'high'|'core'|'default'|'low' $priority
     */
    function wp_add_dashboard_widget($widget_id, $widget_name, $callback, $control_callback = \null, $callback_args = \null, $context = 'normal', $priority = 'core')
    {
    }
    /**
     * @param mixed $dashboard
     * @param array $meta_box
     */
    function _wp_dashboard_control_callback($dashboard, $meta_box)
    {
    }
    function wp_dashboard()
    {
    }
    function wp_dashboard_right_now()
    {
    }
    function wp_network_dashboard_right_now()
    {
    }
    /**
     * @param string|false $error_msg
     * @phpstan-return void
     */
    function wp_dashboard_quick_press($error_msg = \false)
    {
    }
    /**
     * @param \WP_Post[]|false $drafts
     * @phpstan-return void
     */
    function wp_dashboard_recent_drafts($drafts = \false)
    {
    }
    /**
     * @param \WP_Comment $comment
     * @param bool $show_date
     */
    function _wp_dashboard_recent_comments_row(&$comment, $show_date = \true)
    {
    }
    function wp_dashboard_site_activity()
    {
    }
    /**
     * @phpstan-param array{
     *   max?: int,
     *   status?: string,
     *   order?: string,
     *   title?: string,
     *   id?: string,
     * } $args
     * @return bool
     */
    function wp_dashboard_recent_posts($args)
    {
    }
    /**
     * @param int $total_items
     * @return bool
     */
    function wp_dashboard_recent_comments($total_items = 5)
    {
    }
    /**
     * @param string $widget_id
     */
    function wp_dashboard_rss_output($widget_id)
    {
    }
    /**
     * @param string $widget_id
     * @param callable $callback
     * @param array $check_urls
     * @param mixed $args
     * @return bool
     */
    function wp_dashboard_cached_rss_widget($widget_id, $callback, $check_urls = array(), ...$args)
    {
    }
    //
    // Dashboard Widgets Controls.
    //
    /**
     * @param int|false $widget_control_id
     */
    function wp_dashboard_trigger_widget_control($widget_control_id = \false)
    {
    }
    /**
     * @param string $widget_id
     * @param array $form_inputs
     */
    function wp_dashboard_rss_control($widget_id, $form_inputs = array())
    {
    }
    function wp_dashboard_events_news()
    {
    }
    function wp_print_community_events_markup()
    {
    }
    function wp_print_community_events_templates()
    {
    }
    function wp_dashboard_primary()
    {
    }
    /**
     * @param string $widget_id
     * @param array $feeds
     */
    function wp_dashboard_primary_output($widget_id, $feeds)
    {
    }
    /**
     * @return true|void
     */
    function wp_dashboard_quota()
    {
    }
    function wp_dashboard_browser_nag()
    {
    }
    /**
     * @param string[] $classes
     * @return string[]
     */
    function dashboard_browser_nag_class($classes)
    {
    }
    /**
     * @return array|false
     */
    function wp_check_browser_version()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_dashboard_php_nag()
    {
    }
    /**
     * @param string[] $classes
     * @return string[]
     */
    function dashboard_php_nag_class($classes)
    {
    }
    function wp_dashboard_site_health()
    {
    }
    function wp_dashboard_empty()
    {
    }
    function wp_welcome_panel()
    {
    }
    function tinymce_include()
    {
    }
    function documentation_link()
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @param int $wmax
     * @param int $hmax
     * @return array
     */
    function wp_shrink_dimensions($width, $height, $wmax = 128, $hmax = 96)
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @return array
     */
    function get_udims($width, $height)
    {
    }
    /**
     * @param int $default_category
     * @param int $category_parent
     * @param array $popular_ids
     */
    function dropdown_categories($default_category = 0, $category_parent = 0, $popular_ids = array())
    {
    }
    /**
     * @param int $default_link_category
     */
    function dropdown_link_categories($default_link_category = 0)
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_real_file_to_edit($file)
    {
    }
    /**
     * @param int $current_cat
     * @param int $current_parent
     * @param int $category_parent
     * @param int $level
     * @param array $categories
     * @return void|false
     */
    function wp_dropdown_cats($current_cat = 0, $current_parent = 0, $category_parent = 0, $level = 0, $categories = 0)
    {
    }
    /**
     * @param string $option_group
     * @param string $option_name
     * @param callable $sanitize_callback
     */
    function add_option_update_handler($option_group, $option_name, $sanitize_callback = '')
    {
    }
    /**
     * @param string $option_group
     * @param string $option_name
     * @param callable $sanitize_callback
     */
    function remove_option_update_handler($option_group, $option_name, $sanitize_callback = '')
    {
    }
    /**
     * @param string $filename
     */
    function codepress_get_lang($filename)
    {
    }
    function codepress_footer_js()
    {
    }
    function use_codepress()
    {
    }
    /**
     * @return array
     */
    function get_author_user_ids()
    {
    }
    /**
     * @param int $user_id
     * @return array|false
     */
    function get_editable_authors($user_id)
    {
    }
    /**
     * @param int $user_id
     * @param bool $exclude_zeros
     * @return array
     */
    function get_editable_user_ids($user_id, $exclude_zeros = \true, $post_type = 'post')
    {
    }
    function get_nonauthor_user_ids()
    {
    }
    /**
     * @param int $user_id
     * @phpstan-param 'draft'|'pending'|'any' $type
     * @return array
     */
    function get_others_unpublished_posts($user_id, $type = 'any')
    {
    }
    /**
     * @param int $user_id
     * @return array
     */
    function get_others_drafts($user_id)
    {
    }
    /**
     * @param int $user_id
     * @return array
     */
    function get_others_pending($user_id)
    {
    }
    function wp_dashboard_quick_press_output()
    {
    }
    function wp_tiny_mce($teeny = \false, $settings = \false)
    {
    }
    function wp_preload_dialogs()
    {
    }
    function wp_print_editor_js()
    {
    }
    function wp_quicktags()
    {
    }
    function screen_layout($screen)
    {
    }
    function screen_options($screen)
    {
    }
    function screen_meta($screen)
    {
    }
    function favorite_actions()
    {
    }
    /**
     * @return null|string
     */
    function media_upload_image()
    {
    }
    /**
     * @return null|string
     */
    function media_upload_audio()
    {
    }
    /**
     * @return null|string
     */
    function media_upload_video()
    {
    }
    /**
     * @return null|string
     */
    function media_upload_file()
    {
    }
    /**
     * @return string
     */
    function type_url_form_image()
    {
    }
    /**
     * @return string
     */
    function type_url_form_audio()
    {
    }
    /**
     * @return string
     */
    function type_url_form_video()
    {
    }
    /**
     * @return string
     */
    function type_url_form_file()
    {
    }
    /**
     * @param string $screen
     * @param string $help
     */
    function add_contextual_help($screen, $help)
    {
    }
    /**
     * @return \WP_Theme[]
     */
    function get_allowed_themes()
    {
    }
    /**
     * @return array
     */
    function get_broken_themes()
    {
    }
    /**
     * @return \WP_Theme
     */
    function current_theme_info()
    {
    }
    function _insert_into_post_button($type)
    {
    }
    function _media_button($title, $icon, $type, $id)
    {
    }
    /**
     * @param int $id
     * @return \WP_Post
     */
    function get_post_to_edit($id)
    {
    }
    /**
     * @return \WP_Post
     */
    function get_default_page_to_edit()
    {
    }
    /**
     * @param mixed $file
     * @param int $max_side
     * @param mixed $deprecated
     * @return string
     */
    function wp_create_thumbnail($file, $max_side, $deprecated = '')
    {
    }
    function wp_nav_menu_locations_meta_box()
    {
    }
    function wp_update_core($current, $feedback = '')
    {
    }
    function wp_update_plugin($plugin, $feedback = '')
    {
    }
    function wp_update_theme($theme, $feedback = '')
    {
    }
    /**
     * @param int|bool $id
     */
    function the_attachment_links($id = \false)
    {
    }
    function screen_icon()
    {
    }
    /**
     * @return string
     */
    function get_screen_icon()
    {
    }
    function wp_dashboard_incoming_links_output()
    {
    }
    function wp_dashboard_secondary_output()
    {
    }
    function wp_dashboard_incoming_links()
    {
    }
    function wp_dashboard_incoming_links_control()
    {
    }
    function wp_dashboard_plugins()
    {
    }
    function wp_dashboard_primary_control()
    {
    }
    function wp_dashboard_recent_comments_control()
    {
    }
    function wp_dashboard_secondary()
    {
    }
    function wp_dashboard_secondary_control()
    {
    }
    /**
     * @param string $rss
     * @param array $args
     */
    function wp_dashboard_plugins_output($rss, $args = array())
    {
    }
    /**
     * @param int $old_ID
     * @param int $new_ID
     */
    function _relocate_children($old_ID, $new_ID)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param string $icon_url
     * @return string
     */
    function add_object_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $icon_url = '')
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param string $icon_url
     * @return string
     */
    function add_utility_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $icon_url = '')
    {
    }
    function post_form_autocomplete_off()
    {
    }
    function options_permalink_add_js()
    {
    }
    function _wp_privacy_requests_screen_options()
    {
    }
    /**
     * @param array $post
     * @param array $attachment
     * @return array
     */
    function image_attachment_fields_to_save($post, $attachment)
    {
    }
    /**
     * @phpstan-param array{
     *   content?: string,
     *   author?: string,
     *   category?: string,
     *   start_date?: string,
     *   end_date?: string,
     *   status?: string,
     * } $args
     */
    function export_wp($args = array())
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_file_description($file)
    {
    }
    /**
     * @return string
     */
    function get_home_path()
    {
    }
    /**
     * @param string $folder
     * @param int $levels
     * @param string[] $exclusions
     * @param bool $include_hidden
     * @return string[]|false
     */
    function list_files($folder = '', $levels = 100, $exclusions = array(), $include_hidden = \false)
    {
    }
    /**
     * @param string $plugin
     * @return string[]
     */
    function wp_get_plugin_file_editable_extensions($plugin)
    {
    }
    /**
     * @param \WP_Theme $theme
     * @return string[]
     */
    function wp_get_theme_file_editable_extensions($theme)
    {
    }
    function wp_print_file_editor_templates()
    {
    }
    /**
     * @phpstan-param array{
     *   file?: string,
     *   plugin?: string,
     *   theme?: string,
     *   newcontent?: string,
     *   nonce?: string,
     * } $args
     * @return true|\WP_Error
     */
    function wp_edit_theme_plugin_file($args)
    {
    }
    /**
     * @param string $filename
     * @param string $dir
     * @return string
     */
    function wp_tempnam($filename = '', $dir = '')
    {
    }
    /**
     * @param string $file
     * @param string[] $allowed_files
     * @return string|void
     */
    function validate_file_to_edit($file, $allowed_files = array())
    {
    }
    /**
     * @phpstan-param array{
     *   name?: string,
     *   type?: string,
     *   tmp_name?: string,
     *   size?: int,
     *   error?: int,
     * } $file
     * @phpstan-param false|array{
     *   upload_error_handler?: callable,
     *   unique_filename_callback?: callable,
     *   upload_error_strings?: string[],
     *   test_form?: bool,
     *   test_size?: bool,
     *   test_type?: bool,
     *   mimes?: string[],
     * } $overrides
     * @param string $time
     * @param string $action
     * @phpstan-return array{
     *   file: string,
     *   url: string,
     *   type: string,
     * }
     */
    function _wp_handle_upload(&$file, $overrides, $time, $action)
    {
    }
    /**
     * @param array $file
     * @param array|false $overrides
     * @param string|null $time
     * @return array
     * @phpstan-param array{
     *   name?: string,
     *   type?: string,
     *   tmp_name?: string,
     *   size?: int,
     *   error?: int,
     * } $file See _wp_handle_upload()
     * @phpstan-param false|array{
     *   upload_error_handler?: callable,
     *   unique_filename_callback?: callable,
     *   upload_error_strings?: string[],
     *   test_form?: bool,
     *   test_size?: bool,
     *   test_type?: bool,
     *   mimes?: string[],
     * } $overrides See _wp_handle_upload()
     */
    function wp_handle_upload(&$file, $overrides = \false, $time = \null)
    {
    }
    /**
     * @param array $file
     * @param array|false $overrides
     * @param string|null $time
     * @return array
     * @phpstan-param array{
     *   name?: string,
     *   type?: string,
     *   tmp_name?: string,
     *   size?: int,
     *   error?: int,
     * } $file See _wp_handle_upload()
     * @phpstan-param false|array{
     *   upload_error_handler?: callable,
     *   unique_filename_callback?: callable,
     *   upload_error_strings?: string[],
     *   test_form?: bool,
     *   test_size?: bool,
     *   test_type?: bool,
     *   mimes?: string[],
     * } $overrides See _wp_handle_upload()
     */
    function wp_handle_sideload(&$file, $overrides = \false, $time = \null)
    {
    }
    /**
     * @param string $url
     * @param int $timeout
     * @param bool $signature_verification
     * @return string|\WP_Error
     */
    function download_url($url, $timeout = 300, $signature_verification = \false)
    {
    }
    /**
     * @param string $filename
     * @param string $expected_md5
     * @return bool|\WP_Error
     */
    function verify_file_md5($filename, $expected_md5)
    {
    }
    /**
     * @param string $filename
     * @param string|array $signatures
     * @param string|false $filename_for_errors
     * @return bool|\WP_Error
     */
    function verify_file_signature($filename, $signatures, $filename_for_errors = \false)
    {
    }
    /**
     * @return string[]
     */
    function wp_trusted_keys()
    {
    }
    /**
     * @param string $file
     * @return bool
     */
    function wp_zip_file_is_valid($file)
    {
    }
    /**
     * @param string $file
     * @param string $to
     * @return true|\WP_Error
     */
    function unzip_file($file, $to)
    {
    }
    /**
     * @param string $file
     * @param string $to
     * @param string[] $needed_dirs
     * @return true|\WP_Error
     */
    function _unzip_file_ziparchive($file, $to, $needed_dirs = array())
    {
    }
    /**
     * @param string $file
     * @param string $to
     * @param string[] $needed_dirs
     * @return true|\WP_Error
     */
    function _unzip_file_pclzip($file, $to, $needed_dirs = array())
    {
    }
    /**
     * @param string $from
     * @param string $to
     * @param string[] $skip_list
     * @return true|\WP_Error
     */
    function copy_dir($from, $to, $skip_list = array())
    {
    }
    /**
     * @param string $from
     * @param string $to
     * @param bool $overwrite
     * @return true|\WP_Error
     */
    function move_dir($from, $to, $overwrite = \false)
    {
    }
    /**
     * @param array|false $args
     * @param string|false $context
     * @param bool $allow_relaxed_file_ownership
     * @return bool|null
     */
    function WP_Filesystem($args = \false, $context = \false, $allow_relaxed_file_ownership = \false)
    {
    }
    /**
     * @param array $args
     * @param string $context
     * @param bool $allow_relaxed_file_ownership
     * @return string
     */
    function get_filesystem_method($args = array(), $context = '', $allow_relaxed_file_ownership = \false)
    {
    }
    /**
     * @param string $form_post
     * @param string $type
     * @param bool|\WP_Error $error
     * @param string $context
     * @param array $extra_fields
     * @param bool $allow_relaxed_file_ownership
     * @return bool|array
     */
    function request_filesystem_credentials($form_post, $type = '', $error = \false, $context = '', $extra_fields = \null, $allow_relaxed_file_ownership = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_print_request_filesystem_credentials_modal()
    {
    }
    /**
     * @param string $filepath
     * @param bool $force
     * @return bool
     */
    function wp_opcache_invalidate($filepath, $force = \false)
    {
    }
    /**
     * @param string $dir
     * @phpstan-return void
     */
    function wp_opcache_invalidate_directory($dir)
    {
    }
    /**
     * WordPress Image Editor
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param int $post_id
     * @param false|object $msg
     */
    function wp_image_editor($post_id, $msg = \false)
    {
    }
    /**
     * @param \WP_Image_Editor $image
     * @param string $mime_type
     * @param int $attachment_id
     * @return bool
     */
    function wp_stream_image($image, $mime_type, $attachment_id)
    {
    }
    /**
     * @param string $filename
     * @param \WP_Image_Editor $image
     * @param string $mime_type
     * @param int $post_id
     * @phpstan-return \WP_Error|bool|array{
     *   path: string,
     *   file: string,
     *   width: int,
     *   height: int,
     *   mime-type: string,
     *   filesize: int,
     * }
     */
    function wp_save_image_file($filename, $image, $mime_type, $post_id)
    {
    }
    /**
     * @param int $w
     * @param int $h
     * @return float|int
     */
    function _image_get_preview_ratio($w, $h)
    {
    }
    /**
     * @param resource|\GdImage $img
     * @param float|int $angle
     * @return resource|\GdImage|false
     */
    function _rotate_image_resource($img, $angle)
    {
    }
    /**
     * @param resource|\GdImage $img
     * @param bool $horz
     * @param bool $vert
     * @return resource|\GdImage
     */
    function _flip_image_resource($img, $horz, $vert)
    {
    }
    /**
     * @param resource|\GdImage $img
     * @param float $x
     * @param float $y
     * @param float $w
     * @param float $h
     * @return resource|\GdImage
     */
    function _crop_image_resource($img, $x, $y, $w, $h)
    {
    }
    /**
     * @param \WP_Image_Editor $image
     * @param array $changes
     * @return \WP_Image_Editor
     */
    function image_edit_apply_changes($image, $changes)
    {
    }
    /**
     * @param int $post_id
     * @return bool
     */
    function stream_preview_image($post_id)
    {
    }
    /**
     * @param int $post_id
     * @return \stdClass
     */
    function wp_restore_image($post_id)
    {
    }
    /**
     * @param int $post_id
     * @return \stdClass
     */
    function wp_save_image($post_id)
    {
    }
    /**
     * File contains all the administration image manipulation functions.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param string|int $src
     * @param int $src_x
     * @param int $src_y
     * @param int $src_w
     * @param int $src_h
     * @param int $dst_w
     * @param int $dst_h
     * @param bool|false $src_abs
     * @param string|false $dst_file
     * @return string|\WP_Error
     */
    function wp_crop_image($src, $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs = \false, $dst_file = \false)
    {
    }
    /**
     * @param int $attachment_id
     * @return array[]
     */
    function wp_get_missing_image_subsizes($attachment_id)
    {
    }
    /**
     * @param int $attachment_id
     * @return array|\WP_Error
     */
    function wp_update_image_subsizes($attachment_id)
    {
    }
    /**
     * @param array $saved_data
     * @param string $original_file
     * @param array $image_meta
     * @param int $attachment_id
     * @return array
     */
    function _wp_image_meta_replace_original($saved_data, $original_file, $image_meta, $attachment_id)
    {
    }
    /**
     * @param string $file
     * @param int $attachment_id
     * @return array
     */
    function wp_create_image_subsizes($file, $attachment_id)
    {
    }
    /**
     * @param array $new_sizes
     * @param string $file
     * @param array $image_meta
     * @param int $attachment_id
     * @return array
     */
    function _wp_make_subsizes($new_sizes, $file, $image_meta, $attachment_id)
    {
    }
    /**
     * @param string $cropped
     * @param int $parent_attachment_id
     * @param string $context
     * @return array
     */
    function wp_copy_parent_attachment_properties($cropped, $parent_attachment_id, $context = '')
    {
    }
    /**
     * @param int $attachment_id
     * @param string $file
     * @return array
     */
    function wp_generate_attachment_metadata($attachment_id, $file)
    {
    }
    /**
     * @param string $str
     * @return int|float
     */
    function wp_exif_frac2dec($str)
    {
    }
    /**
     * @param string $str
     * @return int|false
     */
    function wp_exif_date2ts($str)
    {
    }
    /**
     * @param string $file
     * @return array|false
     */
    function wp_read_image_metadata($file)
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function file_is_valid_image($path)
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function file_is_displayable_image($path)
    {
    }
    /**
     * @param int $attachment_id
     * @param string $mime_type
     * @param string|int[] $size
     * @return resource|\GdImage|false
     */
    function load_image_to_edit($attachment_id, $mime_type, $size = 'full')
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @return string|false
     */
    function _load_image_to_edit_path($attachment_id, $size = 'full')
    {
    }
    /**
     * @param int $attachment_id
     * @return string|false
     */
    function _copy_image_file($attachment_id)
    {
    }
    /**
     * WordPress Administration Importer API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return array
     */
    function get_importers()
    {
    }
    /**
     * @param array $a
     * @param array $b
     * @return int
     */
    function _usort_by_first_member($a, $b)
    {
    }
    /**
     * @param string $id
     * @param string $name
     * @param string $description
     * @param callable $callback
     * @return void|\WP_Error
     */
    function register_importer($id, $name, $description, $callback)
    {
    }
    /**
     * @param string $id
     */
    function wp_import_cleanup($id)
    {
    }
    /**
     * @return array
     */
    function wp_import_handle_upload()
    {
    }
    /**
     * @return array
     */
    function wp_get_popular_importers()
    {
    }
    /**
     * Helper functions for displaying a list of items in an ajaxified HTML table.
     *
     * @package WordPress
     * @subpackage List_Table
     * @since 3.1.0
     */
    /**
     * @param string $class_name
     * @param array $args
     * @return \WP_List_Table|false
     */
    function _get_list_table($class_name, $args = array())
    {
    }
    /**
     * @param string $screen
     * @param string[] $columns
     */
    function register_column_headers($screen, $columns)
    {
    }
    /**
     * @param string|\WP_Screen $screen
     * @param bool $with_id
     */
    function print_column_headers($screen, $with_id = \true)
    {
    }
    /**
     * WordPress Administration Media API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return string[]
     */
    function media_upload_tabs()
    {
    }
    /**
     * @param array $tabs
     * @return array
     */
    function update_gallery_tab($tabs)
    {
    }
    function the_media_upload_tabs()
    {
    }
    /**
     * @param int $id
     * @param string $caption
     * @param string $title
     * @param string $align
     * @param string $url
     * @param bool|string $rel
     * @param string|int[] $size
     * @param string $alt
     * @return string
     */
    function get_image_send_to_editor($id, $caption, $title, $align, $url = '', $rel = \false, $size = 'medium', $alt = '')
    {
    }
    /**
     * @param string $html
     * @param int $id
     * @param string $caption
     * @param string $title
     * @param string $align
     * @param string $url
     * @param string $size
     * @param string $alt
     * @return string
     */
    function image_add_caption($html, $id, $caption, $title, $align, $url, $size, $alt = '')
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _cleanup_image_add_caption($matches)
    {
    }
    /**
     * @param string $html
     * @phpstan-return never
     */
    function media_send_to_editor($html)
    {
    }
    /**
     * @param string $file_id
     * @param int $post_id
     * @param array $post_data
     * @param array $overrides
     * @return int|\WP_Error
     */
    function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array('test_form' => \false))
    {
    }
    /**
     * @param string[] $file_array
     * @param int $post_id
     * @param string $desc
     * @param array $post_data
     * @return int|\WP_Error
     */
    function media_handle_sideload($file_array, $post_id = 0, $desc = \null, $post_data = array())
    {
    }
    /**
     * @param callable $content_func
     * @param mixed $args
     */
    function wp_iframe($content_func, ...$args)
    {
    }
    /**
     * @param string $editor_id
     */
    function media_buttons($editor_id = 'content')
    {
    }
    /**
     * @param string $type
     * @param int $post_id
     * @param string $tab
     * @return string
     */
    function get_upload_iframe_src($type = \null, $post_id = \null, $tab = \null)
    {
    }
    /**
     * @return null|array|void
     */
    function media_upload_form_handler()
    {
    }
    /**
     * @return null|string
     */
    function wp_media_upload_handler()
    {
    }
    /**
     * @param string $file
     * @param int $post_id
     * @param string $desc
     * @param string $return_type
     * @return string|int|\WP_Error
     */
    function media_sideload_image($file, $post_id = 0, $desc = \null, $return_type = 'html')
    {
    }
    /**
     * @return string|null
     */
    function media_upload_gallery()
    {
    }
    /**
     * @return string|null
     */
    function media_upload_library()
    {
    }
    /**
     * @param \WP_Post $post
     * @param string $checked
     * @return string
     */
    function image_align_input_fields($post, $checked = '')
    {
    }
    /**
     * @param \WP_Post $post
     * @param bool|string $check
     * @return array
     */
    function image_size_input_fields($post, $check = '')
    {
    }
    /**
     * @param \WP_Post $post
     * @param string $url_type
     * @return string
     */
    function image_link_input_fields($post, $url_type = '')
    {
    }
    /**
     * @param \WP_Post $edit_post
     * @return string
     */
    function wp_caption_input_textarea($edit_post)
    {
    }
    /**
     * @param array $form_fields
     * @param object $post
     * @return array
     */
    function image_attachment_fields_to_edit($form_fields, $post)
    {
    }
    /**
     * @param array $form_fields
     * @param \WP_Post $post
     * @return array
     */
    function media_single_attachment_fields_to_edit($form_fields, $post)
    {
    }
    /**
     * @param array $form_fields
     * @param \WP_Post $post
     * @return array
     */
    function media_post_single_attachment_fields_to_edit($form_fields, $post)
    {
    }
    /**
     * @param string $html
     * @param int $attachment_id
     * @param array $attachment
     * @return string
     */
    function image_media_send_to_editor($html, $attachment_id, $attachment)
    {
    }
    /**
     * @param \WP_Post $post
     * @param array $errors
     * @return array
     */
    function get_attachment_fields_to_edit($post, $errors = \null)
    {
    }
    /**
     * @param int $post_id
     * @param array $errors
     * @return string
     */
    function get_media_items($post_id, $errors)
    {
    }
    /**
     * @param int $attachment_id
     * @param string|array $args
     * @return string
     */
    function get_media_item($attachment_id, $args = \null)
    {
    }
    /**
     * @param int $attachment_id
     * @param array $args
     * @return array
     */
    function get_compat_media_markup($attachment_id, $args = \null)
    {
    }
    function media_upload_header()
    {
    }
    /**
     * @param array $errors
     * @phpstan-return void
     */
    function media_upload_form($errors = \null)
    {
    }
    /**
     * @param string $type
     * @param array $errors
     * @param int|\WP_Error $id
     */
    function media_upload_type_form($type = 'file', $errors = \null, $id = \null)
    {
    }
    /**
     * @param string $type
     * @param object $errors
     * @param int $id
     */
    function media_upload_type_url_form($type = \null, $errors = \null, $id = \null)
    {
    }
    /**
     * @param array $errors
     */
    function media_upload_gallery_form($errors)
    {
    }
    /**
     * @param array $errors
     */
    function media_upload_library_form($errors)
    {
    }
    /**
     * @param string $default_view
     * @return string
     */
    function wp_media_insert_url_form($default_view = 'image')
    {
    }
    function media_upload_flash_bypass()
    {
    }
    function media_upload_html_bypass()
    {
    }
    function media_upload_text_after()
    {
    }
    function media_upload_max_image_resize()
    {
    }
    function multisite_over_quota_message()
    {
    }
    /**
     * @param \WP_Post $post
     */
    function edit_form_image_editor($post)
    {
    }
    function attachment_submitbox_metadata()
    {
    }
    /**
     * @param array $metadata
     * @param array $data
     */
    function wp_add_id3_tag_data(&$metadata, $data)
    {
    }
    /**
     * @param string $file
     * @return array|false
     */
    function wp_read_video_metadata($file)
    {
    }
    /**
     * @param string $file
     * @return array|false
     */
    function wp_read_audio_metadata($file)
    {
    }
    /**
     * @param array $metadata
     * @return int|false
     */
    function wp_get_media_creation_timestamp($metadata)
    {
    }
    /**
     * @param int $parent_id
     * @phpstan-param 'attach'|'detach' $action
     * @phpstan-return void
     */
    function wp_media_attach_action($parent_id, $action = 'attach')
    {
    }
    /**
     * @param string $class_to_add
     * @param string $classes
     * @return string
     */
    function add_cssclass($class_to_add, $classes)
    {
    }
    /**
     * @param array $menu
     * @return array
     */
    function add_menu_classes($menu)
    {
    }
    /**
     * @param array $a
     * @param array $b
     * @return int
     */
    function sort_menu($a, $b)
    {
    }
    /**
     * WordPress Administration Meta Boxes API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    //
    // Post-related Meta Boxes.
    //
    /**
     * @param \WP_Post $post
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: array,
     * } $args
     */
    function post_submit_meta_box($post, $args = array())
    {
    }
    /**
     * @param \WP_Post $post
     */
    function attachment_submit_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: array,
     * } $box
     */
    function post_format_meta_box($post, $box)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: array{
     *     taxonomy?: string,
     *   },
     * } $box
     */
    function post_tags_meta_box($post, $box)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: array{
     *     taxonomy?: string,
     *   },
     * } $box
     */
    function post_categories_meta_box($post, $box)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_excerpt_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_trackback_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_custom_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_comment_status_meta_box($post)
    {
    }
    /**
     * @param array $result
     * @return array
     */
    function post_comment_meta_box_thead($result)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_comment_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_slug_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_author_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_revisions_meta_box($post)
    {
    }
    //
    // Page-related Meta Boxes.
    //
    /**
     * @param \WP_Post $post
     */
    function page_attributes_meta_box($post)
    {
    }
    //
    // Link-related Meta Boxes.
    //
    /**
     * @param object $link
     */
    function link_submit_meta_box($link)
    {
    }
    /**
     * @param object $link
     */
    function link_categories_meta_box($link)
    {
    }
    /**
     * @param object $link
     */
    function link_target_meta_box($link)
    {
    }
    /**
     * @param string $xfn_relationship
     * @param string $xfn_value
     * @param mixed $deprecated
     */
    function xfn_check($xfn_relationship, $xfn_value = '', $deprecated = '')
    {
    }
    /**
     * @param object $link
     */
    function link_xfn_meta_box($link)
    {
    }
    /**
     * @param object $link
     */
    function link_advanced_meta_box($link)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function post_thumbnail_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function attachment_id3_data_meta_box($post)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function register_and_do_post_meta_boxes($post)
    {
    }
    /**
     * Misc WordPress Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return bool
     */
    function got_mod_rewrite()
    {
    }
    /**
     * @return bool
     */
    function got_url_rewrite()
    {
    }
    /**
     * @param string $filename
     * @param string $marker
     * @return string[]
     */
    function extract_from_markers($filename, $marker)
    {
    }
    /**
     * @param string $filename
     * @param string $marker
     * @param array|string $insertion
     * @return bool
     */
    function insert_with_markers($filename, $marker, $insertion)
    {
    }
    /**
     * @return bool|null
     */
    function save_mod_rewrite_rules()
    {
    }
    /**
     * @return bool|null
     */
    function iis7_save_url_rewrite_rules()
    {
    }
    /**
     * @param string $file
     */
    function update_recently_edited($file)
    {
    }
    /**
     * @param array $allowed_files
     * @return array
     */
    function wp_make_theme_file_tree($allowed_files)
    {
    }
    /**
     * @param array|string $tree
     * @param int $level
     * @param int $size
     * @param int $index
     */
    function wp_print_theme_file_tree($tree, $level = 2, $size = 1, $index = 1)
    {
    }
    /**
     * @param array $plugin_editable_files
     * @return array
     */
    function wp_make_plugin_file_tree($plugin_editable_files)
    {
    }
    /**
     * @param array|string $tree
     * @param string $label
     * @param int $level
     * @param int $size
     * @param int $index
     */
    function wp_print_plugin_file_tree($tree, $label = '', $level = 2, $size = 1, $index = 1)
    {
    }
    /**
     * @param string $old_value
     * @param string $value
     * @phpstan-return void
     */
    function update_home_siteurl($old_value, $value)
    {
    }
    /**
     * @param array $vars
     */
    function wp_reset_vars($vars)
    {
    }
    /**
     * @param string|\WP_Error $message
     */
    function show_message($message)
    {
    }
    /**
     * @param string $content
     * @return array
     */
    function wp_doc_link_parse($content)
    {
    }
    /**
     * @phpstan-return void
     */
    function set_screen_options()
    {
    }
    /**
     * @param string $filename
     * @return bool
     */
    function iis7_rewrite_rule_exists($filename)
    {
    }
    /**
     * @param string $filename
     * @return bool
     */
    function iis7_delete_rewrite_rule($filename)
    {
    }
    /**
     * @param string $filename
     * @param string $rewrite_rule
     * @return bool
     */
    function iis7_add_rewrite_rule($filename, $rewrite_rule)
    {
    }
    /**
     * @param \DOMDocument $doc
     * @param string $filename
     */
    function saveDomDocument($doc, $filename)
    {
    }
    /**
     * @param int $user_id
     */
    function admin_color_scheme_picker($user_id)
    {
    }
    function wp_color_scheme_settings()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_admin_viewport_meta()
    {
    }
    /**
     * @param string $viewport_meta
     * @return string
     */
    function _customizer_mobile_viewport_meta($viewport_meta)
    {
    }
    /**
     * @param array $response
     * @param array $data
     * @param string $screen_id
     * @return array
     */
    function wp_check_locked_posts($response, $data, $screen_id)
    {
    }
    /**
     * @param array $response
     * @param array $data
     * @param string $screen_id
     * @return array
     */
    function wp_refresh_post_lock($response, $data, $screen_id)
    {
    }
    /**
     * @param array $response
     * @param array $data
     * @param string $screen_id
     * @return array
     */
    function wp_refresh_post_nonces($response, $data, $screen_id)
    {
    }
    /**
     * @param array $response
     * @param array $data
     * @return array
     */
    function wp_refresh_metabox_loader_nonces($response, $data)
    {
    }
    /**
     * @param array $response
     * @return array
     */
    function wp_refresh_heartbeat_nonces($response)
    {
    }
    /**
     * @param array $settings
     * @return array
     */
    function wp_heartbeat_set_suspension($settings)
    {
    }
    /**
     * @param array $response
     * @param array $data
     * @return array
     */
    function heartbeat_autosave($response, $data)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_admin_canonical_url()
    {
    }
    function wp_admin_headers()
    {
    }
    function wp_page_reload_on_back_button_js()
    {
    }
    /**
     * @param string $old_value
     * @param string $value
     * @phpstan-return void
     */
    function update_option_new_admin_email($old_value, $value)
    {
    }
    /**
     * @param string $title
     * @param \WP_Post $page
     * @return string
     */
    function _wp_privacy_settings_filter_draft_page_titles($title, $page)
    {
    }
    /**
     * @phpstan-return false|array{
     *   recommended_version: string,
     *   minimum_version: string,
     *   is_supported: bool,
     *   is_secure: bool,
     *   is_acceptable: bool,
     * }
     */
    function wp_check_php_version()
    {
    }
    function wpmu_menu()
    {
    }
    function wpmu_checkAvailableSpace()
    {
    }
    function mu_options($options)
    {
    }
    function activate_sitewide_plugin()
    {
    }
    function deactivate_sitewide_plugin($plugin = \false)
    {
    }
    function is_wpmu_sitewide_plugin($file)
    {
    }
    function get_site_allowed_themes()
    {
    }
    function wpmu_get_blog_allowedthemes($blog_id = 0)
    {
    }
    function ms_deprecated_blogs_file()
    {
    }
    function install_global_terms()
    {
    }
    /**
     * @param \WP_Term|array $term
     * @param string $taxonomy
     * @return \WP_Term|array
     */
    function sync_category_tag_slugs($term, $taxonomy)
    {
    }
    /**
     * Multisite administration functions.
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 3.0.0
     */
    /**
     * @param array $file
     * @return array
     */
    function check_upload_size($file)
    {
    }
    /**
     * @param int $blog_id
     * @param bool $drop
     */
    function wpmu_delete_blog($blog_id, $drop = \false)
    {
    }
    /**
     * @param int $id
     * @return bool
     */
    function wpmu_delete_user($id)
    {
    }
    /**
     * @param bool $display_message
     * @return bool
     */
    function upload_is_user_over_quota($display_message = \true)
    {
    }
    function display_space_usage()
    {
    }
    /**
     * @param int $size
     * @return int
     */
    function fix_import_form_size($size)
    {
    }
    /**
     * @param int $id
     */
    function upload_space_setting($id)
    {
    }
    /**
     * @param int $id
     * @return int|false
     */
    function refresh_user_details($id)
    {
    }
    /**
     * @param string $code
     * @return string
     */
    function format_code_lang($code = '')
    {
    }
    /**
     * @phpstan-return void
     */
    function _access_denied_splash()
    {
    }
    /**
     * @param string $permission
     * @return bool
     */
    function check_import_new_users($permission)
    {
    }
    // See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.
    /**
     * @param string[] $lang_files
     * @param string $current
     */
    function mu_dropdown_languages($lang_files = array(), $current = '')
    {
    }
    /**
     * @return void|false
     */
    function site_admin_notice()
    {
    }
    /**
     * @param array $data
     * @param array $postarr
     * @return array
     */
    function avoid_blog_page_permalink_collision($data, $postarr)
    {
    }
    function choose_primary_blog()
    {
    }
    /**
     * @param int $network_id
     * @return bool
     */
    function can_edit_network($network_id)
    {
    }
    function _thickbox_path_admin_subfolder()
    {
    }
    /**
     * @param array $users
     * @return bool
     */
    function confirm_delete_users($users)
    {
    }
    function network_settings_add_js()
    {
    }
    /**
     * @phpstan-param array{
     *   blog_id?: int,
     *   links?: array,
     *   selected?: string,
     * } $args
     */
    function network_edit_site_nav($args = array())
    {
    }
    /**
     * @return array
     */
    function get_site_screen_help_tab_args()
    {
    }
    /**
     * @return string
     */
    function get_site_screen_help_sidebar_content()
    {
    }
    /**
     * @param array $request
     * @phpstan-return void
     */
    function _wp_ajax_menu_quick_search($request = array())
    {
    }
    function wp_nav_menu_setup()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_initial_nav_menu_meta_boxes()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_nav_menu_post_type_meta_boxes()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_nav_menu_taxonomy_meta_boxes()
    {
    }
    /**
     * @param int|string $nav_menu_selected_id
     * @param bool $display
     * @return string|false
     */
    function wp_nav_menu_disabled_check($nav_menu_selected_id, $display = \true)
    {
    }
    function wp_nav_menu_item_link_meta_box()
    {
    }
    /**
     * @param string $data_object
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: WP_Post_Type,
     * } $box
     * @phpstan-return void
     */
    function wp_nav_menu_item_post_type_meta_box($data_object, $box)
    {
    }
    /**
     * @param string $data_object
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   callback?: callable,
     *   args?: object,
     * } $box
     * @phpstan-return void
     */
    function wp_nav_menu_item_taxonomy_meta_box($data_object, $box)
    {
    }
    /**
     * @param int $menu_id
     * @param array[] $menu_data
     * @return int[]
     */
    function wp_save_nav_menu_items($menu_id = 0, $menu_data = array())
    {
    }
    /**
     * @param object $data_object
     * @return object
     */
    function _wp_nav_menu_meta_box_object($data_object = \null)
    {
    }
    /**
     * @param int $menu_id
     * @return string|\WP_Error
     */
    function wp_get_nav_menu_to_edit($menu_id = 0)
    {
    }
    /**
     * @return string[]
     */
    function wp_nav_menu_manage_columns()
    {
    }
    function _wp_delete_orphaned_draft_menu_items()
    {
    }
    /**
     * @param int|string $nav_menu_selected_id
     * @param string $nav_menu_selected_title
     * @return string[]
     */
    function wp_nav_menu_update_menu_items($nav_menu_selected_id, $nav_menu_selected_title)
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_expand_nav_menu_post_data()
    {
    }
    /**
     * WordPress Network Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * @return string|false
     */
    function network_domain_check()
    {
    }
    /**
     * @return bool
     */
    function allow_subdomain_install()
    {
    }
    /**
     * @return bool
     */
    function allow_subdirectory_install()
    {
    }
    /**
     * @return string
     */
    function get_clean_basedomain()
    {
    }
    /**
     * @param false|\WP_Error $errors
     */
    function network_step1($errors = \false)
    {
    }
    /**
     * @param false|\WP_Error $errors
     */
    function network_step2($errors = \false)
    {
    }
    function options_discussion_add_js()
    {
    }
    function options_general_add_js()
    {
    }
    function options_reading_add_js()
    {
    }
    function options_reading_blog_charset()
    {
    }
    /**
     * WordPress Plugin Install Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @phpstan-param 'query_plugins'|'plugin_information'|'hot_tags'|'hot_categories' $action
     * @phpstan-param object|array{
     *   slug?: string,
     *   per_page?: int,
     *   page?: int,
     *   number?: int,
     *   search?: string,
     *   tag?: string,
     *   author?: string,
     *   user?: string,
     *   browse?: string,
     *   locale?: string,
     *   installed_plugins?: string,
     *   is_ssl?: bool,
     *   fields?: array{
     *     short_description?: bool,
     *     description?: bool,
     *     sections?: bool,
     *     tested?: bool,
     *     requires?: bool,
     *     requires_php?: bool,
     *     rating?: bool,
     *     ratings?: bool,
     *     downloaded?: bool,
     *     downloadlink?: bool,
     *     last_updated?: bool,
     *     added?: bool,
     *     tags?: bool,
     *     compatibility?: bool,
     *     homepage?: bool,
     *     versions?: bool,
     *     donate_link?: bool,
     *     reviews?: bool,
     *     banners?: bool,
     *     icons?: bool,
     *     active_installs?: bool,
     *     group?: bool,
     *     contributors?: bool,
     *   },
     * } $args
     * @return object|array|\WP_Error
     */
    function plugins_api($action, $args = array())
    {
    }
    /**
     * @param array $args
     * @return array|\WP_Error
     */
    function install_popular_tags($args = array())
    {
    }
    function install_dashboard()
    {
    }
    /**
     * @param bool $deprecated
     */
    function install_search_form($deprecated = \true)
    {
    }
    function install_plugins_upload()
    {
    }
    function install_plugins_favorites_form()
    {
    }
    /**
     * @phpstan-return void
     */
    function display_plugins_table()
    {
    }
    /**
     * @param array|object $api
     * @param bool $loop
     * @phpstan-return array{
     *   status: string,
     *   url: string,
     *   version: string,
     *   file: string,
     * }
     */
    function install_plugin_install_status($api, $loop = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function install_plugin_information()
    {
    }
    /**
     * @param string $name
     * @phpstan-param object|array{
     *   slug?: string,
     *   requires_plugins?: string[],
     *   version?: string,
     * } $data
     * @param bool $compatible_php
     * @param bool $compatible_wp
     * @return string
     */
    function wp_get_plugin_action_button($name, $data, $compatible_php, $compatible_wp)
    {
    }
    /**
     * WordPress Plugin Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param string $plugin_file
     * @param bool $markup
     * @param bool $translate
     * @phpstan-return array{
     *   Name: string,
     *   PluginURI: string,
     *   Version: string,
     *   Description: string,
     *   Author: string,
     *   AuthorURI: string,
     *   TextDomain: string,
     *   DomainPath: string,
     *   Network: bool,
     *   RequiresWP: string,
     *   RequiresPHP: string,
     *   UpdateURI: string,
     *   RequiresPlugins: string,
     *   Title: string,
     *   AuthorName: string,
     * }
     */
    function get_plugin_data($plugin_file, $markup = \true, $translate = \true)
    {
    }
    /**
     * @param string $plugin_file
     * @param array $plugin_data
     * @param bool $markup
     * @param bool $translate
     * @return array
     */
    function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = \true, $translate = \true)
    {
    }
    /**
     * @param string $plugin
     * @return string[]
     */
    function get_plugin_files($plugin)
    {
    }
    /**
     * @param string $plugin_folder
     * @return array[]
     */
    function get_plugins($plugin_folder = '')
    {
    }
    /**
     * @return array[]
     */
    function get_mu_plugins()
    {
    }
    /**
     * @param array $a
     * @param array $b
     * @return int
     */
    function _sort_uname_callback($a, $b)
    {
    }
    /**
     * @return array[]
     */
    function get_dropins()
    {
    }
    /**
     * @phpstan-return array<int|string, array{
     *   0: string,
     *   1: string|true,
     * }>
     */
    function _get_dropins()
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_plugin_active($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_plugin_inactive($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_plugin_active_for_network($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_network_only_plugin($plugin)
    {
    }
    /**
     * @param string $plugin
     * @param string $redirect
     * @param bool $network_wide
     * @param bool $silent
     * @return null|\WP_Error
     */
    function activate_plugin($plugin, $redirect = '', $network_wide = \false, $silent = \false)
    {
    }
    /**
     * @param string|string[] $plugins
     * @param bool $silent
     * @param bool|null $network_wide
     */
    function deactivate_plugins($plugins, $silent = \false, $network_wide = \null)
    {
    }
    /**
     * @param string|string[] $plugins
     * @param string $redirect
     * @param bool $network_wide
     * @param bool $silent
     * @return true|\WP_Error
     */
    function activate_plugins($plugins, $redirect = '', $network_wide = \false, $silent = \false)
    {
    }
    /**
     * @param string[] $plugins
     * @param string $deprecated
     * @return bool|null|\WP_Error
     */
    function delete_plugins($plugins, $deprecated = '')
    {
    }
    /**
     * @return \WP_Error[]
     */
    function validate_active_plugins()
    {
    }
    /**
     * @param string $plugin
     * @return int|\WP_Error
     */
    function validate_plugin($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return true|\WP_Error
     */
    function validate_plugin_requirements($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_uninstallable_plugin($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return true|void
     */
    function uninstall_plugin($plugin)
    {
    }
    //
    // Menu.
    //
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param string $icon_url
     * @param int|float $position
     * @return string
     */
    function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $icon_url = '', $position = \null)
    {
    }
    /**
     * @param string $parent_slug
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int|float $position
     * @return string|false
     * @phpstan-param ''|callable $callback
     */
    function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_management_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_options_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_theme_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_plugins_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_users_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_dashboard_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_posts_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_media_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_links_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_pages_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $page_title
     * @param string $menu_title
     * @param string $capability
     * @param string $menu_slug
     * @param callable $callback
     * @param int $position
     * @return string|false
     */
    function add_comments_page($page_title, $menu_title, $capability, $menu_slug, $callback = '', $position = \null)
    {
    }
    /**
     * @param string $menu_slug
     * @return array|false
     */
    function remove_menu_page($menu_slug)
    {
    }
    /**
     * @param string $menu_slug
     * @param string $submenu_slug
     * @return array|false
     */
    function remove_submenu_page($menu_slug, $submenu_slug)
    {
    }
    /**
     * @param string $menu_slug
     * @param bool $display
     * @return string
     */
    function menu_page_url($menu_slug, $display = \true)
    {
    }
    //
    // Pluggable Menu Support -- Private.
    //
    /**
     * @param string $parent_page
     * @return string
     */
    function get_admin_page_parent($parent_page = '')
    {
    }
    /**
     * @return string
     */
    function get_admin_page_title()
    {
    }
    /**
     * @param string $plugin_page
     * @param string $parent_page
     * @return string|null
     */
    function get_plugin_page_hook($plugin_page, $parent_page)
    {
    }
    /**
     * @param string $plugin_page
     * @param string $parent_page
     * @return string
     */
    function get_plugin_page_hookname($plugin_page, $parent_page)
    {
    }
    /**
     * @return bool
     */
    function user_can_access_admin_page()
    {
    }
    /* Allowed list functions */
    /**
     * @param array $options
     * @return array
     */
    function option_update_filter($options)
    {
    }
    /**
     * @param array $new_options
     * @param string|array $options
     * @return array
     */
    function add_allowed_options($new_options, $options = '')
    {
    }
    /**
     * @param array $del_options
     * @param string|array $options
     * @return array
     */
    function remove_allowed_options($del_options, $options = '')
    {
    }
    /**
     * @param string $option_group
     */
    function settings_fields($option_group)
    {
    }
    /**
     * @param bool $clear_update_cache
     */
    function wp_clean_plugins_cache($clear_update_cache = \true)
    {
    }
    /**
     * @param string $plugin
     */
    function plugin_sandbox_scrape($plugin)
    {
    }
    /**
     * @param string $plugin_name
     * @param string $policy_text
     * @phpstan-return void
     */
    function wp_add_privacy_policy_content($plugin_name, $policy_text)
    {
    }
    /**
     * @param string $plugin
     * @return bool
     */
    function is_plugin_paused($plugin)
    {
    }
    /**
     * @param string $plugin
     * @return array|false
     */
    function wp_get_plugin_error($plugin)
    {
    }
    /**
     * @param string $plugin
     * @param string $redirect
     * @return true|\WP_Error
     */
    function resume_plugin($plugin, $redirect = '')
    {
    }
    /**
     * @phpstan-return void
     */
    function paused_plugins_notice()
    {
    }
    /**
     * @phpstan-return void
     */
    function deactivated_plugins_notice()
    {
    }
    /**
     * WordPress Post Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param bool $update
     * @param array|null $post_data
     * @return array|\WP_Error
     */
    function _wp_translate_postdata($update = \false, $post_data = \null)
    {
    }
    /**
     * @param array|\WP_Error|null $post_data
     * @return array|\WP_Error
     */
    function _wp_get_allowed_postdata($post_data = \null)
    {
    }
    /**
     * @param array|null $post_data
     * @return int
     */
    function edit_post($post_data = \null)
    {
    }
    /**
     * @param array|null $post_data
     * @return array
     */
    function bulk_edit_posts($post_data = \null)
    {
    }
    /**
     * @param string $post_type
     * @param bool $create_in_db
     * @return \WP_Post
     */
    function get_default_post_to_edit($post_type = 'post', $create_in_db = \false)
    {
    }
    /**
     * @param string $title
     * @param string $content
     * @param string $date
     * @param string $type
     * @param string $status
     * @return int
     */
    function post_exists($title, $content = '', $date = '', $type = '', $status = '')
    {
    }
    /**
     * @return int|\WP_Error
     */
    function wp_write_post()
    {
    }
    /**
     * @return int|void
     */
    function write_post()
    {
    }
    //
    // Post Meta.
    //
    /**
     * @param int $post_id
     * @return int|bool
     */
    function add_meta($post_id)
    {
    }
    /**
     * @param int $mid
     * @return bool
     */
    function delete_meta($mid)
    {
    }
    /**
     * @return string[]
     */
    function get_meta_keys()
    {
    }
    /**
     * @param int $mid
     * @return object|bool
     */
    function get_post_meta_by_id($mid)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return array<int|string, array{
     *   meta_key: string,
     *   meta_value: mixed,
     *   meta_id: string,
     *   post_id: string,
     * }>
     */
    function has_meta($post_id)
    {
    }
    /**
     * @param int $meta_id
     * @param string $meta_key
     * @param string $meta_value
     * @return bool
     */
    function update_meta($meta_id, $meta_key, $meta_value)
    {
    }
    //
    // Private.
    //
    /**
     * @param int|\WP_Post $post
     * @return void|int|\WP_Error
     */
    function _fix_attachment_links($post)
    {
    }
    /**
     * @param string $type
     * @return string[]
     */
    function get_available_post_statuses($type = 'post')
    {
    }
    /**
     * @param array|false $q
     * @return array
     */
    function wp_edit_posts_query($q = \false)
    {
    }
    /**
     * @param array|false $q
     * @return array
     */
    function wp_edit_attachments_query_vars($q = \false)
    {
    }
    /**
     * @param array|false $q
     * @return array
     */
    function wp_edit_attachments_query($q = \false)
    {
    }
    /**
     * @param string $box_id
     * @param string $screen_id
     * @return string
     */
    function postbox_classes($box_id, $screen_id)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string|null $title
     * @param string|null $name
     * @phpstan-return array{
     *   0: string,
     *   1: string,
     * }
     */
    function get_sample_permalink($post, $title = \null, $name = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string|null $new_title
     * @param string|null $new_slug
     * @return string
     */
    function get_sample_permalink_html($post, $new_title = \null, $new_slug = \null)
    {
    }
    /**
     * @param int|null $thumbnail_id
     * @param int|\WP_Post|null $post
     * @return string
     */
    function _wp_post_thumbnail_html($thumbnail_id = \null, $post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int|false
     */
    function wp_check_post_lock($post)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-return false|array{
     *   0: int,
     *   1: int,
     * }
     */
    function wp_set_post_lock($post)
    {
    }
    /**
     * @phpstan-return void
     */
    function _admin_notice_post_locked()
    {
    }
    /**
     * @param array|int $post_data
     * @return int|\WP_Error
     */
    function wp_create_post_autosave($post_data)
    {
    }
    /**
     * @param array $new_autosave
     */
    function wp_autosave_post_revisioned_meta_fields($new_autosave)
    {
    }
    /**
     * @return string
     */
    function post_preview()
    {
    }
    /**
     * @param array $post_data
     * @return mixed
     */
    function wp_autosave($post_data)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return never
     */
    function redirect_post($post_id = '')
    {
    }
    /**
     * @param string $taxonomy
     * @param array $terms
     * @return int[]
     */
    function taxonomy_meta_box_sanitize_cb_checkboxes($taxonomy, $terms)
    {
    }
    /**
     * @param string $taxonomy
     * @param array|string $terms
     * @return array
     */
    function taxonomy_meta_box_sanitize_cb_input($taxonomy, $terms)
    {
    }
    /**
     * @return array
     */
    function get_block_editor_server_block_settings()
    {
    }
    function the_block_editor_meta_boxes()
    {
    }
    /**
     * @param \WP_Post $post
     */
    function the_block_editor_meta_box_post_form_hidden_fields($post)
    {
    }
    /**
     * @param bool $value
     * @param string $post_type
     * @return bool
     */
    function _disable_block_editor_for_navigation_post_type($value, $post_type)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _disable_content_editor_for_navigation_post_type($post)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _enable_content_editor_for_navigation_post_type($post)
    {
    }
    /**
     * WordPress Administration Privacy Tools API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param int $request_id
     * @return true|\WP_Error
     */
    function _wp_privacy_resend_request($request_id)
    {
    }
    /**
     * @param int $request_id
     * @return int|\WP_Error
     */
    function _wp_privacy_completed_request($request_id)
    {
    }
    function _wp_personal_data_handle_actions()
    {
    }
    function _wp_personal_data_cleanup_requests()
    {
    }
    /**
     * @phpstan-param array{
     *   group_label?: string,
     *   items?: array{
     *     group_item_data: array{
     *       name: string,
     *       value: string,
     *     },
     *   },
     * } $group_data
     * @param string $group_id
     * @param int $groups_count
     * @return string
     */
    function wp_privacy_generate_personal_data_export_group_html($group_data, $group_id = '', $groups_count = 1)
    {
    }
    /**
     * @param int $request_id
     */
    function wp_privacy_generate_personal_data_export_file($request_id)
    {
    }
    /**
     * @param int $request_id
     * @return true|\WP_Error
     */
    function wp_privacy_send_personal_data_export_email($request_id)
    {
    }
    /**
     * @param array $response
     * @param int $exporter_index
     * @param string $email_address
     * @param int $page
     * @param int $request_id
     * @param bool $send_as_email
     * @param string $exporter_key
     * @return array
     */
    function wp_privacy_process_personal_data_export_page($response, $exporter_index, $email_address, $page, $request_id, $send_as_email, $exporter_key)
    {
    }
    /**
     * @param array $response
     * @param int $eraser_index
     * @param string $email_address
     * @param int $page
     * @param int $request_id
     * @return array
     */
    function wp_privacy_process_personal_data_erasure_page($response, $eraser_index, $email_address, $page, $request_id)
    {
    }
    /**
     * WordPress Administration Revisions API
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.6.0
     */
    /**
     * @param \WP_Post|int $post
     * @param int $compare_from
     * @param int $compare_to
     * @return array|false
     */
    function wp_get_revision_ui_diff($post, $compare_from, $compare_to)
    {
    }
    /**
     * @param \WP_Post|int $post
     * @param int $selected_revision_id
     * @param int $from
     * @return array
     */
    function wp_prepare_revisions_for_js($post, $selected_revision_id, $from = \null)
    {
    }
    function wp_print_revision_templates()
    {
    }
    /**
     * @param string $scope
     * @param int $blog_id
     * @return string
     */
    function wp_get_db_schema($scope = 'all', $blog_id = \null)
    {
    }
    /**
     * @param array $options
     */
    function populate_options(array $options = array())
    {
    }
    function populate_roles()
    {
    }
    function populate_roles_160()
    {
    }
    function populate_roles_210()
    {
    }
    function populate_roles_230()
    {
    }
    function populate_roles_250()
    {
    }
    function populate_roles_260()
    {
    }
    function populate_roles_270()
    {
    }
    function populate_roles_280()
    {
    }
    function populate_roles_300()
    {
    }
    function install_network()
    {
    }
    /**
     * @param int $network_id
     * @param string $domain
     * @param string $email
     * @param string $site_name
     * @param string $path
     * @param bool $subdomain_install
     * @return true|\WP_Error
     */
    function populate_network($network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = \false)
    {
    }
    /**
     * @param int $network_id
     * @param array $meta
     */
    function populate_network_meta($network_id, array $meta = array())
    {
    }
    /**
     * @param int $site_id
     * @param array $meta
     * @phpstan-return void
     */
    function populate_site_meta($site_id, array $meta = array())
    {
    }
    /**
     * WordPress Administration Screen API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param string|\WP_Screen $screen
     * @return string[]
     */
    function get_column_headers($screen)
    {
    }
    /**
     * @param string|\WP_Screen $screen
     * @return string[]
     */
    function get_hidden_columns($screen)
    {
    }
    /**
     * @param \WP_Screen $screen
     * @phpstan-return void
     */
    function meta_box_prefs($screen)
    {
    }
    /**
     * @param string|\WP_Screen $screen
     * @return string[]
     */
    function get_hidden_meta_boxes($screen)
    {
    }
    /**
     * @param string $option
     * @param mixed $args
     * @phpstan-return void
     */
    function add_screen_option($option, $args = array())
    {
    }
    /**
     * @return \WP_Screen|null
     */
    function get_current_screen()
    {
    }
    /**
     * @param string|\WP_Screen $hook_name
     */
    function set_current_screen($hook_name = '')
    {
    }
    /**
     * WordPress Taxonomy Administration API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    //
    // Category.
    //
    /**
     * @param int|string $cat_name
     * @param int $category_parent
     * @return string|null
     */
    function category_exists($cat_name, $category_parent = \null)
    {
    }
    /**
     * @param int $id
     * @return object
     */
    function get_category_to_edit($id)
    {
    }
    /**
     * @param int|string $cat_name
     * @param int $category_parent
     * @return int|\WP_Error
     */
    function wp_create_category($cat_name, $category_parent = 0)
    {
    }
    /**
     * @param string[] $categories
     * @param int $post_id
     * @return int[]
     */
    function wp_create_categories($categories, $post_id = '')
    {
    }
    /**
     * @phpstan-param array{
     *   cat_ID?: int,
     *   taxonomy?: string,
     *   cat_name?: string,
     *   category_description?: string,
     *   category_nicename?: string,
     *   category_parent?: int|string,
     * } $catarr
     * @param bool $wp_error
     * @return int|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int : positive-int|\WP_Error)
     */
    function wp_insert_category($catarr, $wp_error = \false)
    {
    }
    /**
     * @param array $catarr
     * @return int|false
     */
    function wp_update_category($catarr)
    {
    }
    //
    // Tags.
    //
    /**
     * @param int|string $tag_name
     * @return mixed
     * @phpstan-return ($tag_name is 0 ? 0 : ($tag_name is '' ? null : array{term_id: string, term_taxonomy_id: string}|null))
     */
    function tag_exists($tag_name)
    {
    }
    /**
     * @param int|string $tag_name
     * @return array|\WP_Error
     */
    function wp_create_tag($tag_name)
    {
    }
    /**
     * @param int $post_id
     * @param string $taxonomy
     * @return string|false|\WP_Error
     */
    function get_tags_to_edit($post_id, $taxonomy = 'post_tag')
    {
    }
    /**
     * @param int $post_id
     * @param string $taxonomy
     * @return string|false|\WP_Error
     */
    function get_terms_to_edit($post_id, $taxonomy = 'post_tag')
    {
    }
    /**
     * @param string $tag_name
     * @param string $taxonomy
     * @return array|\WP_Error
     */
    function wp_create_term($tag_name, $taxonomy = 'post_tag')
    {
    }
    //
    // Category Checklists.
    //
    /**
     * @param int $post_id
     * @param int $descendants_and_self
     * @param int[]|false $selected_cats
     * @param int[]|false $popular_cats
     * @param \Walker $walker
     * @param bool $checked_ontop
     */
    function wp_category_checklist($post_id = 0, $descendants_and_self = 0, $selected_cats = \false, $popular_cats = \false, $walker = \null, $checked_ontop = \true)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-param array{
     *   descendants_and_self?: int,
     *   selected_cats?: int[],
     *   popular_cats?: int[],
     *   walker?: Walker,
     *   taxonomy?: string,
     *   checked_ontop?: bool,
     *   echo?: bool,
     * } $args
     * @return string
     */
    function wp_terms_checklist($post_id = 0, $args = array())
    {
    }
    /**
     * @param string $taxonomy
     * @param int $default_term
     * @param int $number
     * @param bool $display
     * @return int[]
     */
    function wp_popular_terms_checklist($taxonomy, $default_term = 0, $number = 10, $display = \true)
    {
    }
    /**
     * @param int $link_id
     * @phpstan-return void
     */
    function wp_link_category_checklist($link_id = 0)
    {
    }
    /**
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function get_inline_data($post)
    {
    }
    /**
     * @param int $position
     * @param bool $checkbox
     * @param string $mode
     * @param bool $table_row
     * @phpstan-return void
     */
    function wp_comment_reply($position = 1, $checkbox = \false, $mode = 'single', $table_row = \true)
    {
    }
    function wp_comment_trashnotice()
    {
    }
    /**
     * @param array[] $meta
     * @phpstan-return void
     */
    function list_meta($meta)
    {
    }
    /**
     * @param array $entry
     * @param int $count
     * @return string
     */
    function _list_meta_row($entry, &$count)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function meta_form($post = \null)
    {
    }
    /**
     * @param int|bool $edit
     * @param int|bool $for_post
     * @param int $tab_index
     * @param int|bool $multi
     * @phpstan-return void
     */
    function touch_time($edit = 1, $for_post = 1, $tab_index = 0, $multi = 0)
    {
    }
    /**
     * @param string $default_template
     * @param string $post_type
     */
    function page_template_dropdown($default_template = '', $post_type = 'page')
    {
    }
    /**
     * @param int $default_page
     * @param int $parent_page
     * @param int $level
     * @param int|\WP_Post $post
     * @return void|false
     */
    function parent_dropdown($default_page = 0, $parent_page = 0, $level = 0, $post = \null)
    {
    }
    /**
     * @param string $selected
     */
    function wp_dropdown_roles($selected = '')
    {
    }
    /**
     * @param string $action
     */
    function wp_import_upload_form($action)
    {
    }
    /**
     * @param string $id
     * @param string $title
     * @param callable $callback
     * @param string|array|\WP_Screen $screen
     * @param string $context
     * @phpstan-param 'high'|'core'|'default'|'low' $priority
     * @param array $callback_args
     * @phpstan-return void
     */
    function add_meta_box($id, $title, $callback, $screen = \null, $context = 'advanced', $priority = 'default', $callback_args = \null)
    {
    }
    /**
     * @param mixed $data_object
     * @phpstan-param array{
     *   id?: string,
     *   title?: string,
     *   old_callback?: callable,
     *   args?: array,
     * } $box
     */
    function do_block_editor_incompatible_meta_box($data_object, $box)
    {
    }
    /**
     * @param callable $callback
     * @return array|null
     */
    function _get_plugin_from_callback($callback)
    {
    }
    /**
     * @param string|\WP_Screen $screen
     * @param string $context
     * @param mixed $data_object
     * @return int
     */
    function do_meta_boxes($screen, $context, $data_object)
    {
    }
    /**
     * @param string $id
     * @param string|array|\WP_Screen $screen
     * @param string $context
     * @phpstan-return void
     */
    function remove_meta_box($id, $screen, $context)
    {
    }
    /**
     * @param string|object $screen
     * @param string $context
     * @param mixed $data_object
     * @return int
     */
    function do_accordion_sections($screen, $context, $data_object)
    {
    }
    /**
     * @param string $id
     * @param string $title
     * @param callable $callback
     * @param string $page
     * @phpstan-param array{
     *   before_section?: string,
     *   after_section?: string,
     *   section_class?: string,
     * } $args
     */
    function add_settings_section($id, $title, $callback, $page, $args = array())
    {
    }
    /**
     * @param string $id
     * @param string $title
     * @param callable $callback
     * @param string $page
     * @param string $section
     * @phpstan-param array{
     *   label_for?: string,
     *   class?: string,
     * } $args
     */
    function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array())
    {
    }
    /**
     * @param string $page
     * @phpstan-return void
     */
    function do_settings_sections($page)
    {
    }
    /**
     * @param string $page
     * @param string $section
     * @phpstan-return void
     */
    function do_settings_fields($page, $section)
    {
    }
    /**
     * @param string $setting
     * @param string $code
     * @param string $message
     * @param string $type
     */
    function add_settings_error($setting, $code, $message, $type = 'error')
    {
    }
    /**
     * @param string $setting
     * @param bool $sanitize
     * @phpstan-return array<int|string, array{
     *   setting: string,
     *   code: string,
     *   message: string,
     *   type: string,
     * }>
     */
    function get_settings_errors($setting = '', $sanitize = \false)
    {
    }
    /**
     * @param string $setting
     * @param bool $sanitize
     * @param bool $hide_on_update
     * @phpstan-return void
     */
    function settings_errors($setting = '', $sanitize = \false, $hide_on_update = \false)
    {
    }
    /**
     * @param string $found_action
     */
    function find_posts_div($found_action = '')
    {
    }
    function the_post_password()
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function _draft_or_post_title($post = 0)
    {
    }
    function _admin_search_query()
    {
    }
    /**
     * @param string $title
     * @param bool $deprecated
     */
    function iframe_header($title = '', $deprecated = \false)
    {
    }
    function iframe_footer()
    {
    }
    /**
     * @param \WP_Post $post
     * @param bool $display
     * @return string
     */
    function _post_states($post, $display = \true)
    {
    }
    /**
     * @param \WP_Post $post
     * @return string[]
     */
    function get_post_states($post)
    {
    }
    /**
     * @param \WP_Post $post
     * @param bool $display
     * @return string
     */
    function _media_states($post, $display = \true)
    {
    }
    /**
     * @param \WP_Post $post
     * @return string[]
     */
    function get_media_states($post)
    {
    }
    function compression_test()
    {
    }
    /**
     * @param string $text
     * @param string $type
     * @param string $name
     * @param bool $wrap
     * @param array|string $other_attributes
     */
    function submit_button($text = '', $type = 'primary', $name = 'submit', $wrap = \true, $other_attributes = '')
    {
    }
    /**
     * @param string $text
     * @param string $type
     * @param string $name
     * @param bool $wrap
     * @param array|string $other_attributes
     * @return string
     */
    function get_submit_button($text = '', $type = 'primary large', $name = 'submit', $wrap = \true, $other_attributes = '')
    {
    }
    function _wp_admin_html_begin()
    {
    }
    /**
     * @param string $hook_name
     * @return \WP_Screen
     */
    function convert_to_screen($hook_name)
    {
    }
    function _local_storage_notice()
    {
    }
    /**
     * @phpstan-param array{
     *   rating?: int|float,
     *   type?: string,
     *   number?: int,
     *   echo?: bool,
     * } $args
     * @return string
     */
    function wp_star_rating($args = array())
    {
    }
    function _wp_posts_page_notice()
    {
    }
    function _wp_block_editor_posts_page_notice()
    {
    }
    /**
     * @return array
     */
    function install_themes_feature_list()
    {
    }
    /**
     * @param bool $type_selector
     */
    function install_theme_search_form($type_selector = \true)
    {
    }
    function install_themes_dashboard()
    {
    }
    function install_themes_upload()
    {
    }
    /**
     * @param object $theme
     */
    function display_theme($theme)
    {
    }
    function display_themes()
    {
    }
    /**
     * @phpstan-return never
     */
    function install_theme_information()
    {
    }
    /**
     * WordPress Theme Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param string $stylesheet
     * @param string $redirect
     * @return bool|null|\WP_Error
     */
    function delete_theme($stylesheet, $redirect = '')
    {
    }
    /**
     * @param \WP_Post|null $post
     * @param string $post_type
     * @return string[]
     */
    function get_page_templates($post = \null, $post_type = 'page')
    {
    }
    /**
     * @param string $fullpath
     * @param string $containingfolder
     * @return string
     */
    function _get_template_edit_filename($fullpath, $containingfolder)
    {
    }
    /**
     * @param \WP_Theme $theme
     */
    function theme_update_available($theme)
    {
    }
    /**
     * @param \WP_Theme $theme
     * @return string|false
     */
    function get_theme_update_available($theme)
    {
    }
    /**
     * @param bool $api
     * @return array
     */
    function get_theme_feature_list($api = \true)
    {
    }
    /**
     * @phpstan-param 'query_themes'|'theme_information'|'hot_tags'|'feature_list' $action
     * @phpstan-param object|array{
     *   slug?: string,
     *   per_page?: int,
     *   page?: int,
     *   number?: int,
     *   search?: string,
     *   tag?: string,
     *   author?: string,
     *   user?: string,
     *   browse?: string,
     *   locale?: string,
     *   fields?: array{
     *     description?: bool,
     *     sections?: bool,
     *     rating?: bool,
     *     ratings?: bool,
     *     downloaded?: bool,
     *     downloadlink?: bool,
     *     last_updated?: bool,
     *     tags?: bool,
     *     homepage?: bool,
     *     screenshots?: bool,
     *     screenshot_count?: int,
     *     screenshot_url?: bool,
     *     photon_screenshots?: bool,
     *     template?: bool,
     *     parent?: bool,
     *     versions?: bool,
     *     theme_url?: bool,
     *     extended_author?: bool,
     *   },
     * } $args
     * @return object|array|\WP_Error
     */
    function themes_api($action, $args = array())
    {
    }
    /**
     * @param \WP_Theme[] $themes
     * @return array
     */
    function wp_prepare_themes_for_js($themes = \null)
    {
    }
    function customize_themes_print_templates()
    {
    }
    /**
     * @param string $theme
     * @return bool
     */
    function is_theme_paused($theme)
    {
    }
    /**
     * @param string $theme
     * @return array|false
     */
    function wp_get_theme_error($theme)
    {
    }
    /**
     * @param string $theme
     * @param string $redirect
     * @return bool|\WP_Error
     */
    function resume_theme($theme, $redirect = '')
    {
    }
    /**
     * @phpstan-return void
     */
    function paused_themes_notice()
    {
    }
    /**
     * WordPress Translation Installation Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @param string $type
     * @param array|object $args
     * @return array|\WP_Error
     */
    function translations_api($type, $args = \null)
    {
    }
    /**
     * @return array[]
     */
    function wp_get_available_translations()
    {
    }
    /**
     * @param array[] $languages
     */
    function wp_install_language_form($languages)
    {
    }
    /**
     * @param string $download
     * @return string|false
     */
    function wp_download_language_pack($download)
    {
    }
    /**
     * @return bool
     */
    function wp_can_install_language_pack()
    {
    }
    /**
     * @param string $from
     * @param string $to
     * @return string|\WP_Error
     */
    function update_core($from, $to)
    {
    }
    /**
     * @param string $to
     * @phpstan-return void
     */
    function _preload_old_requests_classes_and_interfaces($to)
    {
    }
    /**
     * @param string $new_version
     * @phpstan-return void
     */
    function _redirect_to_about_wordpress($new_version)
    {
    }
    function _upgrade_422_remove_genericons()
    {
    }
    /**
     * @param string $directory
     * @return array
     */
    function _upgrade_422_find_genericons_files_in_folder($directory)
    {
    }
    function _upgrade_440_force_deactivate_incompatible_plugins()
    {
    }
    function _upgrade_core_deactivate_incompatible_plugins()
    {
    }
    /**
     * WordPress Administration Update API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return object|array|false
     */
    function get_preferred_from_update_core()
    {
    }
    /**
     * @param array $options
     * @return array|false
     */
    function get_core_updates($options = array())
    {
    }
    /**
     * @return object|false
     */
    function find_core_auto_update()
    {
    }
    /**
     * @param string $version
     * @param string $locale
     * @return array|false
     */
    function get_core_checksums($version, $locale)
    {
    }
    /**
     * @param object $update
     * @return bool
     */
    function dismiss_core_update($update)
    {
    }
    /**
     * @param string $version
     * @param string $locale
     * @return bool
     */
    function undismiss_core_update($version, $locale)
    {
    }
    /**
     * @param string $version
     * @param string $locale
     * @return object|false
     */
    function find_core_update($version, $locale)
    {
    }
    /**
     * @param string $msg
     * @return string
     */
    function core_update_footer($msg = '')
    {
    }
    /**
     * @return void|false
     */
    function update_nag()
    {
    }
    function update_right_now_message()
    {
    }
    /**
     * @return array
     */
    function get_plugin_updates()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_plugin_update_rows()
    {
    }
    /**
     * @param string $file
     * @param array $plugin_data
     * @return void|false
     */
    function wp_plugin_update_row($file, $plugin_data)
    {
    }
    /**
     * @return array
     */
    function get_theme_updates()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_theme_update_rows()
    {
    }
    /**
     * @param string $theme_key
     * @param \WP_Theme $theme
     * @return void|false
     */
    function wp_theme_update_row($theme_key, $theme)
    {
    }
    /**
     * @return void|false
     */
    function maintenance_nag()
    {
    }
    function wp_print_admin_notice_templates()
    {
    }
    function wp_print_update_row_templates()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_recovery_mode_nag()
    {
    }
    /**
     * @phpstan-param 'theme'|'plugin' $type
     * @return bool
     */
    function wp_is_auto_update_enabled_for_type($type)
    {
    }
    /**
     * @phpstan-param 'theme'|'plugin' $type
     * @param bool|null $update
     * @param object $item
     * @return bool
     */
    function wp_is_auto_update_forced_for_item($type, $update, $item)
    {
    }
    /**
     * @return string
     */
    function wp_get_auto_update_message()
    {
    }
    /**
     * @param string $blog_title
     * @param string $user_name
     * @param string $user_email
     * @param bool $is_public
     * @param string $deprecated
     * @param string $user_password
     * @param string $language
     * @phpstan-return array{
     *   url: string,
     *   user_id: int,
     *   password: string,
     *   password_message: string,
     * }
     */
    function wp_install($blog_title, $user_name, $user_email, $is_public, $deprecated = '', $user_password = '', $language = '')
    {
    }
    /**
     * @param int $user_id
     */
    function wp_install_defaults($user_id)
    {
    }
    /**
     * @return bool
     */
    function wp_install_maybe_enable_pretty_permalinks()
    {
    }
    /**
     * @param string $blog_title
     * @param string $blog_url
     * @param int $user_id
     * @param string $password
     */
    function wp_new_blog_notification($blog_title, $blog_url, $user_id, $password)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_upgrade()
    {
    }
    /**
     * @phpstan-return void
     */
    function upgrade_all()
    {
    }
    function upgrade_100()
    {
    }
    function upgrade_101()
    {
    }
    function upgrade_110()
    {
    }
    function upgrade_130()
    {
    }
    function upgrade_160()
    {
    }
    function upgrade_210()
    {
    }
    function upgrade_230()
    {
    }
    function upgrade_230_options_table()
    {
    }
    function upgrade_230_old_tables()
    {
    }
    function upgrade_old_slugs()
    {
    }
    function upgrade_250()
    {
    }
    function upgrade_252()
    {
    }
    function upgrade_260()
    {
    }
    function upgrade_270()
    {
    }
    function upgrade_280()
    {
    }
    function upgrade_290()
    {
    }
    function upgrade_300()
    {
    }
    /**
     * @phpstan-return void
     */
    function upgrade_330()
    {
    }
    function upgrade_340()
    {
    }
    function upgrade_350()
    {
    }
    function upgrade_370()
    {
    }
    function upgrade_372()
    {
    }
    function upgrade_380()
    {
    }
    function upgrade_400()
    {
    }
    function upgrade_420()
    {
    }
    function upgrade_430()
    {
    }
    /**
     * @phpstan-return void
     */
    function upgrade_430_fix_comments()
    {
    }
    function upgrade_431()
    {
    }
    function upgrade_440()
    {
    }
    function upgrade_450()
    {
    }
    function upgrade_460()
    {
    }
    function upgrade_500()
    {
    }
    function upgrade_510()
    {
    }
    function upgrade_530()
    {
    }
    function upgrade_550()
    {
    }
    function upgrade_560()
    {
    }
    function upgrade_590()
    {
    }
    function upgrade_600()
    {
    }
    function upgrade_630()
    {
    }
    function upgrade_640()
    {
    }
    function upgrade_650()
    {
    }
    function upgrade_network()
    {
    }
    //
    // General functions we use to actually do stuff.
    //
    /**
     * @param string $table_name
     * @param string $create_ddl
     * @return bool
     */
    function maybe_create_table($table_name, $create_ddl)
    {
    }
    /**
     * @param string $table
     * @param string $index
     * @return true
     */
    function drop_index($table, $index)
    {
    }
    /**
     * @param string $table
     * @param string $index
     * @return true
     */
    function add_clean_index($table, $index)
    {
    }
    /**
     * @param string $table_name
     * @param string $column_name
     * @param string $create_ddl
     * @return bool
     */
    function maybe_add_column($table_name, $column_name, $create_ddl)
    {
    }
    /**
     * @param string $table
     * @return bool
     */
    function maybe_convert_table_to_utf8mb4($table)
    {
    }
    /**
     * @return \stdClass
     */
    function get_alloptions_110()
    {
    }
    /**
     * @param string $setting
     * @return mixed
     */
    function __get_option($setting)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function deslash($content)
    {
    }
    /**
     * @param string[]|string $queries
     * @param bool $execute
     * @return array
     */
    function dbDelta($queries = '', $execute = \true)
    {
    }
    /**
     * @param string $tables
     */
    function make_db_current($tables = 'all')
    {
    }
    /**
     * @param string $tables
     */
    function make_db_current_silent($tables = 'all')
    {
    }
    /**
     * @param string $theme_name
     * @param string $template
     * @return bool
     */
    function make_site_theme_from_oldschool($theme_name, $template)
    {
    }
    /**
     * @param string $theme_name
     * @param string $template
     * @return void|false
     */
    function make_site_theme_from_default($theme_name, $template)
    {
    }
    /**
     * @return string|false
     */
    function make_site_theme()
    {
    }
    /**
     * @param int $level
     * @return string
     */
    function translate_level_to_role($level)
    {
    }
    function wp_check_mysql_version()
    {
    }
    function maybe_disable_automattic_widgets()
    {
    }
    function maybe_disable_link_manager()
    {
    }
    function pre_schema_upgrade()
    {
    }
    /**
     * @return bool
     */
    function wp_should_upgrade_global_tables()
    {
    }
    /**
     * WordPress user administration API.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * @return int|\WP_Error
     */
    function add_user()
    {
    }
    /**
     * @param int $user_id
     * @return int|\WP_Error
     */
    function edit_user($user_id = 0)
    {
    }
    /**
     * @return array[]
     */
    function get_editable_roles()
    {
    }
    /**
     * @param int $user_id
     * @return \WP_User|false
     */
    function get_user_to_edit($user_id)
    {
    }
    /**
     * @param int $user_id
     * @return array
     */
    function get_users_drafts($user_id)
    {
    }
    /**
     * @param int $id
     * @param int $reassign
     * @return bool
     */
    function wp_delete_user($id, $reassign = \null)
    {
    }
    /**
     * @param int $id
     */
    function wp_revoke_user($id)
    {
    }
    /**
     * @param false $errors
     * @phpstan-return void
     */
    function default_password_nag_handler($errors = \false)
    {
    }
    /**
     * @param int $user_ID
     * @param \WP_User $old_data
     * @phpstan-return void
     */
    function default_password_nag_edit_user($user_ID, $old_data)
    {
    }
    /**
     * @phpstan-return void
     */
    function default_password_nag()
    {
    }
    function delete_users_add_js()
    {
    }
    /**
     * @param \WP_User $user
     */
    function use_ssl_preference($user)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function admin_created_user_email($text)
    {
    }
    /**
     * @phpstan-param array{
     *   app_name?: string,
     *   app_id?: string,
     *   success_url?: string,
     *   reject_url?: string,
     * } $request
     * @param \WP_User $user
     * @return true|\WP_Error
     */
    function wp_is_authorize_application_password_request_valid($request, $user)
    {
    }
    /**
     * @param string $url
     * @return true|\WP_Error
     */
    function wp_is_authorize_application_redirect_url_valid($url)
    {
    }
    function wp_list_widgets()
    {
    }
    /**
     * @param array $a
     * @param array $b
     * @return int
     */
    function _sort_name_callback($a, $b)
    {
    }
    /**
     * @param string $sidebar
     * @param string $sidebar_name
     */
    function wp_list_widget_controls($sidebar, $sidebar_name = '')
    {
    }
    /**
     * @param array $params
     * @return array
     */
    function wp_list_widget_controls_dynamic_sidebar($params)
    {
    }
    /**
     * @param string $id_base
     * @return int
     */
    function next_widget_id_number($id_base)
    {
    }
    /**
     * @param array $sidebar_args
     * @return array
     */
    function wp_widget_control($sidebar_args)
    {
    }
    /**
     * @param string $classes
     * @return string
     */
    function wp_widgets_access_body_class($classes)
    {
    }
    /**
     * @param string $body_classes
     */
    function display_header($body_classes = '')
    {
    }
    // End display_header().
    /**
     * @param string|null $error
     */
    function display_setup_form($error = \null)
    {
    }
    /**
     * @param resource $parser
     * @param string $tag_name
     * @param array $attrs
     */
    function startElement($parser, $tag_name, $attrs)
    {
    }
    /**
     * @param resource $parser
     * @param string $tag_name
     */
    function endElement($parser, $tag_name)
    {
    }
    /**
     * @param array $menu
     * @param array $submenu
     * @param bool $submenu_as_parent
     */
    function _wp_menu_output($menu, $submenu, $submenu_as_parent = \true)
    {
    }
    function _add_themes_utility_last()
    {
    }
    /**
     * @phpstan-return void
     */
    function _add_plugin_file_editor_to_tools()
    {
    }
    /**
     * @param string $classes
     * @return string
     */
    function wp_nav_menu_max_depth($classes)
    {
    }
    function wp_load_press_this()
    {
    }
    /**
     * @param string|string[] $body_classes
     */
    function setup_config_display_header($body_classes = array())
    {
    }
    /**
     * @return string
     */
    function wp_theme_auto_update_setting_template()
    {
    }
    /**
     * @param object $update
     */
    function list_core_update($update)
    {
    }
    function dismissed_updates()
    {
    }
    function core_upgrade_preamble()
    {
    }
    function core_auto_updates_settings()
    {
    }
    /**
     * @phpstan-return void
     */
    function list_plugin_updates()
    {
    }
    /**
     * @phpstan-return void
     */
    function list_theme_updates()
    {
    }
    /**
     * @phpstan-return void
     */
    function list_translation_updates()
    {
    }
    /**
     * @param bool $reinstall
     * @phpstan-return void
     */
    function do_core_upgrade($reinstall = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function do_dismiss_core_update()
    {
    }
    /**
     * @phpstan-return void
     */
    function do_undismiss_core_update()
    {
    }
    /**
     * @return string|int|false
     */
    function _get_cron_lock()
    {
    }
    /**
     * Toolbar API: Top-level Toolbar functionality
     *
     * @package WordPress
     * @subpackage Toolbar
     * @since 3.1.0
     */
    /**
     * @return bool
     */
    function _wp_admin_bar_init()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_admin_bar_render()
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     */
    function wp_admin_bar_wp_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     */
    function wp_admin_bar_sidebar_toggle($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_my_account_item($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_my_account_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_site_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_edit_site_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_customize_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_my_sites_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_shortlink_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_edit_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_new_content_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_comments_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_appearance_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_updates_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_search_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     * @phpstan-return void
     */
    function wp_admin_bar_recovery_mode_menu($wp_admin_bar)
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     */
    function wp_admin_bar_add_secondary_groups($wp_admin_bar)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_admin_bar_header_styles()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_admin_bar_bump_styles()
    {
    }
    /**
     * @param bool $show
     */
    function show_admin_bar($show)
    {
    }
    /**
     * @return bool
     */
    function is_admin_bar_showing()
    {
    }
    /**
     * @param string $context
     * @param int $user
     * @return bool
     */
    function _get_admin_bar_pref($context = 'front', $user = 0)
    {
    }
    /**
     * Author Template functions for use in themes.
     *
     * These functions must be used within the WordPress Loop.
     *
     * @link https://codex.wordpress.org/Author_Templates
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param string $deprecated
     * @return string
     */
    function get_the_author($deprecated = '')
    {
    }
    /**
     * @param string $deprecated
     * @param bool $deprecated_echo
     * @return string
     */
    function the_author($deprecated = '', $deprecated_echo = \true)
    {
    }
    /**
     * @return string|void
     */
    function get_the_modified_author()
    {
    }
    function the_modified_author()
    {
    }
    /**
     * @param string $field
     * @param int|false $user_id
     * @return string
     */
    function get_the_author_meta($field = '', $user_id = \false)
    {
    }
    /**
     * @param string $field
     * @param int|false $user_id
     * @param string $field
     */
    function the_author_meta($field = '', $user_id = \false)
    {
    }
    /**
     * @return string
     */
    function get_the_author_link()
    {
    }
    function the_author_link()
    {
    }
    /**
     * @return int
     */
    function get_the_author_posts()
    {
    }
    function the_author_posts()
    {
    }
    /**
     * @return string
     */
    function get_the_author_posts_link()
    {
    }
    /**
     * @param string $deprecated
     */
    function the_author_posts_link($deprecated = '')
    {
    }
    /**
     * @param int $author_id
     * @param string $author_nicename
     * @return string
     */
    function get_author_posts_url($author_id, $author_nicename = '')
    {
    }
    /**
     * @phpstan-param array{
     *   orderby?: string,
     *   order?: string,
     *   number?: int,
     *   optioncount?: bool,
     *   exclude_admin?: bool,
     *   show_fullname?: bool,
     *   hide_empty?: bool,
     *   feed?: string,
     *   feed_image?: string,
     *   feed_type?: string,
     *   echo?: bool,
     *   style?: string,
     *   html?: bool,
     *   exclude?: int[]|string,
     *   include?: int[]|string,
     * } $args
     * @return void|string
     */
    function wp_list_authors($args = '')
    {
    }
    /**
     * @return bool
     */
    function is_multi_author()
    {
    }
    function __clear_multi_author_cache()
    {
    }
    /**
     * Block Bindings API
     *
     * Contains functions for managing block bindings in WordPress.
     *
     * @package WordPress
     * @subpackage Block Bindings
     * @since 6.5.0
     */
    /**
     * @param string $source_name
     * @phpstan-param array{
     *   label?: string,
     *   get_value_callback?: callable,
     *   uses_context?: string[],
     * } $source_properties
     * @return \WP_Block_Bindings_Source|false
     */
    function register_block_bindings_source(string $source_name, array $source_properties)
    {
    }
    /**
     * @param string $source_name
     * @return \WP_Block_Bindings_Source|false
     */
    function unregister_block_bindings_source(string $source_name)
    {
    }
    /**
     * @return \WP_Block_Bindings_Source[]
     */
    function get_all_registered_block_bindings_sources()
    {
    }
    /**
     * @param string $source_name
     * @return \WP_Block_Bindings_Source|null
     */
    function get_block_bindings_source(string $source_name)
    {
    }
    /**
     * Pattern Overrides source for the Block Bindings.
     *
     * @since 6.5.0
     * @package WordPress
     * @subpackage Block Bindings
     */
    /**
     * @param array $source_args
     * @param \WP_Block $block_instance
     * @param string $attribute_name
     * @return mixed
     */
    function _block_bindings_pattern_overrides_get_value(array $source_args, $block_instance, string $attribute_name)
    {
    }
    function _register_block_bindings_pattern_overrides_source()
    {
    }
    /**
     * Post Meta source for the block bindings.
     *
     * @since 6.5.0
     * @package WordPress
     * @subpackage Block Bindings
     */
    /**
     * @param array $source_args
     * @param \WP_Block $block_instance
     * @return mixed
     */
    function _block_bindings_post_meta_get_value(array $source_args, $block_instance)
    {
    }
    function _register_block_bindings_post_meta_source()
    {
    }
    /**
     * Block Editor API.
     *
     * @package WordPress
     * @subpackage Editor
     * @since 5.8.0
     */
    /**
     * @return array[]
     */
    function get_default_block_categories()
    {
    }
    /**
     * @param \WP_Post|\WP_Block_Editor_Context $post_or_block_editor_context
     * @return array[]
     */
    function get_block_categories($post_or_block_editor_context)
    {
    }
    /**
     * @param \WP_Block_Editor_Context $block_editor_context
     * @return bool|string[]
     */
    function get_allowed_block_types($block_editor_context)
    {
    }
    /**
     * @return array
     */
    function get_default_block_editor_settings()
    {
    }
    /**
     * @return array
     */
    function get_legacy_widget_block_editor_settings()
    {
    }
    /**
     * @phpstan-return array{
     *   styles: string|false,
     *   scripts: string|false,
     * }
     */
    function _wp_get_iframed_editor_assets()
    {
    }
    /**
     * @param array $blocks
     * @param string $block_name
     * @return array
     */
    function wp_get_first_block($blocks, $block_name)
    {
    }
    /**
     * @return array|null
     */
    function wp_get_post_content_block_attributes()
    {
    }
    /**
     * @param array $custom_settings
     * @param \WP_Block_Editor_Context $block_editor_context
     * @return array
     */
    function get_block_editor_settings(array $custom_settings, $block_editor_context)
    {
    }
    /**
     * @param (string|string[])[] $preload_paths
     * @param \WP_Block_Editor_Context $block_editor_context
     * @phpstan-return void
     */
    function block_editor_rest_api_preload(array $preload_paths, $block_editor_context)
    {
    }
    /**
     * @return array
     */
    function get_block_editor_theme_styles()
    {
    }
    /**
     * @return array
     */
    function get_classic_theme_supports_block_editor_settings()
    {
    }
    function _register_core_block_patterns_and_categories()
    {
    }
    /**
     * @param array $pattern
     * @return array
     */
    function wp_normalize_remote_block_pattern($pattern)
    {
    }
    /**
     * @param \WP_Screen $deprecated
     * @phpstan-return void
     */
    function _load_remote_block_patterns($deprecated = \null)
    {
    }
    /**
     * @phpstan-return void
     */
    function _load_remote_featured_patterns()
    {
    }
    /**
     * @phpstan-return void
     */
    function _register_remote_theme_patterns()
    {
    }
    /**
     * @phpstan-return void
     */
    function _register_theme_block_patterns()
    {
    }
    /**
     * Align block support flag.
     *
     * @package WordPress
     * @since 5.6.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_alignment_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_alignment_support($block_type, $block_attributes)
    {
    }
    /**
     * Background block support flag.
     *
     * @package WordPress
     * @since 6.4.0
     */
    /**
     * @param \WP_Block_Type $block_type
     * @phpstan-return void
     */
    function wp_register_background_support($block_type)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_background_support($block_content, $block)
    {
    }
    /**
     * Block support to enable per-section styling of block types via
     * block style variations.
     *
     * @package WordPress
     * @since 6.6.0
     */
    /**
     * @param array $block
     * @param string $variation
     * @return string
     */
    function wp_create_block_style_variation_instance_name($block, $variation)
    {
    }
    /**
     * @param string $class_string
     * @return array|null
     */
    function wp_get_block_style_variation_name_from_class($class_string)
    {
    }
    /**
     * @param array $variation_data
     * @param array $theme_json
     */
    function wp_resolve_block_style_variation_ref_values(&$variation_data, $theme_json)
    {
    }
    /**
     * @param array $parsed_block
     * @return array
     */
    function wp_render_block_style_variation_support_styles($parsed_block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_block_style_variation_class_name($block_content, $block)
    {
    }
    function wp_enqueue_block_style_variation_styles()
    {
    }
    /**
     * @param array $variations
     * @phpstan-return void
     */
    function wp_register_block_style_variations_from_theme_json_partials($variations)
    {
    }
    /**
     * Border block support flag.
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_border_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_border_support($block_type, $block_attributes)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param string $feature
     * @param mixed $default_value
     * @return bool
     */
    function wp_has_border_feature_support($block_type, $feature, $default_value = \false)
    {
    }
    /**
     * Colors block support flag.
     *
     * @package WordPress
     * @since 5.6.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_colors_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_colors_support($block_type, $block_attributes)
    {
    }
    /**
     * Custom classname block support flag.
     *
     * @package WordPress
     * @since 5.6.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_custom_classname_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_custom_classname_support($block_type, $block_attributes)
    {
    }
    /**
     * Dimensions block support flag.
     *
     * This does not include the `spacing` block support even though that visually
     * appears under the "Dimensions" panel in the editor. It remains in its
     * original `spacing.php` file for compatibility with core.
     *
     * @package WordPress
     * @since 5.9.0
     */
    /**
     * @param \WP_Block_Type $block_type
     * @phpstan-return void
     */
    function wp_register_dimensions_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_dimensions_support($block_type, $block_attributes)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_dimensions_support($block_content, $block)
    {
    }
    /**
     * Elements styles block support.
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * @param array $block
     * @return string
     */
    function wp_get_elements_class_name($block)
    {
    }
    /**
     * @param array $block
     * @param array $options
     * @return bool
     */
    function wp_should_add_elements_class_name($block, $options)
    {
    }
    /**
     * @param array $parsed_block
     * @return array
     */
    function wp_render_elements_support_styles($parsed_block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_elements_class_name($block_content, $block)
    {
    }
    /**
     * Generated classname block support flag.
     *
     * @package WordPress
     * @since 5.6.0
     */
    /**
     * @param string $block_name
     * @return string
     */
    function wp_get_block_default_classname($block_name)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @return array
     */
    function wp_apply_generated_classname_support($block_type)
    {
    }
    /**
     * Layout block support flag.
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * @return array[]
     */
    function wp_get_layout_definitions()
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_layout_support($block_type)
    {
    }
    /**
     * @param string $selector
     * @param array $layout
     * @param bool $has_block_gap_support
     * @param string|string[]|null $gap_value
     * @param bool $should_skip_gap_serialization
     * @param string $fallback_gap_value
     * @param array|null $block_spacing
     * @return string
     */
    function wp_get_layout_style($selector, $layout, $has_block_gap_support = \false, $gap_value = \null, $should_skip_gap_serialization = \false, $fallback_gap_value = '0.5em', $block_spacing = \null)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_layout_support_flag($block_content, $block)
    {
    }
    /**
     * @param array $parsed_block
     * @param array $source_block
     * @param \WP_Block $parent_block
     * @return array
     */
    function wp_add_parent_layout_to_parsed_block($parsed_block, $source_block, $parent_block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_restore_group_inner_container($block_content, $block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_restore_image_outer_container($block_content, $block)
    {
    }
    /**
     * Position block support flag.
     *
     * @package WordPress
     * @since 6.2.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_position_support($block_type)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_position_support($block_content, $block)
    {
    }
    /**
     * Block level presets support.
     *
     * @package WordPress
     * @since 6.2.0
     */
    /**
     * @param array $block
     * @return string
     */
    function _wp_get_presets_class_name($block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function _wp_add_block_level_presets_class($block_content, $block)
    {
    }
    /**
     * @param string|null $pre_render
     * @param array $block
     * @return null
     */
    function _wp_add_block_level_preset_styles($pre_render, $block)
    {
    }
    /**
     * Shadow block support flag.
     *
     * @package WordPress
     * @since 6.3.0
     */
    /**
     * @param \WP_Block_Type $block_type
     * @phpstan-return void
     */
    function wp_register_shadow_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_shadow_support($block_type, $block_attributes)
    {
    }
    /**
     * Spacing block support flag.
     *
     * For backwards compatibility, this remains separate to the dimensions.php
     * block support despite both belonging under a single panel in the editor.
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_spacing_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_spacing_support($block_type, $block_attributes)
    {
    }
    /**
     * Typography block support flag.
     *
     * @package WordPress
     * @since 5.6.0
     */
    /**
     * @param \WP_Block_Type $block_type
     * @phpstan-return void
     */
    function wp_register_typography_support($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param array $block_attributes
     * @return array
     */
    function wp_apply_typography_support($block_type, $block_attributes)
    {
    }
    /**
     * @param string $style_value
     * @param string $css_property
     * @return string
     */
    function wp_typography_get_preset_inline_style_value($style_value, $css_property)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_typography_support($block_content, $block)
    {
    }
    /**
     * @param string|int|float $raw_value
     * @phpstan-param array{
     *   coerce_to?: string,
     *   root_size_value?: int,
     *   acceptable_units?: string[],
     * } $options
     * @return array|null
     */
    function wp_get_typography_value_and_unit($raw_value, $options = array())
    {
    }
    /**
     * @phpstan-param array{
     *   maximum_viewport_width?: string,
     *   minimum_viewport_width?: string,
     *   maximum_font_size?: string,
     *   minimum_font_size?: string,
     *   scale_factor?: int,
     * } $args
     * @return string|null
     */
    function wp_get_computed_fluid_typography_value($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   name?: string,
     *   slug?: string,
     *   size?: string|int|float,
     * } $preset
     * @param bool|array $settings
     * @return string|null
     */
    function wp_get_typography_font_size_value($preset, $settings = array())
    {
    }
    /**
     * Block support utility functions.
     *
     * @package WordPress
     * @subpackage Block Supports
     * @since 6.0.0
     */
    /**
     * @param \WP_Block_Type $block_type
     * @param string $feature_set
     * @param string $feature
     * @return bool
     */
    function wp_should_skip_block_supports_serialization($block_type, $feature_set, $feature = \null)
    {
    }
    /**
     * @param string $theme_stylesheet
     * @phpstan-return array{
     *   wp_template: string,
     *   wp_template_part: string,
     * }
     */
    function get_block_theme_folders($theme_stylesheet = \null)
    {
    }
    /**
     * @phpstan-return array<int|string, array{
     *   area: string,
     *   label: string,
     *   description: string,
     *   icon: string,
     *   area_tag: string,
     * }>
     */
    function get_allowed_block_template_part_areas()
    {
    }
    /**
     * @phpstan-return array<int|string, array{
     *   title: string,
     *   description: string,
     * }>
     */
    function get_default_block_template_types()
    {
    }
    /**
     * @param string $type
     * @return string
     */
    function _filter_block_template_part_area($type)
    {
    }
    /**
     * @param string $base_directory
     * @return string[]
     */
    function _get_block_templates_paths($base_directory)
    {
    }
    /**
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @param string $slug
     * @phpstan-return null|array{
     *   slug: string,
     *   path: string,
     *   theme: string,
     *   type: string,
     *   area: string,
     *   title: string,
     *   postTypes: string[],
     * }
     */
    function _get_block_template_file($template_type, $slug)
    {
    }
    /**
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @phpstan-param array{
     *   slug__in?: string[],
     *   slug__not_in?: string[],
     *   area?: string,
     *   post_type?: string,
     * } $query
     * @return array
     */
    function _get_block_templates_files($template_type, $query = array())
    {
    }
    /**
     * @param array $template_item
     * @return array
     */
    function _add_block_template_info($template_item)
    {
    }
    /**
     * @param array $template_info
     * @return array
     */
    function _add_block_template_part_area_info($template_info)
    {
    }
    /**
     * @param array $blocks
     * @return array
     */
    function _flatten_blocks(&$blocks)
    {
    }
    /**
     * @param array $block
     */
    function _inject_theme_attribute_in_template_part_block(&$block)
    {
    }
    /**
     * @param array $block
     */
    function _remove_theme_attribute_from_template_part_block(&$block)
    {
    }
    /**
     * @param array $template_file
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @return \WP_Block_Template
     */
    function _build_block_template_result_from_file($template_file, $template_type)
    {
    }
    /**
     * @param string $post_type
     * @param string $slug
     * @param \WP_Block_Template $template
     * @return bool
     */
    function _wp_build_title_and_description_for_single_post_type_block_template($post_type, $slug, \WP_Block_Template $template)
    {
    }
    /**
     * @param string $taxonomy
     * @param string $slug
     * @param \WP_Block_Template $template
     * @return bool
     */
    function _wp_build_title_and_description_for_taxonomy_block_template($taxonomy, $slug, \WP_Block_Template $template)
    {
    }
    /**
     * @param \WP_Post $post
     * @param array $terms
     * @param array $meta
     * @return \WP_Block_Template|\WP_Error
     */
    function _build_block_template_object_from_post_object($post, $terms = array(), $meta = array())
    {
    }
    /**
     * @param \WP_Post $post
     * @return \WP_Block_Template|\WP_Error
     */
    function _build_block_template_result_from_post($post)
    {
    }
    /**
     * @phpstan-param array{
     *   slug__in?: string[],
     *   wp_id?: int,
     *   area?: string,
     *   post_type?: string,
     * } $query
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @return \WP_Block_Template[]
     */
    function get_block_templates($query = array(), $template_type = 'wp_template')
    {
    }
    /**
     * @param string $id
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @return \WP_Block_Template|null
     */
    function get_block_template($id, $template_type = 'wp_template')
    {
    }
    /**
     * @param string $id
     * @phpstan-param 'wp_template'|'wp_template_part' $template_type
     * @return \WP_Block_Template|null
     */
    function get_block_file_template($id, $template_type = 'wp_template')
    {
    }
    /**
     * @param string $part
     * @phpstan-return void
     */
    function block_template_part($part)
    {
    }
    function block_header_area()
    {
    }
    function block_footer_area()
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function wp_is_theme_directory_ignored($path)
    {
    }
    /**
     * @return \WP_Error|string
     */
    function wp_generate_block_templates_export_file()
    {
    }
    /**
     * @param string $slug
     * @param bool $is_custom
     * @param string $template_prefix
     * @return string[]
     */
    function get_template_hierarchy($slug, $is_custom = \false, $template_prefix = '')
    {
    }
    /**
     * @param \stdClass $changes
     * @param \WP_REST_Request $deprecated
     * @return \stdClass|\WP_Error
     */
    function inject_ignored_hooked_blocks_metadata_attributes($changes, $deprecated = \null)
    {
    }
    function _add_template_loader_filters()
    {
    }
    /**
     * @param string $template
     * @param string $type
     * @param string[] $templates
     * @return string
     * @param array $template
     */
    function locate_block_template($template, $type, array $templates)
    {
    }
    /**
     * @param string $template_type
     * @param string[] $template_hierarchy
     * @param string $fallback_template
     * @return \WP_Block_Template|null
     */
    function resolve_block_template($template_type, $template_hierarchy, $fallback_template)
    {
    }
    function _block_template_render_title_tag()
    {
    }
    /**
     * @return string
     */
    function get_the_block_template_html()
    {
    }
    function _block_template_viewport_meta_tag()
    {
    }
    /**
     * @param string $template_file
     * @return string
     */
    function _strip_template_file_suffix($template_file)
    {
    }
    /**
     * @param array $context
     * @return array
     */
    function _block_template_render_without_post_block_context($context)
    {
    }
    /**
     * @param \WP_Query $wp_query
     * @phpstan-return void
     */
    function _resolve_template_for_new_post($wp_query)
    {
    }
    /**
     * Functions related to registering and parsing blocks.
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.0.0
     */
    /**
     * @param string $asset_handle_or_path
     * @return string
     */
    function remove_block_asset_path_prefix($asset_handle_or_path)
    {
    }
    /**
     * @param string $block_name
     * @param string $field_name
     * @param int $index
     * @return string
     */
    function generate_block_asset_handle($block_name, $field_name, $index = 0)
    {
    }
    /**
     * @param string $path
     * @return string|false
     */
    function get_block_asset_url($path)
    {
    }
    /**
     * @param array $metadata
     * @param string $field_name
     * @param int $index
     * @return string|false
     */
    function register_block_script_module_id($metadata, $field_name, $index = 0)
    {
    }
    /**
     * @param array $metadata
     * @param string $field_name
     * @param int $index
     * @return string|false
     */
    function register_block_script_handle($metadata, $field_name, $index = 0)
    {
    }
    /**
     * @param array $metadata
     * @param string $field_name
     * @param int $index
     * @return string|false
     */
    function register_block_style_handle($metadata, $field_name, $index = 0)
    {
    }
    /**
     * @return object
     */
    function get_block_metadata_i18n_schema()
    {
    }
    /**
     * @param string $file_or_folder
     * @param array $args
     * @return \WP_Block_Type|false
     * @phpstan-param array{
     *   api_version?: string,
     *   title?: string,
     *   category?: string|null,
     *   parent?: string[]|null,
     *   ancestor?: string[]|null,
     *   allowed_blocks?: string[]|null,
     *   icon?: string|null,
     *   description?: string,
     *   keywords?: string[],
     *   textdomain?: string|null,
     *   styles?: array[],
     *   variations?: array[],
     *   selectors?: array,
     *   supports?: array|null,
     *   example?: array|null,
     *   render_callback?: callable|null,
     *   variation_callback?: callable|null,
     *   attributes?: array|null,
     *   uses_context?: string[],
     *   provides_context?: string[]|null,
     *   block_hooks?: string[],
     *   editor_script_handles?: string[],
     *   script_handles?: string[],
     *   view_script_handles?: string[],
     *   editor_style_handles?: string[],
     *   style_handles?: string[],
     *   view_style_handles?: string[],
     * } $args See WP_Block_Type::__construct()
     */
    function register_block_type_from_metadata($file_or_folder, $args = array())
    {
    }
    /**
     * @param string|\WP_Block_Type $block_type
     * @param array $args
     * @return \WP_Block_Type|false
     * @phpstan-param array{
     *   api_version?: string,
     *   title?: string,
     *   category?: string|null,
     *   parent?: string[]|null,
     *   ancestor?: string[]|null,
     *   allowed_blocks?: string[]|null,
     *   icon?: string|null,
     *   description?: string,
     *   keywords?: string[],
     *   textdomain?: string|null,
     *   styles?: array[],
     *   variations?: array[],
     *   selectors?: array,
     *   supports?: array|null,
     *   example?: array|null,
     *   render_callback?: callable|null,
     *   variation_callback?: callable|null,
     *   attributes?: array|null,
     *   uses_context?: string[],
     *   provides_context?: string[]|null,
     *   block_hooks?: string[],
     *   editor_script_handles?: string[],
     *   script_handles?: string[],
     *   view_script_handles?: string[],
     *   editor_style_handles?: string[],
     *   style_handles?: string[],
     *   view_style_handles?: string[],
     * } $args See WP_Block_Type::__construct()
     */
    function register_block_type($block_type, $args = array())
    {
    }
    /**
     * @param string|\WP_Block_Type $name
     * @return \WP_Block_Type|false
     */
    function unregister_block_type($name)
    {
    }
    /**
     * @param int|string|\WP_Post|null $post
     * @return bool
     */
    function has_blocks($post = \null)
    {
    }
    /**
     * @param string $block_name
     * @param int|string|\WP_Post|null $post
     * @return bool
     */
    function has_block($block_name, $post = \null)
    {
    }
    /**
     * @return string[]
     */
    function get_dynamic_block_names()
    {
    }
    /**
     * @return array[]
     */
    function get_hooked_blocks()
    {
    }
    /**
     * @param array $parsed_anchor_block
     * @phpstan-param 'before'|'after'|'first_child'|'last_child' $relative_position
     * @param array $hooked_blocks
     * @param \WP_Block_Template|\WP_Post|array $context
     * @return string
     */
    function insert_hooked_blocks(&$parsed_anchor_block, $relative_position, $hooked_blocks, $context)
    {
    }
    /**
     * @param array $parsed_anchor_block
     * @phpstan-param 'before'|'after'|'first_child'|'last_child' $relative_position
     * @param array $hooked_blocks
     * @param \WP_Block_Template|\WP_Post|array $context
     * @return string
     */
    function set_ignored_hooked_blocks_metadata(&$parsed_anchor_block, $relative_position, $hooked_blocks, $context)
    {
    }
    /**
     * @param string $content
     * @param \WP_Block_Template|\WP_Post|array $context
     * @param callable $callback
     * @return string
     */
    function apply_block_hooks_to_content($content, $context, $callback = 'insert_hooked_blocks')
    {
    }
    /**
     * @param string $serialized_block
     * @return string
     */
    function remove_serialized_parent_block($serialized_block)
    {
    }
    /**
     * @param \stdClass $post
     * @return \stdClass
     */
    function update_ignored_hooked_blocks_postmeta($post)
    {
    }
    /**
     * @param array $parsed_anchor_block
     * @phpstan-param 'before'|'after'|'first_child'|'last_child' $relative_position
     * @param array $hooked_blocks
     * @param \WP_Block_Template|\WP_Post|array $context
     * @return string
     */
    function insert_hooked_blocks_and_set_ignored_hooked_blocks_metadata(&$parsed_anchor_block, $relative_position, $hooked_blocks, $context)
    {
    }
    /**
     * @param \WP_REST_Response $response
     * @param \WP_Post $post
     * @return \WP_REST_Response
     */
    function insert_hooked_blocks_into_rest_response($response, $post)
    {
    }
    /**
     * @param array $hooked_blocks
     * @param \WP_Block_Template|\WP_Post|array $context
     * @param callable $callback
     * @return callable
     */
    function make_before_block_visitor($hooked_blocks, $context, $callback = 'insert_hooked_blocks')
    {
    }
    /**
     * @param array $hooked_blocks
     * @param \WP_Block_Template|\WP_Post|array $context
     * @param callable $callback
     * @return callable
     */
    function make_after_block_visitor($hooked_blocks, $context, $callback = 'insert_hooked_blocks')
    {
    }
    /**
     * @param array $block_attributes
     * @return string
     */
    function serialize_block_attributes($block_attributes)
    {
    }
    /**
     * @param string|null $block_name
     * @return string
     */
    function strip_core_block_namespace($block_name = \null)
    {
    }
    /**
     * @param string|null $block_name
     * @param array $block_attributes
     * @param string $block_content
     * @return string
     */
    function get_comment_delimited_block_content($block_name, $block_attributes, $block_content)
    {
    }
    /**
     * @phpstan-param array{
     *   blockName?: string,
     *   attrs?: array,
     *   innerBlocks?: array[],
     *   innerHTML?: string,
     *   innerContent?: array,
     * } $block
     * @return string
     */
    function serialize_block($block)
    {
    }
    /**
     * @phpstan-param array<int|string, array{
     *   blockName: string,
     *   attrs: array,
     *   innerBlocks: array[],
     *   innerHTML: string,
     *   innerContent: array,
     * }> $blocks
     * @return string
     */
    function serialize_blocks($blocks)
    {
    }
    /**
     * @param array $block
     * @param callable $pre_callback
     * @param callable $post_callback
     * @return string
     */
    function traverse_and_serialize_block($block, $pre_callback = \null, $post_callback = \null)
    {
    }
    /**
     * @param array $blocks
     * @return array
     */
    function resolve_pattern_blocks($blocks)
    {
    }
    /**
     * @param array[] $blocks
     * @param callable $pre_callback
     * @param callable $post_callback
     * @return string
     */
    function traverse_and_serialize_blocks($blocks, $pre_callback = \null, $post_callback = \null)
    {
    }
    /**
     * @param string $text
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function filter_block_content($text, $allowed_html = 'post', $allowed_protocols = array())
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _filter_block_content_callback($matches)
    {
    }
    /**
     * @param \WP_Block_Parser_Block $block
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return array
     */
    function filter_block_kses($block, $allowed_html, $allowed_protocols = array())
    {
    }
    /**
     * @param string[]|string $value
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @param array $block_context
     * @return string[]|string
     */
    function filter_block_kses_value($value, $allowed_html, $allowed_protocols = array(), $block_context = \null)
    {
    }
    /**
     * @param string $attribute_value
     * @param string $attribute_name
     * @param array[]|string $allowed_html
     * @return string
     */
    function filter_block_core_template_part_attributes($attribute_value, $attribute_name, $allowed_html)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function excerpt_remove_blocks($content)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function excerpt_remove_footnotes($content)
    {
    }
    /**
     * @param array $parsed_block
     * @param array $allowed_blocks
     * @return string
     */
    function _excerpt_render_inner_blocks($parsed_block, $allowed_blocks)
    {
    }
    /**
     * @phpstan-param array{
     *   blockName?: string,
     *   attrs?: array,
     *   innerBlocks?: array[],
     *   innerHTML?: string,
     *   innerContent?: array,
     * } $parsed_block
     * @return string
     */
    function render_block($parsed_block)
    {
    }
    /**
     * @param string $content
     * @phpstan-return array<int|string, array{
     *   blockName: string,
     *   attrs: array,
     *   innerBlocks: array[],
     *   innerHTML: string,
     *   innerContent: array,
     * }>
     */
    function parse_blocks($content)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function do_blocks($content)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function _restore_wpautop_hook($content)
    {
    }
    /**
     * @param string $content
     * @return int
     */
    function block_version($content)
    {
    }
    /**
     * @param string|string[] $block_name
     * @param array $style_properties
     * @return bool
     * @phpstan-param array{
     *   name?: string,
     *   label?: string,
     *   inline_style?: string,
     *   style_handle?: string,
     *   is_default?: bool,
     *   style_data?: array,
     * } $style_properties See WP_Block_Styles_Registry::register()
     */
    function register_block_style($block_name, $style_properties)
    {
    }
    /**
     * @param string $block_name
     * @param string $block_style_name
     * @return bool
     */
    function unregister_block_style($block_name, $block_style_name)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param string|array $feature
     * @param mixed $default_value
     * @return bool
     */
    function block_has_support($block_type, $feature, $default_value = \false)
    {
    }
    /**
     * @param array $metadata
     * @return array
     */
    function wp_migrate_old_typography_shape($metadata)
    {
    }
    /**
     * @param \WP_Block $block
     * @param int $page
     * @return array
     */
    function build_query_vars_from_query_block($block, $page)
    {
    }
    /**
     * @param \WP_Block $block
     * @param bool $is_next
     * @return string|null
     */
    function get_query_pagination_arrow($block, $is_next)
    {
    }
    /**
     * @param \WP_Block $block
     * @return array
     */
    function build_comment_query_vars_from_block($block)
    {
    }
    /**
     * @param \WP_Block $block
     * @phpstan-param 'next'|'previous' $pagination_type
     * @return string|null
     */
    function get_comments_pagination_arrow($block, $pagination_type = 'next')
    {
    }
    /**
     * @param string $footnotes
     * @return string
     */
    function _wp_filter_post_meta_footnotes($footnotes)
    {
    }
    function _wp_footnotes_kses_init_filters()
    {
    }
    function _wp_footnotes_remove_filters()
    {
    }
    function _wp_footnotes_kses_init()
    {
    }
    /**
     * @param string $arg
     * @return string
     */
    function _wp_footnotes_force_filtered_html_on_import_filter($arg)
    {
    }
    /**
     * Server-side rendering of the `core/archives` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_archives($attributes)
    {
    }
    function register_block_core_archives()
    {
    }
    /**
     * Server-side rendering of the `core/avatar` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_avatar($attributes, $content, $block)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    function get_block_core_avatar_border_attributes($attributes)
    {
    }
    function register_block_core_avatar()
    {
    }
    /**
     * Server-side rendering of the `core/block` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_block($attributes)
    {
    }
    function register_block_core_block()
    {
    }
    /**
     * Server-side rendering of the `core/button` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_button($attributes, $content)
    {
    }
    function register_block_core_button()
    {
    }
    /**
     * Server-side rendering of the `core/calendar` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_calendar($attributes)
    {
    }
    function register_block_core_calendar()
    {
    }
    /**
     * @return bool
     */
    function block_core_calendar_has_published_posts()
    {
    }
    /**
     * @return bool
     */
    function block_core_calendar_update_has_published_posts()
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function block_core_calendar_update_has_published_post_on_delete($post_id)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function block_core_calendar_update_has_published_post_on_transition_post_status($new_status, $old_status, $post)
    {
    }
    /**
     * Server-side rendering of the `core/categories` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_categories($attributes)
    {
    }
    /**
     * @param string $dropdown_id
     * @return string
     */
    function build_dropdown_script_block_core_categories($dropdown_id)
    {
    }
    function register_block_core_categories()
    {
    }
    /**
     * Server-side rendering of the `core/comment-author-name` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_author_name($attributes, $content, $block)
    {
    }
    function register_block_core_comment_author_name()
    {
    }
    /**
     * Server-side rendering of the `core/comment-content` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_content($attributes, $content, $block)
    {
    }
    function register_block_core_comment_content()
    {
    }
    /**
     * Server-side rendering of the `core/comment-date` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_date($attributes, $content, $block)
    {
    }
    function register_block_core_comment_date()
    {
    }
    /**
     * Server-side rendering of the `core/comment-edit-link` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_edit_link($attributes, $content, $block)
    {
    }
    function register_block_core_comment_edit_link()
    {
    }
    /**
     * Server-side rendering of the `core/comment-reply-link` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_reply_link($attributes, $content, $block)
    {
    }
    function register_block_core_comment_reply_link()
    {
    }
    /**
     * Server-side rendering of the `core/comment-template` block.
     *
     * @package WordPress
     */
    /**
     * @param \WP_Comment[] $comments
     * @param \WP_Block $block
     * @return string
     */
    function block_core_comment_template_render_comments($comments, $block)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comment_template($attributes, $content, $block)
    {
    }
    function register_block_core_comment_template()
    {
    }
    /**
     * Server-side rendering of the `core/comments-pagination-next` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comments_pagination_next($attributes, $content, $block)
    {
    }
    function register_block_core_comments_pagination_next()
    {
    }
    /**
     * Server-side rendering of the `core/comments-pagination-numbers` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comments_pagination_numbers($attributes, $content, $block)
    {
    }
    function register_block_core_comments_pagination_numbers()
    {
    }
    /**
     * Server-side rendering of the `core/comments-pagination-previous` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comments_pagination_previous($attributes, $content, $block)
    {
    }
    function register_block_core_comments_pagination_previous()
    {
    }
    /**
     * Server-side rendering of the `core/comments-pagination` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_comments_pagination($attributes, $content)
    {
    }
    function register_block_core_comments_pagination()
    {
    }
    /**
     * Server-side rendering of the `core/comments-title` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_comments_title($attributes)
    {
    }
    function register_block_core_comments_title()
    {
    }
    /**
     * Server-side rendering of the `core/comments` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_comments($attributes, $content, $block)
    {
    }
    function register_block_core_comments()
    {
    }
    /**
     * @param array $fields
     * @return array
     */
    function comments_block_form_defaults($fields)
    {
    }
    /**
     * @param string $block_name
     */
    function enqueue_legacy_post_comments_block_styles($block_name)
    {
    }
    function register_legacy_post_comments_block()
    {
    }
    /**
     * Server-side rendering of the `core/cover` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_cover($attributes, $content)
    {
    }
    function register_block_core_cover()
    {
    }
    /**
     * Server-side rendering of the `core/file` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_file($attributes, $content)
    {
    }
    function register_block_core_file()
    {
    }
    /**
     * Server-side rendering of the `core/footnotes` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_footnotes($attributes, $content, $block)
    {
    }
    function register_block_core_footnotes()
    {
    }
    function register_block_core_footnotes_post_meta()
    {
    }
    /**
     * @param array $fields
     * @return array
     */
    function wp_add_footnotes_to_revision($fields)
    {
    }
    /**
     * @param string $revision_field
     * @param string $field
     * @param object $revision
     * @return string
     */
    function wp_get_footnotes_from_revision($revision_field, $field, $revision)
    {
    }
    /**
     * Server-side rendering of the `core/gallery` block.
     *
     * @package WordPress
     */
    /**
     * @param array $parsed_block
     * @return array
     */
    function block_core_gallery_data_id_backcompatibility($parsed_block)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function block_core_gallery_render($attributes, $content)
    {
    }
    function register_block_core_gallery()
    {
    }
    /**
     * Appending the wp-block-heading to before rendering the stored `core/heading` block contents.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function block_core_heading_render($attributes, $content)
    {
    }
    function register_block_core_heading()
    {
    }
    /**
     * Server-side rendering of the `core/home-link` block.
     *
     * @package WordPress
     */
    /**
     * @param array $context
     * @return array
     */
    function block_core_home_link_build_css_colors($context)
    {
    }
    /**
     * @param array $context
     * @return array
     */
    function block_core_home_link_build_css_font_sizes($context)
    {
    }
    /**
     * @param array $context
     * @return string
     */
    function block_core_home_link_build_li_wrapper_attributes($context)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_home_link($attributes, $content, $block)
    {
    }
    function register_block_core_home_link()
    {
    }
    /**
     * Server-side rendering of the `core/image` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_image($attributes, $content, $block)
    {
    }
    /**
     * @param array $block
     * @return array
     */
    function block_core_image_get_lightbox_settings($block)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function block_core_image_render_lightbox($block_content, $block)
    {
    }
    function block_core_image_print_lightbox_overlay()
    {
    }
    function register_block_core_image()
    {
    }
    function register_core_block_style_handles()
    {
    }
    function register_core_block_types_from_metadata()
    {
    }
    /**
     * Server-side rendering of the `core/latest-comments` block.
     *
     * @package WordPress
     */
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function wp_latest_comments_draft_or_post_title($post = 0)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_latest_comments($attributes = array())
    {
    }
    function register_block_core_latest_comments()
    {
    }
    /**
     * @return int
     */
    function block_core_latest_posts_get_excerpt_length()
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_latest_posts($attributes)
    {
    }
    function register_block_core_latest_posts()
    {
    }
    /**
     * @param array $block
     * @return array
     */
    function block_core_latest_posts_migrate_categories($block)
    {
    }
    /**
     * Server-side rendering of the `core/legacy-widget` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_legacy_widget($attributes)
    {
    }
    function register_block_core_legacy_widget()
    {
    }
    /**
     * @phpstan-return void
     */
    function handle_legacy_widget_preview_iframe()
    {
    }
    /**
     * Adds the wp-block-list class to the rendered list block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function block_core_list_render($attributes, $content)
    {
    }
    function register_block_core_list()
    {
    }
    /**
     * Server-side rendering of the `core/loginout` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_loginout($attributes)
    {
    }
    function register_block_core_loginout()
    {
    }
    /**
     * Server-side rendering of the `core/media-text` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_media_text($attributes, $content)
    {
    }
    function register_block_core_media_text()
    {
    }
    /**
     * Server-side registering and rendering of the `core/navigation-link` block.
     *
     * @package WordPress
     */
    /**
     * @param array $context
     * @param array $attributes
     * @param bool $is_sub_menu
     * @return array
     */
    function block_core_navigation_link_build_css_colors($context, $attributes, $is_sub_menu = \false)
    {
    }
    /**
     * @param array $context
     * @return array
     */
    function block_core_navigation_link_build_css_font_sizes($context)
    {
    }
    /**
     * @return string
     */
    function block_core_navigation_link_render_submenu_icon()
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function block_core_navigation_link_maybe_urldecode($url)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_navigation_link($attributes, $content, $block)
    {
    }
    /**
     * @param \WP_Taxonomy|\WP_Post_Type $entity
     * @param string $kind
     * @return array
     */
    function build_variation_for_navigation_link($entity, $kind)
    {
    }
    /**
     * @param array $variations
     * @param \WP_Block_Type $block_type
     */
    function block_core_navigation_link_filter_variations($variations, $block_type)
    {
    }
    /**
     * @return array
     */
    function block_core_navigation_link_build_variations()
    {
    }
    function register_block_core_navigation_link()
    {
    }
    /**
     * Server-side rendering of the `core/navigation-submenu` block.
     *
     * @package WordPress
     */
    /**
     * @param array $context
     * @return array
     */
    function block_core_navigation_submenu_build_css_font_sizes($context)
    {
    }
    /**
     * @return string
     */
    function block_core_navigation_submenu_render_submenu_icon()
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_navigation_submenu($attributes, $content, $block)
    {
    }
    function register_block_core_navigation_submenu()
    {
    }
    /**
     * @param string $location
     * @return array
     */
    function block_core_navigation_get_menu_items_at_location($location)
    {
    }
    /**
     * @param array $menu_items
     * @return array
     */
    function block_core_navigation_sort_menu_items_by_parent_id($menu_items)
    {
    }
    /**
     * @param array $attributes
     * @return \WP_Block_List
     */
    function block_core_navigation_get_inner_blocks_from_unstable_location($attributes)
    {
    }
    /**
     * @param \WP_HTML_Tag_Processor $tags
     * @param array $block_attributes
     * @return string
     */
    function block_core_navigation_add_directives_to_submenu($tags, $block_attributes)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    function block_core_navigation_build_css_colors($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    function block_core_navigation_build_css_font_sizes($attributes)
    {
    }
    /**
     * @return string
     */
    function block_core_navigation_render_submenu_icon()
    {
    }
    /**
     * @param array $parsed_blocks
     * @return array
     */
    function block_core_navigation_filter_out_empty_blocks($parsed_blocks)
    {
    }
    /**
     * @param \WP_Block_List $inner_blocks
     * @return bool
     */
    function block_core_navigation_block_contains_core_navigation($inner_blocks)
    {
    }
    /**
     * @return array
     */
    function block_core_navigation_get_fallback_blocks()
    {
    }
    /**
     * @param \WP_Block_List $inner_blocks
     * @return array
     */
    function block_core_navigation_get_post_ids($inner_blocks)
    {
    }
    /**
     * @param \WP_Block $block
     * @return array
     */
    function block_core_navigation_from_block_get_post_ids($block)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_navigation($attributes, $content, $block)
    {
    }
    function register_block_core_navigation()
    {
    }
    /**
     * @param array $parsed_block
     * @return array
     */
    function block_core_navigation_typographic_presets_backcompatibility($parsed_block)
    {
    }
    /**
     * @param array $menu_items
     * @param array $menu_items_by_parent_id
     * @return array
     */
    function block_core_navigation_parse_blocks_from_menu_items($menu_items, $menu_items_by_parent_id)
    {
    }
    /**
     * @return object
     */
    function block_core_navigation_get_classic_menu_fallback()
    {
    }
    /**
     * @param object $classic_nav_menu
     * @return array
     */
    function block_core_navigation_get_classic_menu_fallback_blocks($classic_nav_menu)
    {
    }
    /**
     * @return array
     */
    function block_core_navigation_maybe_use_classic_menu_fallback()
    {
    }
    /**
     * @return \WP_Post|null
     */
    function block_core_navigation_get_most_recently_published_navigation()
    {
    }
    /**
     * @param string $serialized_block
     * @return string
     */
    function block_core_navigation_remove_serialized_parent_block($serialized_block)
    {
    }
    /**
     * @param array $inner_blocks
     * @param \WP_Post $post
     * @return array
     */
    function block_core_navigation_mock_parsed_block($inner_blocks, $post)
    {
    }
    /**
     * @param array $inner_blocks
     * @param \WP_Post $post
     * @return string
     */
    function block_core_navigation_insert_hooked_blocks($inner_blocks, $post)
    {
    }
    /**
     * @param array $inner_blocks
     * @param \WP_Post $post
     * @return string
     */
    function block_core_navigation_set_ignored_hooked_blocks_metadata($inner_blocks, $post)
    {
    }
    /**
     * @param \stdClass $post
     * @return \stdClass
     */
    function block_core_navigation_update_ignore_hooked_blocks_meta($post)
    {
    }
    /**
     * @param \WP_REST_Response $response
     * @param \WP_Post $post
     * @return \WP_REST_Response
     */
    function block_core_navigation_insert_hooked_blocks_into_rest_response($response, $post)
    {
    }
    function register_block_core_page_list_item()
    {
    }
    /**
     * Server-side rendering of the `core/pages` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param array $context
     * @return array
     */
    function block_core_page_list_build_css_colors($attributes, $context)
    {
    }
    /**
     * @param array $context
     * @return array
     */
    function block_core_page_list_build_css_font_sizes($context)
    {
    }
    /**
     * @param bool $open_submenus_on_click
     * @param bool $show_submenu_icons
     * @param bool $is_navigation_child
     * @param array $nested_pages
     * @param bool $is_nested
     * @param array $active_page_ancestor_ids
     * @param array $colors
     * @param int $depth
     * @return string
     */
    function block_core_page_list_render_nested_page_list($open_submenus_on_click, $show_submenu_icons, $is_navigation_child, $nested_pages, $is_nested, $active_page_ancestor_ids = array(), $colors = array(), $depth = 0)
    {
    }
    /**
     * @param array $current_level
     * @param array $children
     * @return array
     */
    function block_core_page_list_nest_pages($current_level, $children)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_page_list($attributes, $content, $block)
    {
    }
    function register_block_core_page_list()
    {
    }
    function register_block_core_pattern()
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_pattern($attributes)
    {
    }
    /**
     * Server-side rendering of the `core/post-author-biography` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_author_biography($attributes, $content, $block)
    {
    }
    function register_block_core_post_author_biography()
    {
    }
    /**
     * Server-side rendering of the `core/post-author-name` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_author_name($attributes, $content, $block)
    {
    }
    function register_block_core_post_author_name()
    {
    }
    /**
     * Server-side rendering of the `core/post-author` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_author($attributes, $content, $block)
    {
    }
    function register_block_core_post_author()
    {
    }
    /**
     * Server-side rendering of the `core/post-comments-form` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_comments_form($attributes, $content, $block)
    {
    }
    function register_block_core_post_comments_form()
    {
    }
    /**
     * @param array $fields
     * @return array
     */
    function post_comments_form_block_form_defaults($fields)
    {
    }
    /**
     * Server-side rendering of the `core/post-content` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_content($attributes, $content, $block)
    {
    }
    function register_block_core_post_content()
    {
    }
    /**
     * Server-side rendering of the `core/post-date` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_date($attributes, $content, $block)
    {
    }
    function register_block_core_post_date()
    {
    }
    /**
     * Server-side rendering of the `core/post-excerpt` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_excerpt($attributes, $content, $block)
    {
    }
    function register_block_core_post_excerpt()
    {
    }
    /**
     * Server-side rendering of the `core/post-featured-image` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_featured_image($attributes, $content, $block)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function get_block_core_post_featured_image_overlay_element_markup($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    function get_block_core_post_featured_image_border_attributes($attributes)
    {
    }
    function register_block_core_post_featured_image()
    {
    }
    /**
     * Server-side rendering of the `core/post-navigation-link` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_post_navigation_link($attributes, $content)
    {
    }
    function register_block_core_post_navigation_link()
    {
    }
    /**
     * Server-side rendering of the `core/post-template` block.
     *
     * @package WordPress
     */
    /**
     * @param \WP_Block_List $inner_blocks
     * @return bool
     */
    function block_core_post_template_uses_featured_image($inner_blocks)
    {
    }
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_template($attributes, $content, $block)
    {
    }
    function register_block_core_post_template()
    {
    }
    /**
     * Server-side rendering of the `core/post-terms` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_terms($attributes, $content, $block)
    {
    }
    /**
     * @return array
     */
    function block_core_post_terms_build_variations()
    {
    }
    function register_block_core_post_terms()
    {
    }
    /**
     * Server-side rendering of the `core/post-title` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_post_title($attributes, $content, $block)
    {
    }
    function register_block_core_post_title()
    {
    }
    /**
     * Server-side rendering of the `core/query-no-results` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_query_no_results($attributes, $content, $block)
    {
    }
    function register_block_core_query_no_results()
    {
    }
    /**
     * Server-side rendering of the `core/query-pagination-next` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_query_pagination_next($attributes, $content, $block)
    {
    }
    function register_block_core_query_pagination_next()
    {
    }
    /**
     * Server-side rendering of the `core/query-pagination-numbers` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_query_pagination_numbers($attributes, $content, $block)
    {
    }
    function register_block_core_query_pagination_numbers()
    {
    }
    /**
     * Server-side rendering of the `core/query-pagination-previous` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_query_pagination_previous($attributes, $content, $block)
    {
    }
    function register_block_core_query_pagination_previous()
    {
    }
    /**
     * Server-side rendering of the `core/query-pagination` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_query_pagination($attributes, $content)
    {
    }
    function register_block_core_query_pagination()
    {
    }
    /**
     * Server-side rendering of the `core/query-title` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_query_title($attributes)
    {
    }
    function register_block_core_query_title()
    {
    }
    /**
     * Server-side rendering of the `core/query` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_query($attributes, $content, $block)
    {
    }
    function register_block_core_query()
    {
    }
    /**
     * @param array $parsed_block
     * @return string
     */
    function block_core_query_disable_enhanced_pagination($parsed_block)
    {
    }
    /**
     * Server-side rendering of the `core/read-more` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_read_more($attributes, $content, $block)
    {
    }
    function register_block_core_read_more()
    {
    }
    /**
     * Server-side rendering of the `core/rss` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_rss($attributes)
    {
    }
    function register_block_core_rss()
    {
    }
    /**
     * Server-side rendering of the `core/search` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_search($attributes)
    {
    }
    function register_block_core_search()
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function classnames_for_block_core_search($attributes)
    {
    }
    /**
     * @param array $attributes
     * @param string $property
     * @param string $side
     * @param array $wrapper_styles
     * @param array $button_styles
     * @param array $input_styles
     * @phpstan-return void
     */
    function apply_block_core_search_border_style($attributes, $property, $side, &$wrapper_styles, &$button_styles, &$input_styles)
    {
    }
    /**
     * @param array $attributes
     * @param string $property
     * @param array $wrapper_styles
     * @param array $button_styles
     * @param array $input_styles
     */
    function apply_block_core_search_border_styles($attributes, $property, &$wrapper_styles, &$button_styles, &$input_styles)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    function styles_for_block_core_search($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function get_typography_classes_for_block_core_search($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function get_typography_styles_for_block_core_search($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function get_border_color_classes_for_block_core_search($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function get_color_classes_for_block_core_search($attributes)
    {
    }
    /**
     * Server-side rendering of the `core/shortcode` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @return string
     */
    function render_block_core_shortcode($attributes, $content)
    {
    }
    function register_block_core_shortcode()
    {
    }
    /**
     * Server-side rendering of the `core/site-logo` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_site_logo($attributes)
    {
    }
    function register_block_core_site_logo_setting()
    {
    }
    function register_block_core_site_icon_setting()
    {
    }
    function register_block_core_site_logo()
    {
    }
    /**
     * @param string $custom_logo
     * @return string
     */
    function _override_custom_logo_theme_mod($custom_logo)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function _sync_custom_logo_to_site_logo($value)
    {
    }
    /**
     * @param array $old_value
     * @param array $value
     * @phpstan-return void
     */
    function _delete_site_logo_on_remove_custom_logo($old_value, $value)
    {
    }
    /**
     * @phpstan-return void
     */
    function _delete_site_logo_on_remove_theme_mods()
    {
    }
    function _delete_site_logo_on_remove_custom_logo_on_setup_theme()
    {
    }
    function _delete_custom_logo_on_remove_site_logo()
    {
    }
    /**
     * Server-side rendering of the `core/site-tagline` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_site_tagline($attributes)
    {
    }
    function register_block_core_site_tagline()
    {
    }
    /**
     * Server-side rendering of the `core/site-title` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_site_title($attributes)
    {
    }
    function register_block_core_site_title()
    {
    }
    /**
     * Server-side rendering of the `core/social-link` blocks.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_social_link($attributes, $content, $block)
    {
    }
    function register_block_core_social_link()
    {
    }
    /**
     * @param string $service
     * @return string
     */
    function block_core_social_link_get_icon($service)
    {
    }
    /**
     * @param string $service
     * @return string
     */
    function block_core_social_link_get_name($service)
    {
    }
    /**
     * @param string $service
     * @param string $field
     * @return array|string
     */
    function block_core_social_link_services($service = '', $field = '')
    {
    }
    /**
     * @param array $context
     * @return string
     */
    function block_core_social_link_get_color_styles($context)
    {
    }
    /**
     * @param array $context
     * @return string
     */
    function block_core_social_link_get_color_classes($context)
    {
    }
    /**
     * Server-side rendering of the `core/tag-cloud` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_tag_cloud($attributes)
    {
    }
    function register_block_core_tag_cloud()
    {
    }
    /**
     * Server-side rendering of the `core/template-part` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_template_part($attributes)
    {
    }
    /**
     * @param array $instance_variations
     * @return array
     */
    function build_template_part_block_area_variations($instance_variations)
    {
    }
    /**
     * @return array
     */
    function build_template_part_block_instance_variations()
    {
    }
    /**
     * @return array
     */
    function build_template_part_block_variations()
    {
    }
    function register_block_core_template_part()
    {
    }
    /**
     * Server-side rendering of the `core/term-description` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @return string
     */
    function render_block_core_term_description($attributes)
    {
    }
    function register_block_core_term_description()
    {
    }
    /**
     * Server-side rendering of the `core/widget-group` block.
     *
     * @package WordPress
     */
    /**
     * @param array $attributes
     * @param string $content
     * @param \WP_Block $block
     * @return string
     */
    function render_block_core_widget_group($attributes, $content, $block)
    {
    }
    function register_block_core_widget_group()
    {
    }
    /**
     * @param int|string $index
     */
    function note_sidebar_being_rendered($index)
    {
    }
    function discard_sidebar_being_rendered()
    {
    }
    /**
     * Bookmark Template Functions for usage in Themes.
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param array $bookmarks
     * @phpstan-param array{
     *   show_updated?: int|bool,
     *   show_description?: int|bool,
     *   show_images?: int|bool,
     *   show_name?: int|bool,
     *   before?: string,
     *   after?: string,
     *   link_before?: string,
     *   link_after?: string,
     *   between?: string,
     *   show_rating?: int|bool,
     * } $args
     * @return string
     */
    function _walk_bookmarks($bookmarks, $args = '')
    {
    }
    /**
     * @phpstan-param array{
     *   orderby?: string,
     *   order?: string,
     *   limit?: int,
     *   category?: string,
     *   category_name?: string,
     *   hide_invisible?: int|bool,
     *   show_updated?: int|bool,
     *   echo?: int|bool,
     *   categorize?: int|bool,
     *   show_description?: int|bool,
     *   title_li?: string,
     *   title_before?: string,
     *   title_after?: string,
     *   class?: string|array,
     *   category_before?: string,
     *   category_after?: string,
     *   category_orderby?: string,
     *   category_order?: string,
     * } $args
     * @return void|string
     */
    function wp_list_bookmarks($args = '')
    {
    }
    /**
     * Link/Bookmark API
     *
     * @package WordPress
     * @subpackage Bookmark
     */
    /**
     * @param int|\stdClass $bookmark
     * @param string $output
     * @param string $filter
     * @return array|object|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return null|($output is 'ARRAY_A' ? array<string, mixed> : ($output is 'ARRAY_N' ? array<int, mixed> : \stdClass))
     */
    function get_bookmark($bookmark, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param string $field
     * @param int $bookmark
     * @param string $context
     * @return string|\WP_Error
     */
    function get_bookmark_field($field, $bookmark, $context = 'display')
    {
    }
    /**
     * @phpstan-param array{
     *   orderby?: string,
     *   order?: string,
     *   limit?: int,
     *   category?: string,
     *   category_name?: string,
     *   hide_invisible?: int|bool,
     *   show_updated?: int|bool,
     *   include?: string,
     *   exclude?: string,
     *   search?: string,
     * } $args
     * @return object[]
     */
    function get_bookmarks($args = '')
    {
    }
    /**
     * @param \stdClass|array $bookmark
     * @param string $context
     * @return \stdClass|array
     */
    function sanitize_bookmark($bookmark, $context = 'display')
    {
    }
    /**
     * @param string $field
     * @param mixed $value
     * @param int $bookmark_id
     * @phpstan-param 'raw'|'edit'|'db'|'display'|'attribute'|'js' $context
     * @return mixed
     */
    function sanitize_bookmark_field($field, $value, $bookmark_id, $context)
    {
    }
    /**
     * @param int $bookmark_id
     */
    function clean_bookmark_cache($bookmark_id)
    {
    }
    function wp_cache_init()
    {
    }
    /**
     * @param int|string $key
     * @param mixed $data
     * @param string $group
     * @param int $expire
     * @return bool
     */
    function wp_cache_add($key, $data, $group = '', $expire = 0)
    {
    }
    /**
     * @param array $data
     * @param string $group
     * @param int $expire
     * @return bool[]
     */
    function wp_cache_add_multiple(array $data, $group = '', $expire = 0)
    {
    }
    /**
     * @param int|string $key
     * @param mixed $data
     * @param string $group
     * @param int $expire
     * @return bool
     */
    function wp_cache_replace($key, $data, $group = '', $expire = 0)
    {
    }
    /**
     * @param int|string $key
     * @param mixed $data
     * @param string $group
     * @param int $expire
     * @return bool
     */
    function wp_cache_set($key, $data, $group = '', $expire = 0)
    {
    }
    /**
     * @param array $data
     * @param string $group
     * @param int $expire
     * @return bool[]
     */
    function wp_cache_set_multiple(array $data, $group = '', $expire = 0)
    {
    }
    /**
     * @param int|string $key
     * @param string $group
     * @param bool $force
     * @param bool $found
     * @return mixed|false
     */
    function wp_cache_get($key, $group = '', $force = \false, &$found = \null)
    {
    }
    /**
     * @param array $keys
     * @param string $group
     * @param bool $force
     * @return array
     */
    function wp_cache_get_multiple($keys, $group = '', $force = \false)
    {
    }
    /**
     * @param int|string $key
     * @param string $group
     * @return bool
     */
    function wp_cache_delete($key, $group = '')
    {
    }
    /**
     * @param array $keys
     * @param string $group
     * @return bool[]
     */
    function wp_cache_delete_multiple(array $keys, $group = '')
    {
    }
    /**
     * @param int|string $key
     * @param int $offset
     * @param string $group
     * @return int|false
     */
    function wp_cache_incr($key, $offset = 1, $group = '')
    {
    }
    /**
     * @param int|string $key
     * @param int $offset
     * @param string $group
     * @return int|false
     */
    function wp_cache_decr($key, $offset = 1, $group = '')
    {
    }
    /**
     * @return bool
     */
    function wp_cache_flush()
    {
    }
    /**
     * @return bool
     */
    function wp_cache_flush_runtime()
    {
    }
    /**
     * @param string $group
     * @return bool
     */
    function wp_cache_flush_group($group)
    {
    }
    /**
     * @param string $feature
     * @return bool
     */
    function wp_cache_supports($feature)
    {
    }
    /**
     * @return true
     */
    function wp_cache_close()
    {
    }
    /**
     * @param string|string[] $groups
     */
    function wp_cache_add_global_groups($groups)
    {
    }
    /**
     * @param string|string[] $groups
     */
    function wp_cache_add_non_persistent_groups($groups)
    {
    }
    /**
     * @param int $blog_id
     */
    function wp_cache_switch_to_blog($blog_id)
    {
    }
    function wp_cache_reset()
    {
    }
    /**
     * Canonical API to handle WordPress Redirecting
     *
     * Based on "Permalink Redirect" from Scott Yang and "Enforce www. Preference"
     * by Mark Jaquith
     *
     * @package WordPress
     * @since 2.3.0
     */
    /**
     * @param string $requested_url
     * @param bool $do_redirect
     * @return string|void
     */
    function redirect_canonical($requested_url = \null, $do_redirect = \true)
    {
    }
    /**
     * @param string $query_string
     * @param array $args_to_check
     * @param string $url
     * @return string
     */
    function _remove_qs_args_if_not_in_url($query_string, array $args_to_check, $url)
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function strip_fragment_from_url($url)
    {
    }
    /**
     * @return string|false
     */
    function redirect_guess_404_permalink()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_redirect_admin_locations()
    {
    }
    /**
     * Core User Role & Capabilities API
     *
     * @package WordPress
     * @subpackage Users
     */
    /**
     * @param string $cap
     * @param int $user_id
     * @param mixed $args
     * @return string[]
     */
    function map_meta_cap($cap, $user_id, ...$args)
    {
    }
    /**
     * @param string $capability
     * @param mixed $args
     * @return bool
     */
    function current_user_can($capability, ...$args)
    {
    }
    /**
     * @param int $blog_id
     * @param string $capability
     * @param mixed $args
     * @return bool
     */
    function current_user_can_for_blog($blog_id, $capability, ...$args)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $capability
     * @param mixed $args
     * @return bool
     */
    function author_can($post, $capability, ...$args)
    {
    }
    /**
     * @param int|\WP_User $user
     * @param string $capability
     * @param mixed $args
     * @return bool
     */
    function user_can($user, $capability, ...$args)
    {
    }
    /**
     * @return \WP_Roles
     */
    function wp_roles()
    {
    }
    /**
     * @param string $role
     * @return \WP_Role|null
     */
    function get_role($role)
    {
    }
    /**
     * @param string $role
     * @param string $display_name
     * @param bool[] $capabilities
     * @return \WP_Role|void
     */
    function add_role($role, $display_name, $capabilities = array())
    {
    }
    /**
     * @param string $role
     */
    function remove_role($role)
    {
    }
    /**
     * @return string[]
     */
    function get_super_admins()
    {
    }
    /**
     * @param int|false $user_id
     * @return bool
     */
    function is_super_admin($user_id = \false)
    {
    }
    /**
     * @param int $user_id
     * @return bool
     */
    function grant_super_admin($user_id)
    {
    }
    /**
     * @param int $user_id
     * @return bool
     */
    function revoke_super_admin($user_id)
    {
    }
    /**
     * @param bool[] $allcaps
     * @return bool[]
     */
    function wp_maybe_grant_install_languages_cap($allcaps)
    {
    }
    /**
     * @param bool[] $allcaps
     * @return bool[]
     */
    function wp_maybe_grant_resume_extensions_caps($allcaps)
    {
    }
    /**
     * @param bool[] $allcaps
     * @param string[] $caps
     * @param \WP_User $user
     * @return bool[]
     */
    function wp_maybe_grant_site_health_caps($allcaps, $caps, $args, $user)
    {
    }
    /**
     * Taxonomy API: Core category-specific template tags
     *
     * @package WordPress
     * @subpackage Template
     * @since 1.2.0
     */
    /**
     * @param int|object $category
     * @return string
     */
    function get_category_link($category)
    {
    }
    /**
     * @param int $category_id
     * @param bool $link
     * @param string $separator
     * @param bool $nicename
     * @param array $deprecated
     * @return string|\WP_Error
     */
    function get_category_parents($category_id, $link = \false, $separator = '/', $nicename = \false, $deprecated = array())
    {
    }
    /**
     * @param int $post_id
     * @return \WP_Term[]
     */
    function get_the_category($post_id = \false)
    {
    }
    /**
     * @param int $cat_id
     * @return string|\WP_Error
     */
    function get_the_category_by_ID($cat_id)
    {
    }
    /**
     * @param string $separator
     * @param string $parents
     * @param int $post_id
     * @return string
     */
    function get_the_category_list($separator = '', $parents = '', $post_id = \false)
    {
    }
    /**
     * @param int|string|int[]|string[] $category
     * @param int|\WP_Post $post
     * @return bool
     */
    function in_category($category, $post = \null)
    {
    }
    /**
     * @param string $separator
     * @param string $parents
     * @param int $post_id
     */
    function the_category($separator = '', $parents = '', $post_id = \false)
    {
    }
    /**
     * @param int $category
     * @return string
     */
    function category_description($category = 0)
    {
    }
    /**
     * @phpstan-param array{
     *   show_option_all?: string,
     *   show_option_none?: string,
     *   option_none_value?: string,
     *   orderby?: string,
     *   pad_counts?: bool,
     *   show_count?: bool|int,
     *   echo?: bool|int,
     *   hierarchical?: bool|int,
     *   depth?: int,
     *   tab_index?: int,
     *   name?: string,
     *   id?: string,
     *   class?: string,
     *   selected?: int|string,
     *   value_field?: string,
     *   taxonomy?: string|array,
     *   hide_if_empty?: bool,
     *   required?: bool,
     *   walker?: Walker,
     *   aria_describedby?: string,
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args
     * @return string
     */
    function wp_dropdown_categories($args = '')
    {
    }
    /**
     * @phpstan-param array{
     *   current_category?: int|int[],
     *   depth?: int,
     *   echo?: bool|int,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   feed?: string,
     *   feed_image?: string,
     *   feed_type?: string,
     *   hide_title_if_empty?: bool,
     *   separator?: string,
     *   show_count?: bool|int,
     *   show_option_all?: string,
     *   show_option_none?: string,
     *   style?: string,
     *   taxonomy?: string,
     *   title_li?: string,
     *   use_desc_for_title?: bool|int,
     *   walker?: Walker,
     *   taxonomy?: string,
     * } $args
     * @return void|string|false
     */
    function wp_list_categories($args = '')
    {
    }
    /**
     * @phpstan-param array{
     *   number?: int,
     *   link?: string,
     *   post_type?: string,
     *   echo?: bool,
     *   smallest?: int,
     *   largest?: int,
     *   unit?: string,
     *   number?: int,
     *   format?: string,
     *   separator?: string,
     *   orderby?: string,
     *   order?: string,
     *   filter?: int|bool,
     *   topic_count_text?: array,
     *   topic_count_text_callback?: callable,
     *   topic_count_scale_callback?: callable,
     *   show_count?: bool|int,
     * } $args
     * @return void|string|string[]
     */
    function wp_tag_cloud($args = '')
    {
    }
    /**
     * @param int $count
     * @return int
     */
    function default_topic_count_scale($count)
    {
    }
    /**
     * @param \WP_Term[] $tags
     * @phpstan-param array{
     *   smallest?: int,
     *   largest?: int,
     *   unit?: string,
     *   number?: int,
     *   format?: string,
     *   separator?: string,
     *   orderby?: string,
     *   order?: string,
     *   filter?: int|bool,
     *   topic_count_text?: array,
     *   topic_count_text_callback?: callable,
     *   topic_count_scale_callback?: callable,
     *   show_count?: bool|int,
     * } $args
     * @return string|string[]
     */
    function wp_generate_tag_cloud($tags, $args = '')
    {
    }
    /**
     * @param object $a
     * @param object $b
     * @return int
     */
    function _wp_object_name_sort_cb($a, $b)
    {
    }
    /**
     * @param object $a
     * @param object $b
     * @return int
     */
    function _wp_object_count_sort_cb($a, $b)
    {
    }
    //
    // Helper functions.
    //
    /**
     * @param mixed $args
     * @return string
     */
    function walk_category_tree(...$args)
    {
    }
    /**
     * @param mixed $args
     * @return string
     */
    function walk_category_dropdown_tree(...$args)
    {
    }
    //
    // Tags.
    //
    /**
     * @param int|object $tag
     * @return string
     */
    function get_tag_link($tag)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return \WP_Term[]|false|\WP_Error
     */
    function get_the_tags($post = 0)
    {
    }
    /**
     * @param string $before
     * @param string $sep
     * @param string $after
     * @param int $post_id
     * @return string|false|\WP_Error
     */
    function get_the_tag_list($before = '', $sep = '', $after = '', $post_id = 0)
    {
    }
    /**
     * @param string $before
     * @param string $sep
     * @param string $after
     */
    function the_tags($before = \null, $sep = ', ', $after = '')
    {
    }
    /**
     * @param int $tag
     * @return string
     */
    function tag_description($tag = 0)
    {
    }
    /**
     * @param int $term
     * @param null $deprecated
     * @return string
     */
    function term_description($term = 0, $deprecated = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $taxonomy
     * @return \WP_Term[]|false|\WP_Error
     */
    function get_the_terms($post, $taxonomy)
    {
    }
    /**
     * @param int $post_id
     * @param string $taxonomy
     * @param string $before
     * @param string $sep
     * @param string $after
     * @return string|false|\WP_Error
     */
    function get_the_term_list($post_id, $taxonomy, $before = '', $sep = '', $after = '')
    {
    }
    /**
     * @param int $term_id
     * @param string $taxonomy
     * @phpstan-param array{
     *   format?: string,
     *   separator?: string,
     *   link?: bool,
     *   inclusive?: bool,
     * } $args
     * @return string|\WP_Error
     */
    function get_term_parents_list($term_id, $taxonomy, $args = array())
    {
    }
    /**
     * @param int $post_id
     * @param string $taxonomy
     * @param string $before
     * @param string $sep
     * @param string $after
     * @return void|false
     */
    function the_terms($post_id, $taxonomy, $before = '', $sep = ', ', $after = '')
    {
    }
    /**
     * @param string|int|array $category
     * @param int|\WP_Post $post
     * @return bool
     */
    function has_category($category = '', $post = \null)
    {
    }
    /**
     * @param string|int|array $tag
     * @param int|\WP_Post $post
     * @return bool
     */
    function has_tag($tag = '', $post = \null)
    {
    }
    /**
     * @param string|int|array $term
     * @param string $taxonomy
     * @param int|\WP_Post $post
     * @return bool
     */
    function has_term($term = '', $taxonomy = '', $post = \null)
    {
    }
    /**
     * Taxonomy API: Core category-specific functionality
     *
     * @package WordPress
     * @subpackage Taxonomy
     */
    /**
     * @phpstan-param array{
     *   taxonomy?: string,
     * } $args
     * @return array
     */
    function get_categories($args = '')
    {
    }
    /**
     * @param int|object $category
     * @param string $output
     * @param string $filter
     * @return object|array|\WP_Error|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return ($category is object ? array<array-key, mixed>|\WP_Term : array<array-key, mixed>|\WP_Term|\WP_Error|null) & ($output is 'ARRAY_A' ? array<string, mixed>|\WP_Error|null : ($output is 'ARRAY_N' ? array<int, mixed>|\WP_Error|null : \WP_Term|\WP_Error|null))
     */
    function get_category($category, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param string $category_path
     * @param bool $full_match
     * @param string $output
     * @return \WP_Term|array|\WP_Error|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return ($output is 'ARRAY_A' ? array<string, mixed>|\WP_Error|null : ($output is 'ARRAY_N' ? array<int, mixed>|\WP_Error|null : \WP_Term|\WP_Error|null))
     */
    function get_category_by_path($category_path, $full_match = \true, $output = \OBJECT)
    {
    }
    /**
     * @param string $slug
     * @return object|false
     */
    function get_category_by_slug($slug)
    {
    }
    /**
     * @param string $cat_name
     * @return int
     */
    function get_cat_ID($cat_name)
    {
    }
    /**
     * @param int $cat_id
     * @return string
     */
    function get_cat_name($cat_id)
    {
    }
    /**
     * @param int|object $cat1
     * @param int|object $cat2
     * @return bool
     */
    function cat_is_ancestor_of($cat1, $cat2)
    {
    }
    /**
     * @param object|array $category
     * @param string $context
     * @return object|array
     * @phpstan-template T of array|object
     * @phpstan-param T $category
     * @phpstan-return T
     */
    function sanitize_category($category, $context = 'display')
    {
    }
    /**
     * @param string $field
     * @param mixed $value
     * @param int $cat_id
     * @param string $context
     * @return mixed
     */
    function sanitize_category_field($field, $value, $cat_id, $context)
    {
    }
    /* Tags */
    /**
     * @phpstan-param array{
     *   taxonomy?: string,
     * } $args
     * @return \WP_Term[]|int|\WP_Error
     */
    function get_tags($args = '')
    {
    }
    /**
     * @param int|\WP_Term|object $tag
     * @param string $output
     * @param string $filter
     * @return \WP_Term|array|\WP_Error|null
     */
    function get_tag($tag, $output = \OBJECT, $filter = 'raw')
    {
    }
    /* Cache */
    /**
     * @param int $id
     */
    function clean_category_cache($id)
    {
    }
    /**
     * @param array|object|\WP_Term $category
     */
    function _make_cat_compat(&$category)
    {
    }
    /**
     * @param string $class
     * @phpstan-return void
     */
    function wp_simplepie_autoload($class)
    {
    }
    /**
     * @param string $category_name
     * @param array $category_properties
     * @return bool
     * @phpstan-param array{
     *   label?: string,
     * } $category_properties See WP_Block_Pattern_Categories_Registry::register()
     */
    function register_block_pattern_category($category_name, $category_properties)
    {
    }
    /**
     * @param string $category_name
     * @return bool
     */
    function unregister_block_pattern_category($category_name)
    {
    }
    /**
     * @param string $pattern_name
     * @param array $pattern_properties
     * @return bool
     * @phpstan-param array{
     *   title?: string,
     *   content?: string,
     *   description?: string,
     *   viewportWidth?: int,
     *   inserter?: bool,
     *   categories?: string[],
     *   keywords?: string[],
     *   blockTypes?: string[],
     *   postTypes?: string[],
     *   templateTypes?: string[],
     *   filePath?: string,
     * } $pattern_properties See WP_Block_Patterns_Registry::register()
     */
    function register_block_pattern($pattern_name, $pattern_properties)
    {
    }
    /**
     * @param string $pattern_name
     * @return bool
     */
    function unregister_block_pattern($pattern_name)
    {
    }
    /**
     * @param string[] $extra_attributes
     * @return string
     */
    function get_block_wrapper_attributes($extra_attributes = array())
    {
    }
    /**
     * Comment template functions
     *
     * These functions are meant to live inside of the WordPress loop.
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_author($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_author($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_author_email($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_author_email($comment_id = 0)
    {
    }
    /**
     * @param string $link_text
     * @param string $before
     * @param string $after
     * @param int|\WP_Comment $comment
     */
    function comment_author_email_link($link_text = '', $before = '', $after = '', $comment = \null)
    {
    }
    /**
     * @param string $link_text
     * @param string $before
     * @param string $after
     * @param int|\WP_Comment $comment
     * @return string
     */
    function get_comment_author_email_link($link_text = '', $before = '', $after = '', $comment = \null)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_author_link($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_author_link($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_author_IP($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_author_IP($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_author_url($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_author_url($comment_id = 0)
    {
    }
    /**
     * @param string $link_text
     * @param string $before
     * @param string $after
     * @param int|\WP_Comment $comment
     * @return string
     */
    function get_comment_author_url_link($link_text = '', $before = '', $after = '', $comment = 0)
    {
    }
    /**
     * @param string $link_text
     * @param string $before
     * @param string $after
     * @param int|\WP_Comment $comment
     */
    function comment_author_url_link($link_text = '', $before = '', $after = '', $comment = 0)
    {
    }
    /**
     * @param string|string[] $css_class
     * @param int|\WP_Comment $comment
     * @param int|\WP_Post $post
     * @param bool $display
     * @return void|string
     * @phpstan-return ($display is true ? void : string)
     */
    function comment_class($css_class = '', $comment = \null, $post = \null, $display = \true)
    {
    }
    /**
     * @param string|string[] $css_class
     * @param int|\WP_Comment $comment_id
     * @param int|\WP_Post $post
     * @return string[]
     */
    function get_comment_class($css_class = '', $comment_id = \null, $post = \null)
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_date($format = '', $comment_id = 0)
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Comment $comment_id
     */
    function comment_date($format = '', $comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_excerpt($comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_excerpt($comment_id = 0)
    {
    }
    /**
     * @return string
     */
    function get_comment_ID()
    {
    }
    function comment_ID()
    {
    }
    /**
     * @param \WP_Comment|int|null $comment
     * @phpstan-param array{
     *   type?: string,
     *   page?: int,
     *   per_page?: int,
     *   max_depth?: int,
     *   cpage?: int|string,
     * } $args
     * @return string
     */
    function get_comment_link($comment = \null, $args = array())
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_comments_link($post = 0)
    {
    }
    /**
     * @param string $deprecated
     * @param string $deprecated_2
     */
    function comments_link($deprecated = '', $deprecated_2 = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|int
     */
    function get_comments_number($post = 0)
    {
    }
    /**
     * @param string|false $zero
     * @param string|false $one
     * @param string|false $more
     * @param int|\WP_Post $post
     */
    function comments_number($zero = \false, $one = \false, $more = \false, $post = 0)
    {
    }
    /**
     * @param string $zero
     * @param string $one
     * @param string $more
     * @param int|\WP_Post $post
     * @return string
     */
    function get_comments_number_text($zero = \false, $one = \false, $more = \false, $post = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @param array $args
     * @return string
     */
    function get_comment_text($comment_id = 0, $args = array())
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @param array $args
     */
    function comment_text($comment_id = 0, $args = array())
    {
    }
    /**
     * @param string $format
     * @param bool $gmt
     * @param bool $translate
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_time($format = '', $gmt = \false, $translate = \true, $comment_id = 0)
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Comment $comment_id
     */
    function comment_time($format = '', $comment_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string
     */
    function get_comment_type($comment_id = 0)
    {
    }
    /**
     * @param string|false $commenttxt
     * @param string|false $trackbacktxt
     * @param string|false $pingbacktxt
     */
    function comment_type($commenttxt = \false, $trackbacktxt = \false, $pingbacktxt = \false)
    {
    }
    /**
     * @return string
     */
    function get_trackback_url()
    {
    }
    /**
     * @param bool $deprecated_echo
     * @return void|string
     */
    function trackback_url($deprecated_echo = \true)
    {
    }
    /**
     * @param int|string $deprecated
     * @phpstan-return void
     */
    function trackback_rdf($deprecated = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function comments_open($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function pings_open($post = \null)
    {
    }
    function wp_comment_form_unfiltered_html_nonce()
    {
    }
    /**
     * @param string $file
     * @param bool $separate_comments
     * @phpstan-return void
     */
    function comments_template($file = '/comments.php', $separate_comments = \false)
    {
    }
    /**
     * @param false|string $zero
     * @param false|string $one
     * @param false|string $more
     * @param string $css_class
     * @param false|string $none
     * @phpstan-return void
     */
    function comments_popup_link($zero = \false, $one = \false, $more = \false, $css_class = '', $none = \false)
    {
    }
    /**
     * @phpstan-param array{
     *   add_below?: string,
     *   respond_id?: string,
     *   reply_text?: string,
     *   login_text?: string,
     *   max_depth?: int,
     *   depth?: int,
     *   before?: string,
     *   after?: string,
     * } $args
     * @param int|\WP_Comment $comment
     * @param int|\WP_Post $post
     * @return string|false|null
     */
    function get_comment_reply_link($args = array(), $comment = \null, $post = \null)
    {
    }
    /**
     * @param array $args
     * @param int|\WP_Comment $comment
     * @param int|\WP_Post $post
     */
    function comment_reply_link($args = array(), $comment = \null, $post = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   add_below?: string,
     *   respond_id?: string,
     *   reply_text?: string,
     *   login_text?: string,
     *   before?: string,
     *   after?: string,
     * } $args
     * @param int|\WP_Post $post
     * @return string|false|null
     */
    function get_post_reply_link($args = array(), $post = \null)
    {
    }
    /**
     * @param array $args
     * @param int|\WP_Post $post
     */
    function post_reply_link($args = array(), $post = \null)
    {
    }
    /**
     * @param string $link_text
     * @param int|\WP_Post|null $post
     * @return string
     */
    function get_cancel_comment_reply_link($link_text = '', $post = \null)
    {
    }
    /**
     * @param string $link_text
     */
    function cancel_comment_reply_link($link_text = '')
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return string
     */
    function get_comment_id_fields($post = \null)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     */
    function comment_id_fields($post = \null)
    {
    }
    /**
     * @param string|false $no_reply_text
     * @param string|false $reply_text
     * @param bool $link_to_parent
     * @param int|\WP_Post|null $post
     * @phpstan-return void
     */
    function comment_form_title($no_reply_text = \false, $reply_text = \false, $link_to_parent = \true, $post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int
     */
    function _get_comment_reply_id($post = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   walker?: object,
     *   max_depth?: int,
     *   style?: string,
     *   callback?: callable,
     *   end-callback?: callable,
     *   type?: string,
     *   page?: int,
     *   per_page?: int,
     *   avatar_size?: int,
     *   reverse_top_level?: bool,
     *   reverse_children?: bool,
     *   format?: string,
     *   short_ping?: bool,
     *   echo?: bool,
     * } $args
     * @param \WP_Comment[] $comments
     * @return void|string
     */
    function wp_list_comments($args = array(), $comments = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   fields?: array{
     *     author: string,
     *     email: string,
     *     url: string,
     *     cookies: string,
     *   },
     *   comment_field?: string,
     *   must_log_in?: string,
     *   logged_in_as?: string,
     *   comment_notes_before?: string,
     *   comment_notes_after?: string,
     *   action?: string,
     *   id_form?: string,
     *   id_submit?: string,
     *   class_container?: string,
     *   class_form?: string,
     *   class_submit?: string,
     *   name_submit?: string,
     *   title_reply?: string,
     *   title_reply_to?: string,
     *   title_reply_before?: string,
     *   title_reply_after?: string,
     *   cancel_reply_before?: string,
     *   cancel_reply_after?: string,
     *   cancel_reply_link?: string,
     *   label_submit?: string,
     *   submit_button?: string,
     *   submit_field?: string,
     *   format?: string,
     * } $args
     * @param int|\WP_Post $post
     * @phpstan-return void
     */
    function comment_form($args = array(), $post = \null)
    {
    }
    /**
     * Core Comment API
     *
     * @package WordPress
     * @subpackage Comment
     */
    /**
     * @param string $author
     * @param string $email
     * @param string $url
     * @param string $comment
     * @param string $user_ip
     * @param string $user_agent
     * @param string $comment_type
     * @return bool
     */
    function check_comment($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-param array{
     *   status?: int,
     *   post_id?: int,
     *   order?: string,
     *   author_email?: string,
     *   author_url?: string,
     *   author__in?: int[],
     *   author__not_in?: int[],
     *   comment__in?: int[],
     *   comment__not_in?: int[],
     *   count?: bool,
     *   date_query?: array,
     *   fields?: string,
     *   include_unapproved?: array,
     *   karma?: int,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     *   number?: int,
     *   paged?: int,
     *   offset?: int,
     *   no_found_rows?: bool,
     *   orderby?: string|array,
     *   order?: string,
     *   parent?: int,
     *   parent__in?: int[],
     *   parent__not_in?: int[],
     *   post_author__in?: int[],
     *   post_author__not_in?: int[],
     *   post_id?: int,
     *   post__in?: int[],
     *   post__not_in?: int[],
     *   post_author?: int,
     *   post_status?: string|string[],
     *   post_type?: string|string[],
     *   post_name?: string,
     *   post_parent?: int,
     *   search?: string,
     *   status?: string|array,
     *   type?: string|string[],
     *   type__in?: string[],
     *   type__not_in?: string[],
     *   user_id?: int,
     *   hierarchical?: bool|string,
     *   cache_domain?: string,
     *   update_comment_meta_cache?: bool,
     *   update_comment_post_cache?: bool,
     * } $args
     * @return \WP_Comment[]|int[]|int
     */
    function get_approved_comments($post_id, $args = array())
    {
    }
    /**
     * @param \WP_Comment|string|int $comment
     * @param string $output
     * @return \WP_Comment|array|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return ($comment is \WP_Comment ? array<array-key, mixed>|\WP_Comment : array<array-key, mixed>|\WP_Comment|null) & ($output is 'ARRAY_A' ? array<string, mixed>|null : ($output is 'ARRAY_N' ? array<int, mixed>|null : \WP_Comment|null))
     */
    function get_comment($comment = \null, $output = \OBJECT)
    {
    }
    /**
     * @param string|array $args
     * @return \WP_Comment[]|int[]|int
     * @phpstan-param array{
     *   author_email?: string,
     *   author_url?: string,
     *   author__in?: int[],
     *   author__not_in?: int[],
     *   comment__in?: int[],
     *   comment__not_in?: int[],
     *   count?: bool,
     *   date_query?: array,
     *   fields?: string,
     *   include_unapproved?: array,
     *   karma?: int,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     *   number?: int,
     *   paged?: int,
     *   offset?: int,
     *   no_found_rows?: bool,
     *   orderby?: string|array,
     *   order?: string,
     *   parent?: int,
     *   parent__in?: int[],
     *   parent__not_in?: int[],
     *   post_author__in?: int[],
     *   post_author__not_in?: int[],
     *   post_id?: int,
     *   post__in?: int[],
     *   post__not_in?: int[],
     *   post_author?: int,
     *   post_status?: string|string[],
     *   post_type?: string|string[],
     *   post_name?: string,
     *   post_parent?: int,
     *   search?: string,
     *   status?: string|array,
     *   type?: string|string[],
     *   type__in?: string[],
     *   type__not_in?: string[],
     *   user_id?: int,
     *   hierarchical?: bool|string,
     *   cache_domain?: string,
     *   update_comment_meta_cache?: bool,
     *   update_comment_post_cache?: bool,
     * } $args See WP_Comment_Query::__construct()
     */
    function get_comments($args = '')
    {
    }
    /**
     * @return string[]
     */
    function get_comment_statuses()
    {
    }
    /**
     * @param string $post_type
     * @param string $comment_type
     * @phpstan-return 'open'|'closed'
     */
    function get_default_comment_status($post_type = 'post', $comment_type = 'comment')
    {
    }
    /**
     * @param string $timezone
     * @return string|false
     */
    function get_lastcommentmodified($timezone = 'server')
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return array{
     *   approved: int,
     *   awaiting_moderation: int,
     *   spam: int,
     *   trash: int,
     *   post-trashed: int,
     *   total_comments: int,
     *   all: int,
     * }
     */
    function get_comment_count($post_id = 0)
    {
    }
    //
    // Comment meta functions.
    //
    /**
     * @param int $comment_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false
     */
    function add_comment_meta($comment_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param int $comment_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_comment_meta($comment_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $comment_id
     * @param string $key
     * @param bool $single
     * @return mixed
     */
    function get_comment_meta($comment_id, $key = '', $single = \false)
    {
    }
    /**
     * @param array $comment_ids
     * @phpstan-return void
     */
    function wp_lazyload_comment_meta(array $comment_ids)
    {
    }
    /**
     * @param int $comment_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool
     */
    function update_comment_meta($comment_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @param \WP_Comment $comment
     * @param \WP_User $user
     * @param bool $cookies_consent
     * @phpstan-return void
     */
    function wp_set_comment_cookies($comment, $user, $cookies_consent = \true)
    {
    }
    function sanitize_comment_cookies()
    {
    }
    /**
     * @param array $commentdata
     * @param bool $wp_error
     * @return int|string|\WP_Error
     */
    function wp_allow_comment($commentdata, $wp_error = \false)
    {
    }
    function check_comment_flood_db()
    {
    }
    /**
     * @param bool $is_flood
     * @param string $ip
     * @param string $email
     * @param string $date
     * @param bool $avoid_die
     * @return bool
     */
    function wp_check_comment_flood($is_flood, $ip, $email, $date, $avoid_die = \false)
    {
    }
    /**
     * @param \WP_Comment[] $comments
     * @return \WP_Comment[]
     */
    function separate_comments(&$comments)
    {
    }
    /**
     * @param \WP_Comment[] $comments
     * @param int $per_page
     * @param bool $threaded
     * @return int
     */
    function get_comment_pages_count($comments = \null, $per_page = \null, $threaded = \null)
    {
    }
    /**
     * @param int $comment_id
     * @phpstan-param array{
     *   type?: string,
     *   per_page?: int,
     *   max_depth?: int|string,
     * } $args
     * @return int|null
     */
    function get_page_of_comment($comment_id, $args = array())
    {
    }
    /**
     * @return int[]
     */
    function wp_get_comment_fields_max_lengths()
    {
    }
    /**
     * @param array $comment_data
     * @return \WP_Error|true
     */
    function wp_check_comment_data_max_lengths($comment_data)
    {
    }
    /**
     * @param string $author
     * @param string $email
     * @param string $url
     * @param string $comment
     * @param string $user_ip
     * @param string $user_agent
     * @return bool
     */
    function wp_check_comment_disallowed_list($author, $email, $url, $comment, $user_ip, $user_agent)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return object{
     *   approved: int,
     *   moderated: int,
     *   spam: int,
     *   trash: int,
     *   post-trashed: int,
     *   total_comments: int,
     *   all: int,
     * }
     */
    function wp_count_comments($post_id = 0)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @param bool $force_delete
     * @return bool
     */
    function wp_delete_comment($comment_id, $force_delete = \false)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return bool
     */
    function wp_trash_comment($comment_id)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return bool
     */
    function wp_untrash_comment($comment_id)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return bool
     */
    function wp_spam_comment($comment_id)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return bool
     */
    function wp_unspam_comment($comment_id)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string|false
     */
    function wp_get_comment_status($comment_id)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Comment $comment
     */
    function wp_transition_comment_status($new_status, $old_status, $comment)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     */
    function _clear_modified_cache_on_transition_comment_status($new_status, $old_status)
    {
    }
    /**
     * @phpstan-return array{
     *   comment_author: string,
     *   comment_author_email: string,
     *   comment_author_url: string,
     * }
     */
    function wp_get_current_commenter()
    {
    }
    /**
     * @return string
     */
    function wp_get_unapproved_comment_author_email()
    {
    }
    /**
     * @phpstan-param array{
     *   comment_agent?: string,
     *   comment_approved?: int|string,
     *   comment_author?: string,
     *   comment_author_email?: string,
     *   comment_author_IP?: string,
     *   comment_author_url?: string,
     *   comment_content?: string,
     *   comment_date?: string,
     *   comment_date_gmt?: string,
     *   comment_karma?: int,
     *   comment_parent?: int,
     *   comment_post_ID?: int,
     *   comment_type?: string,
     *   comment_meta?: array,
     *   user_id?: int,
     * } $commentdata
     * @return int|false
     */
    function wp_insert_comment($commentdata)
    {
    }
    /**
     * @param array $commentdata
     * @return array
     */
    function wp_filter_comment($commentdata)
    {
    }
    /**
     * @param bool $block
     * @param int $time_lastcomment
     * @param int $time_newcomment
     * @return bool
     */
    function wp_throttle_comment_flood($block, $time_lastcomment, $time_newcomment)
    {
    }
    /**
     * @phpstan-param array{
     *   comment_author?: string,
     *   comment_author_email?: string,
     *   comment_author_url?: string,
     *   comment_content?: string,
     *   comment_date?: string,
     *   comment_date_gmt?: string,
     *   comment_type?: string,
     *   comment_parent?: int,
     *   comment_post_ID?: int,
     *   user_id?: int,
     *   user_ID?: int,
     *   comment_agent?: string,
     *   comment_author_IP?: string,
     * } $commentdata
     * @param bool $wp_error
     * @return int|false|\WP_Error
     */
    function wp_new_comment($commentdata, $wp_error = \false)
    {
    }
    /**
     * @param int $comment_id
     * @return bool
     */
    function wp_new_comment_notify_moderator($comment_id)
    {
    }
    /**
     * @param int $comment_id
     * @return bool
     */
    function wp_new_comment_notify_postauthor($comment_id)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @phpstan-param 'hold'|'approve'|'spam'|'trash' $comment_status
     * @param bool $wp_error
     * @return bool|\WP_Error
     * @phpstan-return ($wp_error is false ? bool : true|\WP_Error)
     */
    function wp_set_comment_status($comment_id, $comment_status, $wp_error = \false)
    {
    }
    /**
     * @param array $commentarr
     * @param bool $wp_error
     * @return int|false|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|1|false : 0|1|\WP_Error)
     */
    function wp_update_comment($commentarr, $wp_error = \false)
    {
    }
    /**
     * @param bool $defer
     * @return bool
     */
    function wp_defer_comment_counting($defer = \null)
    {
    }
    /**
     * @param int|null $post_id
     * @param bool $do_deferred
     * @return bool|void
     */
    function wp_update_comment_count($post_id, $do_deferred = \false)
    {
    }
    /**
     * @param int $post_id
     * @return bool
     */
    function wp_update_comment_count_now($post_id)
    {
    }
    //
    // Ping and trackback functions.
    //
    /**
     * @param string $url
     * @param string $deprecated
     * @return string|false
     */
    function discover_pingback_server_uri($url, $deprecated = '')
    {
    }
    function do_all_pings()
    {
    }
    function do_all_pingbacks()
    {
    }
    function do_all_enclosures()
    {
    }
    function do_all_trackbacks()
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return void|false
     */
    function do_trackbacks($post)
    {
    }
    /**
     * @param int $post_id
     * @return int
     */
    function generic_ping($post_id = 0)
    {
    }
    /**
     * @param string $content
     * @param int|\WP_Post $post
     * @phpstan-return void
     */
    function pingback($content, $post)
    {
    }
    /**
     * @param mixed $sites
     * @return mixed
     */
    function privacy_ping_filter($sites)
    {
    }
    /**
     * @param string $trackback_url
     * @param string $title
     * @param string $excerpt
     * @param int $post_id
     * @return int|false|void
     */
    function trackback($trackback_url, $title, $excerpt, $post_id)
    {
    }
    /**
     * @param string $server
     * @param string $path
     */
    function weblog_ping($server = '', $path = '')
    {
    }
    /**
     * @param string $source_uri
     * @return string
     */
    function pingback_ping_source_uri($source_uri)
    {
    }
    /**
     * @param \IXR_Error $ixr_error
     * @return \IXR_Error
     */
    function xmlrpc_pingback_error($ixr_error)
    {
    }
    //
    // Cache.
    //
    /**
     * @param int|array $ids
     */
    function clean_comment_cache($ids)
    {
    }
    /**
     * @param \WP_Comment[] $comments
     * @param bool $update_meta_cache
     */
    function update_comment_cache($comments, $update_meta_cache = \true)
    {
    }
    /**
     * @param int[] $comment_ids
     * @param bool $update_meta_cache
     */
    function _prime_comment_caches($comment_ids, $update_meta_cache = \true)
    {
    }
    //
    // Internal.
    //
    /**
     * @param \WP_Post $posts
     * @param \WP_Query $query
     * @return array
     */
    function _close_comments_for_old_posts($posts, $query)
    {
    }
    /**
     * @param bool $open
     * @param int $post_id
     * @return bool
     */
    function _close_comments_for_old_post($open, $post_id)
    {
    }
    /**
     * @phpstan-param array{
     *   comment_post_ID?: string|int,
     *   author?: string,
     *   email?: string,
     *   url?: string,
     *   comment?: string,
     *   comment_parent?: string|int,
     *   _wp_unfiltered_html_comment?: string,
     * } $comment_data
     * @return \WP_Comment|\WP_Error
     */
    function wp_handle_comment_submission($comment_data)
    {
    }
    /**
     * @param array[] $exporters
     * @return array[]
     */
    function wp_register_comment_personal_data_exporter($exporters)
    {
    }
    /**
     * @param string $email_address
     * @param int $page
     * @phpstan-return array{
     *   data: array[],
     *   done: bool,
     * }
     */
    function wp_comments_personal_data_exporter($email_address, $page = 1)
    {
    }
    /**
     * @param array $erasers
     * @return array
     */
    function wp_register_comment_personal_data_eraser($erasers)
    {
    }
    /**
     * @param string $email_address
     * @param int $page
     * @phpstan-return array{
     *   items_removed: bool,
     *   items_retained: bool,
     *   messages: string[],
     *   done: bool,
     * }
     */
    function wp_comments_personal_data_eraser($email_address, $page = 1)
    {
    }
    function wp_cache_set_comments_last_changed()
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_batch_update_comment_type()
    {
    }
    function _wp_check_for_scheduled_update_comment_type()
    {
    }
    /**
     * WordPress Cron API
     *
     * @package WordPress
     */
    /**
     * @param int $timestamp
     * @param string $hook
     * @param array $args
     * @param bool $wp_error
     * @return bool|\WP_Error
     * @phpstan-param list<mixed> $args
     * @phpstan-return ($wp_error is false ? bool : true|\WP_Error)
     */
    function wp_schedule_single_event($timestamp, $hook, $args = array(), $wp_error = \false)
    {
    }
    /**
     * @param int $timestamp
     * @param string $recurrence
     * @param string $hook
     * @param array $args
     * @param bool $wp_error
     * @return bool|\WP_Error
     * @phpstan-param list<mixed> $args
     * @phpstan-return ($wp_error is false ? bool : true|\WP_Error)
     */
    function wp_schedule_event($timestamp, $recurrence, $hook, $args = array(), $wp_error = \false)
    {
    }
    /**
     * @param int $timestamp
     * @param string $recurrence
     * @param string $hook
     * @param array $args
     * @param bool $wp_error
     * @return bool|\WP_Error
     * @phpstan-param list<mixed> $args
     * @phpstan-return ($wp_error is false ? bool : true|\WP_Error)
     */
    function wp_reschedule_event($timestamp, $recurrence, $hook, $args = array(), $wp_error = \false)
    {
    }
    /**
     * @param int $timestamp
     * @param string $hook
     * @param array $args
     * @param bool $wp_error
     * @return bool|\WP_Error
     * @phpstan-param list<mixed> $args
     * @phpstan-return ($wp_error is false ? bool : true|\WP_Error)
     */
    function wp_unschedule_event($timestamp, $hook, $args = array(), $wp_error = \false)
    {
    }
    /**
     * @param string $hook
     * @param array $args
     * @param bool $wp_error
     * @return int|false|\WP_Error
     * @phpstan-param list<mixed> $args
     * @phpstan-return (0|positive-int|($wp_error is false ? false : \WP_Error))
     */
    function wp_clear_scheduled_hook($hook, $args = array(), $wp_error = \false)
    {
    }
    /**
     * @param string $hook
     * @param bool $wp_error
     * @return int|false|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int|false : 0|positive-int|\WP_Error)
     */
    function wp_unschedule_hook($hook, $wp_error = \false)
    {
    }
    /**
     * @param string $hook
     * @param array $args
     * @param int|null $timestamp
     * @phpstan-return false|object{
     *   hook: string,
     *   timestamp: int,
     *   schedule: string|false,
     *   args: array,
     *   interval: int,
     * }
     * @phpstan-param list<mixed> $args
     */
    function wp_get_scheduled_event($hook, $args = array(), $timestamp = \null)
    {
    }
    /**
     * @param string $hook
     * @param array $args
     * @return int|false
     * @phpstan-param list<mixed> $args
     */
    function wp_next_scheduled($hook, $args = array())
    {
    }
    /**
     * @param int $gmt_time
     * @return bool
     */
    function spawn_cron($gmt_time = 0)
    {
    }
    /**
     * @return false|int|void
     */
    function wp_cron()
    {
    }
    /**
     * @return int|false
     */
    function _wp_cron()
    {
    }
    /**
     * @phpstan-return array<int|string, array{
     *   interval: int,
     *   display: string,
     * }>
     */
    function wp_get_schedules()
    {
    }
    /**
     * @param string $hook
     * @param array $args
     * @return string|false
     * @phpstan-param list<mixed> $args
     */
    function wp_get_schedule($hook, $args = array())
    {
    }
    /**
     * @return array[]
     */
    function wp_get_ready_cron_jobs()
    {
    }
    //
    // Private functions.
    //
    /**
     * @return array[]
     */
    function _get_cron_array()
    {
    }
    /**
     * @param array[] $cron
     * @param bool $wp_error
     * @return bool|\WP_Error
     */
    function _set_cron_array($cron, $wp_error = \false)
    {
    }
    /**
     * @param array $cron
     * @return array
     */
    function _upgrade_cron_array($cron)
    {
    }
    function wp_initial_constants()
    {
    }
    function wp_plugin_directory_constants()
    {
    }
    function wp_cookie_constants()
    {
    }
    function wp_ssl_constants()
    {
    }
    function wp_functionality_constants()
    {
    }
    function wp_templating_constants()
    {
    }
    /**
     * Deprecated functions from past WordPress versions. You shouldn't use these
     * functions and look for the alternatives instead. The functions will be
     * removed in a later version.
     *
     * @package WordPress
     * @subpackage Deprecated
     */
    /*
     * Deprecated functions come here to die.
     */
    /**
     * @param int $postid
     * @return array
     */
    function get_postdata($postid)
    {
    }
    function start_wp()
    {
    }
    /**
     * @param bool $display
     * @return int
     */
    function the_category_ID($display = \true)
    {
    }
    /**
     * @param string $before
     * @param string $after
     */
    function the_category_head($before = '', $after = '')
    {
    }
    /**
     * @param string $format
     * @param string $previous
     * @param string $title
     * @param string $in_same_cat
     * @param int $limitprev
     * @param string $excluded_categories
     * @phpstan-return void
     */
    function previous_post($format = '%', $previous = 'previous post: ', $title = 'yes', $in_same_cat = 'no', $limitprev = 1, $excluded_categories = '')
    {
    }
    /**
     * @param string $format
     * @param string $next
     * @param string $title
     * @param string $in_same_cat
     * @param int $limitnext
     * @param string $excluded_categories
     * @phpstan-return void
     */
    function next_post($format = '%', $next = 'next post: ', $title = 'yes', $in_same_cat = 'no', $limitnext = 1, $excluded_categories = '')
    {
    }
    /**
     * @param int $user_id
     * @param int $blog_id
     * @param int $category_id
     * @return bool
     */
    function user_can_create_post($user_id, $blog_id = 1, $category_id = 'None')
    {
    }
    /**
     * @param int $user_id
     * @param int $blog_id
     * @param int $category_id
     * @return bool
     */
    function user_can_create_draft($user_id, $blog_id = 1, $category_id = 'None')
    {
    }
    /**
     * @param int $user_id
     * @param int $post_id
     * @param int $blog_id
     * @return bool
     */
    function user_can_edit_post($user_id, $post_id, $blog_id = 1)
    {
    }
    /**
     * @param int $user_id
     * @param int $post_id
     * @param int $blog_id
     * @return bool
     */
    function user_can_delete_post($user_id, $post_id, $blog_id = 1)
    {
    }
    /**
     * @param int $user_id
     * @param int $blog_id
     * @param int $category_id
     * @return bool
     */
    function user_can_set_post_date($user_id, $blog_id = 1, $category_id = 'None')
    {
    }
    /**
     * @param int $user_id
     * @param int $post_id
     * @param int $blog_id
     * @return bool
     */
    function user_can_edit_post_date($user_id, $post_id, $blog_id = 1)
    {
    }
    /**
     * @param int $user_id
     * @param int $post_id
     * @param int $blog_id
     * @return bool
     */
    function user_can_edit_post_comments($user_id, $post_id, $blog_id = 1)
    {
    }
    /**
     * @param int $user_id
     * @param int $post_id
     * @param int $blog_id
     * @return bool
     */
    function user_can_delete_post_comments($user_id, $post_id, $blog_id = 1)
    {
    }
    /**
     * @param int $user_id
     * @param int $other_user
     * @return bool
     */
    function user_can_edit_user($user_id, $other_user)
    {
    }
    /**
     * @param string $cat_name
     * @param string $before
     * @param string $after
     * @param string $between
     * @param bool $show_images
     * @param string $orderby
     * @param bool $show_description
     * @param bool $show_rating
     * @param int $limit
     * @param int $show_updated
     */
    function get_linksbyname($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = \true, $orderby = 'id', $show_description = \true, $show_rating = \false, $limit = -1, $show_updated = 0)
    {
    }
    /**
     * @param string $category
     * @param string $args
     * @return string|null
     */
    function wp_get_linksbyname($category, $args = '')
    {
    }
    /**
     * @param string $cat_name
     * @param string $orderby
     * @param int $limit
     * @return array
     */
    function get_linkobjectsbyname($cat_name = "noname", $orderby = 'name', $limit = -1)
    {
    }
    /**
     * @param int $category
     * @param string $orderby
     * @param int $limit
     * @return array
     */
    function get_linkobjects($category = 0, $orderby = 'name', $limit = 0)
    {
    }
    /**
     * @param string $cat_name
     * @param string $before
     * @param string $after
     * @param string $between
     * @param bool $show_images
     * @param string $orderby
     * @param bool $show_description
     * @param int $limit
     * @param int $show_updated
     */
    function get_linksbyname_withrating($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = \true, $orderby = 'id', $show_description = \true, $limit = -1, $show_updated = 0)
    {
    }
    /**
     * @param int $category
     * @param string $before
     * @param string $after
     * @param string $between
     * @param bool $show_images
     * @param string $orderby
     * @param bool $show_description
     * @param int $limit
     * @param int $show_updated
     */
    function get_links_withrating($category = -1, $before = '', $after = '<br />', $between = " ", $show_images = \true, $orderby = 'id', $show_description = \true, $limit = -1, $show_updated = 0)
    {
    }
    /**
     * @param int $id
     * @return int
     */
    function get_autotoggle($id = 0)
    {
    }
    /**
     * @param int $optionall
     * @param string $all
     * @param string $sort_column
     * @param string $sort_order
     * @param string $file
     * @param bool $list
     * @param int $optiondates
     * @param int $optioncount
     * @param int $hide_empty
     * @param int $use_desc_for_title
     * @param bool $children
     * @param int $child_of
     * @param int $categories
     * @param int $recurse
     * @param string $feed
     * @param string $feed_image
     * @param string $exclude
     * @param bool $hierarchical
     * @return null|false
     */
    function list_cats($optionall = 1, $all = 'All', $sort_column = 'ID', $sort_order = 'asc', $file = '', $list = \true, $optiondates = 0, $optioncount = 0, $hide_empty = 1, $use_desc_for_title = 1, $children = \false, $child_of = 0, $categories = 0, $recurse = 0, $feed = '', $feed_image = '', $exclude = '', $hierarchical = \false)
    {
    }
    /**
     * @param string|array $args
     * @return null|string|false
     */
    function wp_list_cats($args = '')
    {
    }
    /**
     * @param int $optionall
     * @param string $all
     * @param string $orderby
     * @param string $order
     * @param int $show_last_update
     * @param int $show_count
     * @param int $hide_empty
     * @param bool $optionnone
     * @param int $selected
     * @param int $exclude
     * @return string
     */
    function dropdown_cats($optionall = 1, $all = 'All', $orderby = 'ID', $order = 'asc', $show_last_update = 0, $show_count = 0, $hide_empty = 1, $optionnone = \false, $selected = 0, $exclude = 0)
    {
    }
    /**
     * @param bool $optioncount
     * @param bool $exclude_admin
     * @param bool $show_fullname
     * @param bool $hide_empty
     * @param string $feed
     * @param string $feed_image
     * @return null|string
     */
    function list_authors($optioncount = \false, $exclude_admin = \true, $show_fullname = \false, $hide_empty = \true, $feed = '', $feed_image = '')
    {
    }
    /**
     * @param int $blogid
     * @param int $post_id
     * @return array
     */
    function wp_get_post_cats($blogid = '1', $post_id = 0)
    {
    }
    /**
     * @param int $blogid
     * @param int $post_id
     * @param array $post_categories
     * @return bool|mixed
     */
    function wp_set_post_cats($blogid = '1', $post_id = 0, $post_categories = array())
    {
    }
    /**
     * @param string $type
     * @param string $limit
     * @param string $format
     * @param string $before
     * @param string $after
     * @param bool $show_post_count
     * @return string|null
     */
    function get_archives($type = '', $limit = '', $format = 'html', $before = '', $after = '', $show_post_count = \false)
    {
    }
    /**
     * @param bool $display
     * @param int $author_id
     * @param string $author_nicename
     * @return string|null
     */
    function get_author_link($display, $author_id, $author_nicename = '')
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @param string $next_or_number
     * @param string $nextpagelink
     * @param string $previouspagelink
     * @param string $pagelink
     * @param string $more_file
     * @return string
     */
    function link_pages($before = '<br />', $after = '<br />', $next_or_number = 'number', $nextpagelink = 'next page', $previouspagelink = 'previous page', $pagelink = '%', $more_file = '')
    {
    }
    /**
     * @param string $option
     * @return string
     */
    function get_settings($option)
    {
    }
    function permalink_link()
    {
    }
    /**
     * @param string $deprecated
     */
    function permalink_single_rss($deprecated = '')
    {
    }
    /**
     * @param string $args
     * @return null|string
     */
    function wp_get_links($args = '')
    {
    }
    /**
     * @param int $category
     * @param string $before
     * @param string $after
     * @param string $between
     * @param bool $show_images
     * @param string $orderby
     * @param bool $show_description
     * @param bool $show_rating
     * @param int $limit
     * @param int $show_updated
     * @param bool $display
     * @return null|string
     */
    function get_links($category = -1, $before = '', $after = '<br />', $between = ' ', $show_images = \true, $orderby = 'name', $show_description = \true, $show_rating = \false, $limit = -1, $show_updated = 1, $display = \true)
    {
    }
    /**
     * @param string $order
     */
    function get_links_list($order = 'name')
    {
    }
    /**
     * @param string $text
     * @param int $width
     * @param int $height
     * @param string $file
     * @param bool $count
     */
    function links_popup_script($text = 'Links', $width = 400, $height = 400, $file = 'links.all.php', $count = \true)
    {
    }
    /**
     * @param object $link
     * @return mixed
     */
    function get_linkrating($link)
    {
    }
    /**
     * @param int $id
     * @return string
     */
    function get_linkcatname($id = 0)
    {
    }
    /**
     * @param string $link_text
     */
    function comments_rss_link($link_text = 'Comments RSS')
    {
    }
    /**
     * @param bool $display
     * @param int $cat_id
     * @return string
     */
    function get_category_rss_link($display = \false, $cat_id = 1)
    {
    }
    /**
     * @param bool $display
     * @param int $author_id
     * @return string
     */
    function get_author_rss_link($display = \false, $author_id = 1)
    {
    }
    /**
     * @return string
     */
    function comments_rss()
    {
    }
    /**
     * @param string $username
     * @param string $password
     * @param string $email
     * @return int
     */
    function create_user($username, $password, $email)
    {
    }
    function gzip_compression()
    {
    }
    /**
     * @param int $comment_id
     * @param int $no_cache
     * @param bool $include_unapproved
     * @return array
     */
    function get_commentdata($comment_id, $no_cache = 0, $include_unapproved = \false)
    {
    }
    /**
     * @param int $cat_id
     * @return string
     */
    function get_catname($cat_id)
    {
    }
    /**
     * @param int $id
     * @param string $before
     * @param string $after
     * @param array $visited
     * @return string
     */
    function get_category_children($id, $before = '/', $after = '', $visited = array())
    {
    }
    /**
     * @return int[]
     */
    function get_all_category_ids()
    {
    }
    /**
     * @return string
     */
    function get_the_author_description()
    {
    }
    function the_author_description()
    {
    }
    /**
     * @return string
     */
    function get_the_author_login()
    {
    }
    function the_author_login()
    {
    }
    /**
     * @return string
     */
    function get_the_author_firstname()
    {
    }
    function the_author_firstname()
    {
    }
    /**
     * @return string
     */
    function get_the_author_lastname()
    {
    }
    function the_author_lastname()
    {
    }
    /**
     * @return string
     */
    function get_the_author_nickname()
    {
    }
    function the_author_nickname()
    {
    }
    /**
     * @return string
     */
    function get_the_author_email()
    {
    }
    function the_author_email()
    {
    }
    /**
     * @return string
     */
    function get_the_author_icq()
    {
    }
    function the_author_icq()
    {
    }
    /**
     * @return string
     */
    function get_the_author_yim()
    {
    }
    function the_author_yim()
    {
    }
    /**
     * @return string
     */
    function get_the_author_msn()
    {
    }
    function the_author_msn()
    {
    }
    /**
     * @return string
     */
    function get_the_author_aim()
    {
    }
    function the_author_aim()
    {
    }
    /**
     * @param int $auth_id
     * @return string
     */
    function get_author_name($auth_id = \false)
    {
    }
    /**
     * @return string
     */
    function get_the_author_url()
    {
    }
    function the_author_url()
    {
    }
    /**
     * @return string|int
     */
    function get_the_author_ID()
    {
    }
    function the_author_ID()
    {
    }
    /**
     * @param string $more_link_text
     * @param int $stripteaser
     * @param string $more_file
     * @param int $cut
     * @param int $encode_html
     */
    function the_content_rss($more_link_text = '(more...)', $stripteaser = 0, $more_file = '', $cut = 0, $encode_html = 0)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function make_url_footnote($content)
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function _c($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function translate_with_context($text, $domain = 'default')
    {
    }
    /**
     * @param string $single
     * @param string $plural
     * @param int $number
     * @param string $domain
     * @return string
     */
    function _nc($single, $plural, $number, $domain = 'default')
    {
    }
    function __ngettext(...$args)
    {
    }
    function __ngettext_noop(...$args)
    {
    }
    /**
     * @return array
     */
    function get_alloptions()
    {
    }
    /**
     * @param int $id
     * @param bool $fullsize
     * @param array $max_dims
     * @param bool $permalink
     * @return string
     */
    function get_the_attachment_link($id = 0, $fullsize = \false, $max_dims = \false, $permalink = \false)
    {
    }
    /**
     * @param int $id
     * @param bool $fullsize
     * @return array
     */
    function get_attachment_icon_src($id = 0, $fullsize = \false)
    {
    }
    /**
     * @param int $id
     * @param bool $fullsize
     * @param array $max_dims
     * @return string|false
     */
    function get_attachment_icon($id = 0, $fullsize = \false, $max_dims = \false)
    {
    }
    /**
     * @param int $id
     * @param bool $fullsize
     * @param array $max_dims
     * @return string|false
     */
    function get_attachment_innerHTML($id = 0, $fullsize = \false, $max_dims = \false)
    {
    }
    /**
     * @param int $bookmark_id
     * @param string $output
     * @phpstan-param 'raw'|'edit'|'attribute'|'js'|'db'|'display' $filter
     * @return object|array
     */
    function get_link($bookmark_id, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param string $url
     * @param array $protocols
     * @param string $context
     * @return string
     */
    function clean_url($url, $protocols = \null, $context = 'display')
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function js_escape($text)
    {
    }
    /**
     * @param string $text
     * @param string $quote_style
     * @param false|string $charset
     * @param false $double_encode
     * @return string
     */
    function wp_specialchars($text, $quote_style = \ENT_NOQUOTES, $charset = \false, $double_encode = \false)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function attribute_escape($text)
    {
    }
    /**
     * @param string|int $name
     * @param callable $output_callback
     * @param string $classname
     * @param mixed $params
     */
    function register_sidebar_widget($name, $output_callback, $classname = '', ...$params)
    {
    }
    /**
     * @param int|string $id
     */
    function unregister_sidebar_widget($id)
    {
    }
    /**
     * @param int|string $name
     * @param callable $control_callback
     * @param int $width
     * @param int $height
     * @param mixed $params
     */
    function register_widget_control($name, $control_callback, $width = '', $height = '', ...$params)
    {
    }
    /**
     * @param int|string $id
     */
    function unregister_widget_control($id)
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_usermeta($user_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @return mixed
     */
    function get_usermeta($user_id, $meta_key = '')
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function update_usermeta($user_id, $meta_key, $meta_value)
    {
    }
    /**
     * @param int $id
     * @return array
     */
    function get_users_of_blog($id = '')
    {
    }
    /**
     * @param bool $add
     */
    function automatic_feed_links($add = \true)
    {
    }
    /**
     * @param string $field
     * @param false|int $user
     * @return string
     */
    function get_profile($field, $user = \false)
    {
    }
    /**
     * @param int $userid
     * @return int
     */
    function get_usernumposts($userid)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function funky_javascript_callback($matches)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function funky_javascript_fix($text)
    {
    }
    /**
     * @param string $taxonomy
     * @return bool
     */
    function is_taxonomy($taxonomy)
    {
    }
    /**
     * @param int|string $term
     * @param string $taxonomy
     * @param int $parent
     * @return mixed
     * @phpstan-return ($term is 0 ? 0 : ($term is '' ? null : ($taxonomy is '' ? string|null : array{term_id: string, term_taxonomy_id: string}|null)))
     */
    function is_term($term, $taxonomy = '', $parent = 0)
    {
    }
    /**
     * @return bool
     */
    function is_plugin_page()
    {
    }
    /**
     * @return bool
     */
    function update_category_cache()
    {
    }
    /**
     * @return bool
     */
    function wp_timezone_supported()
    {
    }
    /**
     * @param string $content
     * @param string $id
     * @param string $prev_id
     * @param bool $media_buttons
     * @param int $tab_index
     * @param bool $extended
     */
    function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = \true, $tab_index = 2, $extended = \true)
    {
    }
    /**
     * @param array $ids
     * @return array
     */
    function get_user_metavalues($ids)
    {
    }
    /**
     * @param object|array $user
     * @param string $context
     * @return object|array
     */
    function sanitize_user_object($user, $context = 'display')
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_cat
     * @param string $excluded_categories
     * @param bool $start
     * @return string
     */
    function get_boundary_post_rel_link($title = '%title', $in_same_cat = \false, $excluded_categories = '', $start = \true)
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_cat
     * @param string $excluded_categories
     */
    function start_post_rel_link($title = '%title', $in_same_cat = \false, $excluded_categories = '')
    {
    }
    /**
     * @return string
     */
    function get_index_rel_link()
    {
    }
    function index_rel_link()
    {
    }
    /**
     * @param string $title
     * @return string
     */
    function get_parent_post_rel_link($title = '%title')
    {
    }
    /**
     * @param string $title
     */
    function parent_post_rel_link($title = '%title')
    {
    }
    /**
     * @param \WP_Admin_Bar $wp_admin_bar
     */
    function wp_admin_bar_dashboard_view_site_menu($wp_admin_bar)
    {
    }
    /**
     * @param int $blog_id
     * @return bool
     */
    function is_blog_user($blog_id = 0)
    {
    }
    /**
     * @param string $filename
     * @param string $mode
     * @return false
     */
    function debug_fopen($filename, $mode)
    {
    }
    /**
     * @param mixed $fp
     * @param string $message
     */
    function debug_fwrite($fp, $message)
    {
    }
    /**
     * @param mixed $fp
     */
    function debug_fclose($fp)
    {
    }
    /**
     * @return array
     */
    function get_themes()
    {
    }
    /**
     * @param string $theme
     * @return array|null
     */
    function get_theme($theme)
    {
    }
    /**
     * @return string
     */
    function get_current_theme()
    {
    }
    /**
     * @param array|string $matches
     * @return string
     */
    function clean_pre($matches)
    {
    }
    /**
     * @param callable $wp_head_callback
     * @param callable $admin_head_callback
     * @param callable $admin_preview_callback
     */
    function add_custom_image_header($wp_head_callback, $admin_head_callback, $admin_preview_callback = '')
    {
    }
    /**
     * @return null|bool
     */
    function remove_custom_image_header()
    {
    }
    /**
     * @param callable $wp_head_callback
     * @param callable $admin_head_callback
     * @param callable $admin_preview_callback
     */
    function add_custom_background($wp_head_callback = '', $admin_head_callback = '', $admin_preview_callback = '')
    {
    }
    /**
     * @return null|bool
     */
    function remove_custom_background()
    {
    }
    /**
     * @param string $theme_file
     * @return array
     */
    function get_theme_data($theme_file)
    {
    }
    /**
     * @param array $pages
     */
    function update_page_cache(&$pages)
    {
    }
    /**
     * @param int $id
     */
    function clean_page_cache($id)
    {
    }
    /**
     * @param string $action
     * @return string
     */
    function wp_explain_nonce($action)
    {
    }
    /**
     * @param int $post_id
     */
    function sticky_class($post_id = \null)
    {
    }
    /**
     * @param \WP_Post $post
     */
    function _get_post_ancestors(&$post)
    {
    }
    /**
     * @param string $file
     * @return resource|\GdImage|string
     */
    function wp_load_image($file)
    {
    }
    /**
     * @param string $file
     * @param int $max_w
     * @param int $max_h
     * @param bool $crop
     * @param string $suffix
     * @param string $dest_path
     * @param int $jpeg_quality
     * @return mixed
     */
    function image_resize($file, $max_w, $max_h, $crop = \false, $suffix = \null, $dest_path = \null, $jpeg_quality = 90)
    {
    }
    /**
     * @param int $postid
     * @param string $mode
     * @return \WP_Post|null
     */
    function wp_get_single_post($postid = 0, $mode = \OBJECT)
    {
    }
    /**
     * @param string $user_login
     * @param string $user_pass
     * @return bool
     */
    function user_pass_ok($user_login, $user_pass)
    {
    }
    function _save_post_hook()
    {
    }
    /**
     * @param string $mime_type
     * @return bool
     */
    function gd_edit_image_support($mime_type)
    {
    }
    /**
     * @param int $bytes
     * @return string
     */
    function wp_convert_bytes_to_hr($bytes)
    {
    }
    /**
     * @param string $t
     * @return string
     */
    function _search_terms_tidy($t)
    {
    }
    /**
     * @return bool
     */
    function rich_edit_exists()
    {
    }
    /**
     * @param int $count
     * @return int
     */
    function default_topic_count_text($count)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function format_to_post($content)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function like_escape($text)
    {
    }
    /**
     * @param string $url
     * @return bool
     */
    function url_is_accessable_via_ssl($url)
    {
    }
    function preview_theme()
    {
    }
    /**
     * @return string
     */
    function _preview_theme_template_filter()
    {
    }
    /**
     * @return string
     */
    function _preview_theme_stylesheet_filter()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function preview_theme_ob_filter($content)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function preview_theme_ob_filter_callback($matches)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function wp_richedit_pre($text)
    {
    }
    /**
     * @param string $output
     * @return string
     */
    function wp_htmledit_pre($output)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function post_permalink($post = 0)
    {
    }
    /**
     * @param string $url
     * @param string|bool $file_path
     * @param int $red
     * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary|false
     */
    function wp_get_http($url, $file_path = \false, $red = 1)
    {
    }
    /**
     * @param string|bool $force
     * @return bool
     */
    function force_ssl_login($force = \null)
    {
    }
    /**
     * @return string
     */
    function get_comments_popup_template()
    {
    }
    /**
     * @return false
     */
    function is_comments_popup()
    {
    }
    function comments_popup_script()
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function popuplinks($text)
    {
    }
    /**
     * @return string
     */
    function wp_embed_handler_googlevideo($matches, $attr, $url, $rawattr)
    {
    }
    /**
     * @return string
     */
    function get_paged_template()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_kses_js_entities($content)
    {
    }
    /**
     * @param object $a
     * @param object $b
     * @return int
     */
    function _usort_terms_by_ID($a, $b)
    {
    }
    /**
     * @param object $a
     * @param object $b
     * @return int
     */
    function _usort_terms_by_name($a, $b)
    {
    }
    /**
     * @param object $a
     * @param object $b
     * @return int
     */
    function _sort_nav_menu_items($a, $b)
    {
    }
    /**
     * @return string
     */
    function get_shortcut_link()
    {
    }
    function wp_ajax_press_this_save_post()
    {
    }
    function wp_ajax_press_this_add_category()
    {
    }
    /**
     * @param int $request_id
     * @return \WP_User_Request|false
     */
    function wp_get_user_request_data($request_id)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_make_content_images_responsive($content)
    {
    }
    function wp_unregister_GLOBALS()
    {
    }
    /**
     * @param string $author
     * @param string $email
     * @param string $url
     * @param string $comment
     * @param string $user_ip
     * @param string $user_agent
     * @return bool
     */
    function wp_blacklist_check($author, $email, $url, $comment, $user_ip, $user_agent)
    {
    }
    /**
     * @param array $args
     * @param array $default_args
     * @return array
     */
    function _wp_register_meta_args_whitelist($args, $default_args)
    {
    }
    /**
     * @param array $new_options
     * @param string|array $options
     * @return array
     */
    function add_option_whitelist($new_options, $options = '')
    {
    }
    /**
     * @param array $del_options
     * @param string|array $options
     * @return array
     */
    function remove_option_whitelist($del_options, $options = '')
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function wp_slash_strings_only($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function addslashes_strings_only($value)
    {
    }
    function noindex()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_no_robots()
    {
    }
    function wp_sensitive_page_meta()
    {
    }
    /**
     * @param array $columns
     * @param array $allowed_blocks
     * @return string
     */
    function _excerpt_render_inner_columns_blocks($columns, $allowed_blocks)
    {
    }
    /**
     * @param array $preset
     * @return string
     */
    function wp_render_duotone_filter_preset($preset)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @return bool
     */
    function wp_skip_border_serialization($block_type)
    {
    }
    /**
     * @param \WP_Block_type $block_type
     * @return bool
     */
    function wp_skip_dimensions_serialization($block_type)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @return bool
     */
    function wp_skip_spacing_serialization($block_type)
    {
    }
    function wp_add_iframed_editor_assets_html()
    {
    }
    /**
     * @param int $post_id
     * @return string|false
     */
    function wp_get_attachment_thumb_file($post_id = 0)
    {
    }
    /**
     * @param string $domain
     * @param bool $reset
     * @return string|false
     */
    function _get_path_to_translation($domain, $reset = \false)
    {
    }
    /**
     * @param string $domain
     * @return string|false
     */
    function _get_path_to_translation_from_lang_dir($domain)
    {
    }
    /**
     * @param array $metadata
     * @return array
     */
    function _wp_multiple_block_styles($metadata)
    {
    }
    /**
     * @param array $attributes
     * @param string $feature
     * @param string $css_property
     * @return string
     */
    function wp_typography_get_css_variable_inline_style($attributes, $feature, $css_property)
    {
    }
    /**
     * @return bool
     */
    function global_terms_enabled()
    {
    }
    /**
     * @param array $clauses
     * @return array
     */
    function _filter_query_attachment_filenames($clauses)
    {
    }
    /**
     * @param string $page_title
     * @param string $output
     * @param string|array $post_type
     * @return \WP_Post|array|null
     */
    function get_page_by_title($page_title, $output = \OBJECT, $post_type = 'page')
    {
    }
    /**
     * @return array|null
     */
    function _resolve_home_block_template()
    {
    }
    function wlwmanifest_link()
    {
    }
    /**
     * @param \WP_Comment[] $comments
     */
    function wp_queue_comments_for_comment_meta_lazyload($comments)
    {
    }
    /**
     * @param string $context
     * @return string|bool
     */
    function wp_get_loading_attr_default($context)
    {
    }
    /**
     * @param string $image
     * @param string $context
     * @return string
     */
    function wp_img_tag_add_loading_attr($image, $context)
    {
    }
    /**
     * @param mixed $n
     * @param int $max
     * @return float
     */
    function wp_tinycolor_bound01($n, $max)
    {
    }
    /**
     * @param mixed $n
     * @return float
     */
    function _wp_tinycolor_bound_alpha($n)
    {
    }
    /**
     * @param array $rgb_color
     * @return array
     */
    function wp_tinycolor_rgb_to_rgb($rgb_color)
    {
    }
    /**
     * @param float $p
     * @param float $q
     * @param float $t
     * @return float
     */
    function wp_tinycolor_hue_to_rgb($p, $q, $t)
    {
    }
    /**
     * @param array $hsl_color
     * @return array
     */
    function wp_tinycolor_hsl_to_rgb($hsl_color)
    {
    }
    /**
     * @param string $color_str
     * @return array
     */
    function wp_tinycolor_string_to_rgb($color_str)
    {
    }
    /**
     * @param array $preset
     * @return string
     */
    function wp_get_duotone_filter_id($preset)
    {
    }
    /**
     * @param array $preset
     * @return string
     */
    function wp_get_duotone_filter_property($preset)
    {
    }
    /**
     * @param array $preset
     * @return string
     */
    function wp_get_duotone_filter_svg($preset)
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     */
    function wp_register_duotone_support($block_type)
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_duotone_support($block_content, $block)
    {
    }
    /**
     * @return string
     */
    function wp_get_global_styles_svg_filters()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_global_styles_render_svg_filters()
    {
    }
    /**
     * @param array $context
     * @param array $attributes
     * @param bool $is_sub_menu
     * @return array
     */
    function block_core_navigation_submenu_build_css_colors($context, $attributes, $is_sub_menu = \false)
    {
    }
    function _wp_theme_json_webfonts_handler()
    {
    }
    function print_embed_styles()
    {
    }
    /**
     * @phpstan-return void
     */
    function print_emoji_styles()
    {
    }
    function wp_admin_bar_header()
    {
    }
    function _admin_bar_bump_cb()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_update_https_detection_errors()
    {
    }
    /**
     * @param string $image
     * @param string $context
     * @return string
     */
    function wp_img_tag_add_decoding_attr($image, $context)
    {
    }
    /**
     * @param string $template_content
     * @return string
     */
    function _inject_theme_attribute_in_block_template_content($template_content)
    {
    }
    /**
     * @param string $template_content
     * @return string
     */
    function _remove_theme_attribute_in_block_template_content($template_content)
    {
    }
    /**
     * @phpstan-return void
     */
    function the_block_template_skip_link()
    {
    }
    function block_core_query_ensure_interactivity_dependency()
    {
    }
    function block_core_file_ensure_interactivity_dependency()
    {
    }
    function block_core_image_ensure_interactivity_dependency()
    {
    }
    /**
     * @param string $block_content
     * @param array $block
     * @return string
     */
    function wp_render_elements_support($block_content, $block)
    {
    }
    /**
     * @param array $parsed_block
     * @return array
     */
    function wp_interactivity_process_directives_of_interactive_blocks(array $parsed_block) : array
    {
    }
    /**
     * oEmbed API: Top-level oEmbed functionality
     *
     * @package WordPress
     * @subpackage oEmbed
     * @since 4.4.0
     */
    /**
     * @param string $id
     * @param string $regex
     * @param callable $callback
     * @param int $priority
     */
    function wp_embed_register_handler($id, $regex, $callback, $priority = 10)
    {
    }
    /**
     * @param string $id
     * @param int $priority
     */
    function wp_embed_unregister_handler($id, $priority = 10)
    {
    }
    /**
     * @param string $url
     * @phpstan-return array{
     *   0: int,
     *   1: int,
     * }
     */
    function wp_embed_defaults($url = '')
    {
    }
    /**
     * @param string $url
     * @phpstan-param array{
     *   width?: int|string,
     *   height?: int|string,
     *   discover?: bool,
     * } $args
     * @return string|false
     */
    function wp_oembed_get($url, $args = '')
    {
    }
    /**
     * @return \WP_oEmbed
     */
    function _wp_oembed_get_object()
    {
    }
    /**
     * @param string $format
     * @param string $provider
     * @param bool $regex
     */
    function wp_oembed_add_provider($format, $provider, $regex = \false)
    {
    }
    /**
     * @param string $format
     * @return bool
     */
    function wp_oembed_remove_provider($format)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_maybe_load_embeds()
    {
    }
    /**
     * @param array $matches
     * @param array $attr
     * @param string $url
     * @param array $rawattr
     * @return string
     */
    function wp_embed_handler_youtube($matches, $attr, $url, $rawattr)
    {
    }
    /**
     * @param array $matches
     * @param array $attr
     * @param string $url
     * @param array $rawattr
     * @return string
     */
    function wp_embed_handler_audio($matches, $attr, $url, $rawattr)
    {
    }
    /**
     * @param array $matches
     * @param array $attr
     * @param string $url
     * @param array $rawattr
     * @return string
     */
    function wp_embed_handler_video($matches, $attr, $url, $rawattr)
    {
    }
    function wp_oembed_register_route()
    {
    }
    function wp_oembed_add_discovery_links()
    {
    }
    function wp_oembed_add_host_js()
    {
    }
    /**
     * @param string $html
     * @return string
     */
    function wp_maybe_enqueue_oembed_host_js($html)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function get_post_embed_url($post = \null)
    {
    }
    /**
     * @param string $permalink
     * @param string $format
     * @return string
     */
    function get_oembed_endpoint_url($permalink = '', $format = 'json')
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @param int|\WP_Post $post
     * @return string|false
     */
    function get_post_embed_html($width, $height, $post = \null)
    {
    }
    /**
     * @param \WP_Post|int $post
     * @param int $width
     * @return array|false
     */
    function get_oembed_response_data($post, $width)
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return object|false
     */
    function get_oembed_response_data_for_url($url, $args)
    {
    }
    /**
     * @param array $data
     * @param \WP_Post $post
     * @param int $width
     * @param int $height
     * @return array
     */
    function get_oembed_response_data_rich($data, $post, $width, $height)
    {
    }
    /**
     * @phpstan-param 'json'|'xml' $format
     * @phpstan-return 'xml'|'json'
     */
    function wp_oembed_ensure_format($format)
    {
    }
    /**
     * @param bool $served
     * @param \WP_HTTP_Response $result
     * @param \WP_REST_Request $request
     * @param \WP_REST_Server $server
     * @return true
     */
    function _oembed_rest_pre_serve_request($served, $result, $request, $server)
    {
    }
    /**
     * @param array $data
     * @param \SimpleXMLElement $node
     * @return string|false
     */
    function _oembed_create_xml($data, $node = \null)
    {
    }
    /**
     * @param string $result
     * @param object $data
     * @param string $url
     * @return string
     */
    function wp_filter_oembed_iframe_title_attribute($result, $data, $url)
    {
    }
    /**
     * @param string $result
     * @param object $data
     * @param string $url
     * @return string
     */
    function wp_filter_oembed_result($result, $data, $url)
    {
    }
    /**
     * @param string $more_string
     * @return string
     */
    function wp_embed_excerpt_more($more_string)
    {
    }
    function the_excerpt_embed()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_embed_excerpt_attachment($content)
    {
    }
    function enqueue_embed_scripts()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_embed_styles()
    {
    }
    function print_embed_scripts()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function _oembed_filter_feed_content($content)
    {
    }
    /**
     * @phpstan-return void
     */
    function print_embed_comments_button()
    {
    }
    /**
     * @phpstan-return void
     */
    function print_embed_sharing_button()
    {
    }
    /**
     * @phpstan-return void
     */
    function print_embed_sharing_dialog()
    {
    }
    function the_embed_site_title()
    {
    }
    /**
     * @param null|string $result
     * @param string $url
     * @param array $args
     * @return null|string
     */
    function wp_filter_pre_oembed_result($result, $url, $args)
    {
    }
    /**
     * Error Protection API: Functions
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * @return \WP_Paused_Extensions_Storage
     */
    function wp_paused_plugins()
    {
    }
    /**
     * @return \WP_Paused_Extensions_Storage
     */
    function wp_paused_themes()
    {
    }
    /**
     * @param array $error
     * @return string
     */
    function wp_get_extension_error_description($error)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_register_fatal_error_handler()
    {
    }
    /**
     * @return bool
     */
    function wp_is_fatal_error_handler_enabled()
    {
    }
    /**
     * @return \WP_Recovery_Mode
     */
    function wp_recovery_mode()
    {
    }
    /**
     * WordPress Feed API
     *
     * Many of the functions used in here belong in The Loop, or The Loop for the
     * Feeds.
     *
     * @package WordPress
     * @subpackage Feed
     * @since 2.1.0
     */
    /**
     * @param string $show
     * @return string
     * @param string $show
     */
    function get_bloginfo_rss($show = '')
    {
    }
    /**
     * @param string $show
     * @param string $show
     */
    function bloginfo_rss($show = '')
    {
    }
    /**
     * @return string
     */
    function get_default_feed()
    {
    }
    /**
     * @param string $deprecated
     * @return string
     */
    function get_wp_title_rss($deprecated = '&#8211;')
    {
    }
    /**
     * @param string $deprecated
     */
    function wp_title_rss($deprecated = '&#8211;')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_title_rss($post = 0)
    {
    }
    function the_title_rss()
    {
    }
    /**
     * @param string $feed_type
     * @return string
     */
    function get_the_content_feed($feed_type = \null)
    {
    }
    /**
     * @param string $feed_type
     */
    function the_content_feed($feed_type = \null)
    {
    }
    function the_excerpt_rss()
    {
    }
    function the_permalink_rss()
    {
    }
    function comments_link_feed()
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     */
    function comment_guid($comment_id = \null)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string|false
     */
    function get_comment_guid($comment_id = \null)
    {
    }
    /**
     * @param int|\WP_Comment $comment
     */
    function comment_link($comment = \null)
    {
    }
    /**
     * @return string
     */
    function get_comment_author_rss()
    {
    }
    function comment_author_rss()
    {
    }
    function comment_text_rss()
    {
    }
    /**
     * @param string $type
     * @return string
     */
    function get_the_category_rss($type = \null)
    {
    }
    /**
     * @param string $type
     */
    function the_category_rss($type = \null)
    {
    }
    function html_type_rss()
    {
    }
    /**
     * @phpstan-return void
     */
    function rss_enclosure()
    {
    }
    /**
     * @phpstan-return void
     */
    function atom_enclosure()
    {
    }
    /**
     * @param string $data
     * @return array
     */
    function prep_atom_text_construct($data)
    {
    }
    function atom_site_icon()
    {
    }
    function rss2_site_icon()
    {
    }
    /**
     * @return string
     */
    function get_self_link()
    {
    }
    function self_link()
    {
    }
    /**
     * @param string $format
     * @return string|false
     */
    function get_feed_build_date($format)
    {
    }
    /**
     * @param string $type
     * @return string
     */
    function feed_content_type($type = '')
    {
    }
    /**
     * @param string|string[] $url
     * @return \SimplePie|\WP_Error
     */
    function fetch_feed($url)
    {
    }
    /**
     * Fonts functions.
     *
     * @package    WordPress
     * @subpackage Fonts
     * @since      6.4.0
     */
    /**
     * @phpstan-param array[]<int|string, array{
     * ?: array<array-key, array{
     *     font-family: string,
     *     src: string|string[],
     *     font-style?: string,
     *     font-weight?: string,
     *     font-display?: string,
     *     ascent-override?: string,
     *     descent-override?: string,
     *     font-stretch?: string,
     *     font-variant?: string,
     *     font-feature-settings?: string,
     *     font-variation-settings?: string,
     *     line-gap-override?: string,
     *     size-adjust?: string,
     *     unicode-range?: string,
     * }>,
     * }> $fonts
     * @phpstan-return void
     */
    function wp_print_font_faces($fonts = array())
    {
    }
    /**
     * @param string $slug
     * @phpstan-param array{
     *   name?: string,
     *   description?: string,
     *   font_families?: array|string,
     *   categories?: array,
     * } $args
     * @return \WP_Font_Collection|\WP_Error
     */
    function wp_register_font_collection(string $slug, array $args)
    {
    }
    /**
     * @param string $slug
     * @return bool
     */
    function wp_unregister_font_collection(string $slug)
    {
    }
    /**
     * @return array
     */
    function wp_get_font_dir()
    {
    }
    /**
     * @param bool $create_dir
     * @phpstan-return array{
     *   path: string,
     *   url: string,
     *   subdir: string,
     *   basedir: string,
     *   baseurl: string,
     *   error: string|false,
     * }
     */
    function wp_font_dir($create_dir = \true)
    {
    }
    /**
     * @param string $font_dir
     * @return string
     */
    function _wp_filter_font_directory($font_dir)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _wp_after_delete_font_family($post_id, $post)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _wp_before_delete_font_face($post_id, $post)
    {
    }
    function _wp_register_default_font_collections()
    {
    }
    /**
     * Main WordPress Formatting API.
     *
     * Handles many functions for formatting output.
     *
     * @package WordPress
     */
    /**
     * @param string $text
     * @param bool $reset
     * @return string
     */
    function wptexturize($text, $reset = \false)
    {
    }
    /**
     * @param string $haystack
     * @param string $needle
     * @param string $prime
     * @param string $open_quote
     * @param string $close_quote
     * @return string
     */
    function wptexturize_primes($haystack, $needle, $prime, $open_quote, $close_quote)
    {
    }
    /**
     * @param string $text
     * @param string[] $stack
     * @param string[] $disabled_elements
     * @phpstan-return void
     */
    function _wptexturize_pushpop_element($text, &$stack, $disabled_elements)
    {
    }
    /**
     * @param string $text
     * @param bool $br
     * @return string
     */
    function wpautop($text, $br = \true)
    {
    }
    /**
     * @param string $input
     * @return string[]
     */
    function wp_html_split($input)
    {
    }
    /**
     * @return string
     */
    function get_html_split_regex()
    {
    }
    /**
     * @param string $shortcode_regex
     * @return string
     */
    function _get_wptexturize_split_regex($shortcode_regex = '')
    {
    }
    /**
     * @param string[] $tagnames
     * @return string
     */
    function _get_wptexturize_shortcode_regex($tagnames)
    {
    }
    /**
     * @param string $haystack
     * @param array $replace_pairs
     * @return string
     */
    function wp_replace_in_html_tags($haystack, $replace_pairs)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _autop_newline_preservation_helper($matches)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function shortcode_unautop($text)
    {
    }
    /**
     * @param string $str
     * @return bool
     */
    function seems_utf8($str)
    {
    }
    /**
     * @param string $text
     * @param int|string $quote_style
     * @param false|string $charset
     * @param bool $double_encode
     * @return string
     */
    function _wp_specialchars($text, $quote_style = \ENT_NOQUOTES, $charset = \false, $double_encode = \false)
    {
    }
    /**
     * @param string $text
     * @param string|int $quote_style
     * @return string
     */
    function wp_specialchars_decode($text, $quote_style = \ENT_NOQUOTES)
    {
    }
    /**
     * @param string $text
     * @param bool $strip
     * @return string
     */
    function wp_check_invalid_utf8($text, $strip = \false)
    {
    }
    /**
     * @param string $utf8_string
     * @param int $length
     * @param bool $encode_ascii_characters
     * @return string
     */
    function utf8_uri_encode($utf8_string, $length = 0, $encode_ascii_characters = \false)
    {
    }
    /**
     * @param string $text
     * @param string $locale
     * @return string
     */
    function remove_accents($text, $locale = '')
    {
    }
    /**
     * @param string $filename
     * @return string
     */
    function sanitize_file_name($filename)
    {
    }
    /**
     * @param string $username
     * @param bool $strict
     * @return string
     */
    function sanitize_user($username, $strict = \false)
    {
    }
    /**
     * @param string $key
     * @return string
     */
    function sanitize_key($key)
    {
    }
    /**
     * @param string $title
     * @param string $fallback_title
     * @param string $context
     * @return string
     */
    function sanitize_title($title, $fallback_title = '', $context = 'save')
    {
    }
    /**
     * @param string $title
     * @return string
     */
    function sanitize_title_for_query($title)
    {
    }
    /**
     * @param string $title
     * @param string $raw_title
     * @param string $context
     * @return string
     */
    function sanitize_title_with_dashes($title, $raw_title = '', $context = 'display')
    {
    }
    /**
     * @param string $orderby
     * @return string|false
     */
    function sanitize_sql_orderby($orderby)
    {
    }
    /**
     * @param string $classname
     * @param string $fallback
     * @return string
     */
    function sanitize_html_class($classname, $fallback = '')
    {
    }
    /**
     * @param string $locale_name
     * @return string
     */
    function sanitize_locale_name($locale_name)
    {
    }
    /**
     * @param string $content
     * @param string $deprecated
     * @return string
     */
    function convert_chars($content, $deprecated = '')
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function convert_invalid_entities($content)
    {
    }
    /**
     * @param string $text
     * @param bool $force
     * @return string
     */
    function balanceTags($text, $force = \false)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function force_balance_tags($text)
    {
    }
    /**
     * @param string $content
     * @param bool $rich_text
     * @return string
     */
    function format_to_edit($content, $rich_text = \false)
    {
    }
    /**
     * @param int $number
     * @param int $threshold
     * @return string
     */
    function zeroise($number, $threshold)
    {
    }
    /**
     * @param string $value
     * @return string
     */
    function backslashit($value)
    {
    }
    /**
     * @param string $value
     * @return string
     */
    function trailingslashit($value)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function untrailingslashit($value)
    {
    }
    /**
     * @param string|array $gpc
     * @return string|array
     * @phpstan-template T
     * @phpstan-param T $gpc
     * @phpstan-return T
     */
    function addslashes_gpc($gpc)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function stripslashes_deep($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function stripslashes_from_strings_only($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function urlencode_deep($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function rawurlencode_deep($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function urldecode_deep($value)
    {
    }
    /**
     * @param string $email_address
     * @param int $hex_encoding
     * @return string
     */
    function antispambot($email_address, $hex_encoding = 0)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _make_url_clickable_cb($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _make_web_ftp_clickable_cb($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _make_email_clickable_cb($matches)
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function _make_clickable_rel_attr($url)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function make_clickable($text)
    {
    }
    /**
     * @param string $text
     * @param int $goal
     * @return array
     */
    function _split_str_by_whitespace($text, $goal)
    {
    }
    /**
     * @param array $matches
     * @param string $rel
     * @return string
     */
    function wp_rel_callback($matches, $rel)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function wp_rel_nofollow($text)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_rel_nofollow_callback($matches)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function wp_rel_ugc($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function wp_targeted_link_rel($text)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_targeted_link_rel_callback($matches)
    {
    }
    function wp_init_targeted_link_rel_filters()
    {
    }
    function wp_remove_targeted_link_rel_filters()
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function translate_smiley($matches)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function convert_smilies($text)
    {
    }
    /**
     * @param string $email
     * @param bool $deprecated
     * @return string|false
     */
    function is_email($email, $deprecated = \false)
    {
    }
    /**
     * @param string $subject
     * @return string
     */
    function wp_iso_descrambler($subject)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _wp_iso_convert($matches)
    {
    }
    /**
     * @param string $date_string
     * @param string $format
     * @return string
     */
    function get_gmt_from_date($date_string, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * @param string $date_string
     * @param string $format
     * @return string
     */
    function get_date_from_gmt($date_string, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * @param string $timezone
     * @return int|float
     */
    function iso8601_timezone_to_offset($timezone)
    {
    }
    /**
     * @param string $date_string
     * @param string $timezone
     * @return string|false
     */
    function iso8601_to_datetime($date_string, $timezone = 'user')
    {
    }
    /**
     * @param string $email
     * @return string
     */
    function sanitize_email($email)
    {
    }
    /**
     * @param int $from
     * @param int $to
     * @return string
     */
    function human_time_diff($from, $to = 0)
    {
    }
    /**
     * @param string $text
     * @param \WP_Post|object|int $post
     * @return string
     */
    function wp_trim_excerpt($text = '', $post = \null)
    {
    }
    /**
     * @param string $text
     * @param int $num_words
     * @param string $more
     * @return string
     */
    function wp_trim_words($text, $num_words = 55, $more = \null)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function ent2ncr($text)
    {
    }
    /**
     * @param string $text
     * @phpstan-param 'html'|'tinymce' $default_editor
     * @return string
     */
    function format_for_editor($text, $default_editor = \null)
    {
    }
    /**
     * @param string|array $search
     * @param string $subject
     * @return string
     */
    function _deep_replace($search, $subject)
    {
    }
    /**
     * @param string|array $data
     * @return string|array
     */
    function esc_sql($data)
    {
    }
    /**
     * @param string $url
     * @param string[] $protocols
     * @param string $_context
     * @return string
     */
    function esc_url($url, $protocols = \null, $_context = 'display')
    {
    }
    /**
     * @param string $url
     * @param string[] $protocols
     * @return string
     */
    function esc_url_raw($url, $protocols = \null)
    {
    }
    /**
     * @param string $url
     * @param string[] $protocols
     * @return string
     */
    function sanitize_url($url, $protocols = \null)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function htmlentities2($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function esc_js($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function esc_html($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function esc_attr($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function esc_textarea($text)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function esc_xml($text)
    {
    }
    /**
     * @param string $tag_name
     * @return string
     */
    function tag_escape($tag_name)
    {
    }
    /**
     * @param string $link
     * @return string
     */
    function wp_make_link_relative($link)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @return mixed
     */
    function sanitize_option($option, $value)
    {
    }
    /**
     * @param mixed $value
     * @param callable $callback
     * @return mixed
     */
    function map_deep($value, $callback)
    {
    }
    /**
     * @param string $input_string
     * @param array $result
     */
    function wp_parse_str($input_string, &$result)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_pre_kses_less_than($content)
    {
    }
    /**
     * @param string[] $matches
     * @return string
     */
    function wp_pre_kses_less_than_callback($matches)
    {
    }
    /**
     * @param string $content
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_pre_kses_block_attributes($content, $allowed_html, $allowed_protocols)
    {
    }
    /**
     * @param string $pattern
     * @param mixed $args
     * @return string
     */
    function wp_sprintf($pattern, ...$args)
    {
    }
    /**
     * @param string $pattern
     * @param array $args
     * @return string
     */
    function wp_sprintf_l($pattern, $args)
    {
    }
    /**
     * @param string $str
     * @param int $count
     * @param string $more
     * @return string
     */
    function wp_html_excerpt($str, $count, $more = \null)
    {
    }
    /**
     * @param string $content
     * @param string $base
     * @param array $attrs
     * @return string
     */
    function links_add_base_url($content, $base, $attrs = array('src', 'href'))
    {
    }
    /**
     * @param string $m
     * @return string
     */
    function _links_add_base($m)
    {
    }
    /**
     * @param string $content
     * @param string $target
     * @param string[] $tags
     * @return string
     */
    function links_add_target($content, $target = '_blank', $tags = array('a'))
    {
    }
    /**
     * @param string $m
     * @return string
     */
    function _links_add_target($m)
    {
    }
    /**
     * @param string $str
     * @return string
     */
    function normalize_whitespace($str)
    {
    }
    /**
     * @param string $text
     * @param bool $remove_breaks
     * @return string
     */
    function wp_strip_all_tags($text, $remove_breaks = \false)
    {
    }
    /**
     * @param string $str
     * @return string
     */
    function sanitize_text_field($str)
    {
    }
    /**
     * @param string $str
     * @return string
     */
    function sanitize_textarea_field($str)
    {
    }
    /**
     * @param string $str
     * @param bool $keep_newlines
     * @return string
     */
    function _sanitize_text_fields($str, $keep_newlines = \false)
    {
    }
    /**
     * @param string $path
     * @param string $suffix
     * @return string
     */
    function wp_basename($path, $suffix = '')
    {
    }
    // phpcs:disable WordPress.WP.CapitalPDangit.MisspelledInComment,WordPress.WP.CapitalPDangit.MisspelledInText,WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid -- 8-)
    /**
     * @param string $text
     * @return string
     */
    function capital_P_dangit($text)
    {
    }
    // phpcs:enable
    /**
     * @param string $mime_type
     * @return string
     */
    function sanitize_mime_type($mime_type)
    {
    }
    /**
     * @param string $to_ping
     * @return string
     */
    function sanitize_trackback_urls($to_ping)
    {
    }
    /**
     * @param string|array $value
     * @return string|array
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function wp_slash($value)
    {
    }
    /**
     * @param string|array $value
     * @return string|array
     * @phpstan-template T
     * @phpstan-param T $value
     * @phpstan-return T
     */
    function wp_unslash($value)
    {
    }
    /**
     * @param string $content
     * @return string|false
     */
    function get_url_in_content($content)
    {
    }
    /**
     * @return string
     */
    function wp_spaces_regexp()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_emoji_styles()
    {
    }
    /**
     * @phpstan-return void
     */
    function print_emoji_detection_script()
    {
    }
    function _print_emoji_detection_script()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_encode_emoji($content)
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function wp_staticize_emoji($text)
    {
    }
    /**
     * @param array $mail
     * @return array
     */
    function wp_staticize_emoji_for_email($mail)
    {
    }
    /**
     * @phpstan-param 'partials'|'entities' $type
     * @return array
     */
    function _wp_emoji_list($type = 'entities')
    {
    }
    /**
     * @param string $url
     * @param int $length
     * @return string
     */
    function url_shorten($url, $length = 35)
    {
    }
    /**
     * @param string $color
     * @return string|void
     */
    function sanitize_hex_color($color)
    {
    }
    /**
     * @param string $color
     * @return string|null
     */
    function sanitize_hex_color_no_hash($color)
    {
    }
    /**
     * @param string $color
     * @return string
     */
    function maybe_hash_hex_color($color)
    {
    }
    /**
     * @param string $format
     * @param string $date
     * @param bool $translate
     * @return string|int|false
     * @phpstan-return ($format is 'G'|'U' ? int|false : string|false)
     */
    function mysql2date($format, $date, $translate = \true)
    {
    }
    /**
     * @param string $type
     * @param int|bool $gmt
     * @return int|string
     * @phpstan-return ($type is 'timestamp'|'U' ? int : string)
     */
    function current_time($type, $gmt = 0)
    {
    }
    /**
     * @return \DateTimeImmutable
     */
    function current_datetime()
    {
    }
    /**
     * @return string
     */
    function wp_timezone_string()
    {
    }
    /**
     * @return \DateTimeZone
     */
    function wp_timezone()
    {
    }
    /**
     * @param string $format
     * @param int|bool $timestamp_with_offset
     * @param bool $gmt
     * @return string
     */
    function date_i18n($format, $timestamp_with_offset = \false, $gmt = \false)
    {
    }
    /**
     * @param string $format
     * @param int $timestamp
     * @param \DateTimeZone $timezone
     * @return string|false
     */
    function wp_date($format, $timestamp = \null, $timezone = \null)
    {
    }
    /**
     * @param string $date
     * @param string $format
     * @return string
     */
    function wp_maybe_decline_date($date, $format = '')
    {
    }
    /**
     * @param float $number
     * @param int $decimals
     * @return string
     */
    function number_format_i18n($number, $decimals = 0)
    {
    }
    /**
     * @param int|string $bytes
     * @param int $decimals
     * @return string|false
     */
    function size_format($bytes, $decimals = 0)
    {
    }
    /**
     * @param string $duration
     * @return string|false
     */
    function human_readable_duration($duration = '')
    {
    }
    /**
     * @param string $mysqlstring
     * @param int|string $start_of_week
     * @phpstan-return array{
     *   start: int,
     *   end: int,
     * }
     */
    function get_weekstartend($mysqlstring, $start_of_week = '')
    {
    }
    /**
     * @param string|array|object $data
     * @return mixed
     */
    function maybe_serialize($data)
    {
    }
    /**
     * @param string $data
     * @return mixed
     */
    function maybe_unserialize($data)
    {
    }
    /**
     * @param string $data
     * @param bool $strict
     * @return bool
     */
    function is_serialized($data, $strict = \true)
    {
    }
    /**
     * @param string $data
     * @return bool
     */
    function is_serialized_string($data)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function xmlrpc_getposttitle($content)
    {
    }
    /**
     * @param string $content
     * @return string|array
     */
    function xmlrpc_getpostcategory($content)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function xmlrpc_removepostdata($content)
    {
    }
    /**
     * @param string $content
     * @return string[]
     */
    function wp_extract_urls($content)
    {
    }
    /**
     * @param string|null $content
     * @param int|\WP_Post $post
     * @return void|false
     */
    function do_enclose($content, $post)
    {
    }
    /**
     * @param string $url
     * @param bool $deprecated
     * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary|false
     */
    function wp_get_http_headers($url, $deprecated = \false)
    {
    }
    /**
     * @return int
     */
    function is_new_day()
    {
    }
    /**
     * @param array $data
     * @return string
     */
    function build_query($data)
    {
    }
    /**
     * @param array|object $data
     * @param string $prefix
     * @param string $sep
     * @param string $key
     * @param bool $urlencode
     * @return string
     */
    function _http_build_query($data, $prefix = \null, $sep = \null, $key = '', $urlencode = \true)
    {
    }
    /**
     * @param string|array $key
     * @param string $value
     * @param string $url
     * @return string
     */
    function add_query_arg(...$args)
    {
    }
    /**
     * @param string|string[] $key
     * @param false|string $query
     * @return string
     */
    function remove_query_arg($key, $query = \false)
    {
    }
    /**
     * @return string[]
     */
    function wp_removable_query_args()
    {
    }
    /**
     * @param array $input_array
     * @return array
     */
    function add_magic_quotes($input_array)
    {
    }
    /**
     * @param string $uri
     * @return string|false
     */
    function wp_remote_fopen($uri)
    {
    }
    /**
     * @param string|array $query_vars
     */
    function wp($query_vars = '')
    {
    }
    /**
     * @param int $code
     * @return string
     */
    function get_status_header_desc($code)
    {
    }
    /**
     * @param int $code
     * @param string $description
     * @phpstan-return void
     */
    function status_header($code, $description = '')
    {
    }
    /**
     * @return array
     */
    function wp_get_nocache_headers()
    {
    }
    /**
     * @phpstan-return void
     */
    function nocache_headers()
    {
    }
    function cache_javascript_headers()
    {
    }
    /**
     * @return int
     */
    function get_num_queries()
    {
    }
    /**
     * @param string $yn
     * @return bool
     */
    function bool_from_yn($yn)
    {
    }
    function do_feed()
    {
    }
    function do_feed_rdf()
    {
    }
    function do_feed_rss()
    {
    }
    /**
     * @param bool $for_comments
     */
    function do_feed_rss2($for_comments)
    {
    }
    /**
     * @param bool $for_comments
     */
    function do_feed_atom($for_comments)
    {
    }
    function do_robots()
    {
    }
    /**
     * @phpstan-return never
     */
    function do_favicon()
    {
    }
    /**
     * @return bool
     */
    function is_blog_installed()
    {
    }
    /**
     * @param string $actionurl
     * @param int|string $action
     * @param string $name
     * @return string
     */
    function wp_nonce_url($actionurl, $action = -1, $name = '_wpnonce')
    {
    }
    /**
     * @param int|string $action
     * @param string $name
     * @param bool $referer
     * @param bool $display
     * @return string
     */
    function wp_nonce_field($action = -1, $name = '_wpnonce', $referer = \true, $display = \true)
    {
    }
    /**
     * @param bool $display
     * @return string
     */
    function wp_referer_field($display = \true)
    {
    }
    /**
     * @param bool $display
     * @param string $jump_back_to
     * @return string
     */
    function wp_original_referer_field($display = \true, $jump_back_to = 'current')
    {
    }
    /**
     * @return string|false
     */
    function wp_get_referer()
    {
    }
    /**
     * @return string|false
     */
    function wp_get_raw_referer()
    {
    }
    /**
     * @return string|false
     */
    function wp_get_original_referer()
    {
    }
    /**
     * @param string $target
     * @return bool
     */
    function wp_mkdir_p($target)
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function path_is_absolute($path)
    {
    }
    /**
     * @param string $base
     * @param string $path
     * @return string
     */
    function path_join($base, $path)
    {
    }
    /**
     * @param string $path
     * @return string
     */
    function wp_normalize_path($path)
    {
    }
    /**
     * @return string
     */
    function get_temp_dir()
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function wp_is_writable($path)
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function win_is_writable($path)
    {
    }
    /**
     * @return array
     */
    function wp_get_upload_dir()
    {
    }
    /**
     * @param string|null $time
     * @param bool $create_dir
     * @param bool $refresh_cache
     * @phpstan-return array{
     *   path: string,
     *   url: string,
     *   subdir: string,
     *   basedir: string,
     *   baseurl: string,
     *   error: string|false,
     * }
     */
    function wp_upload_dir($time = \null, $create_dir = \true, $refresh_cache = \false)
    {
    }
    /**
     * @param string|null $time
     * @return array
     */
    function _wp_upload_dir($time = \null)
    {
    }
    /**
     * @param string $dir
     * @param string $filename
     * @param callable $unique_filename_callback
     * @return string
     */
    function wp_unique_filename($dir, $filename, $unique_filename_callback = \null)
    {
    }
    /**
     * @param string[] $filenames
     * @param string $dir
     * @param array $files
     * @return bool
     */
    function _wp_check_alternate_file_names($filenames, $dir, $files)
    {
    }
    /**
     * @param string $filename
     * @param array $files
     * @return bool
     */
    function _wp_check_existing_file_names($filename, $files)
    {
    }
    /**
     * @param string $name
     * @param null|string $deprecated
     * @param string $bits
     * @param string|null $time
     * @phpstan-return array{
     *   file: string,
     *   url: string,
     *   type: string,
     *   error: string|false,
     * }
     */
    function wp_upload_bits($name, $deprecated, $bits, $time = \null)
    {
    }
    /**
     * @param string $ext
     * @return string|void
     */
    function wp_ext2type($ext)
    {
    }
    /**
     * @param string $mime_type
     * @return string|false
     */
    function wp_get_default_extension_for_mime_type($mime_type)
    {
    }
    /**
     * @param string $filename
     * @param string[]|null $mimes
     * @phpstan-return array{
     *   ext: string|false,
     *   type: string|false,
     * }
     */
    function wp_check_filetype($filename, $mimes = \null)
    {
    }
    /**
     * @param string $file
     * @param string $filename
     * @param string[]|null $mimes
     * @phpstan-return array{
     *   ext: string|false,
     *   type: string|false,
     *   proper_filename: string|false,
     * }
     */
    function wp_check_filetype_and_ext($file, $filename, $mimes = \null)
    {
    }
    /**
     * @param string $file
     * @return string|false
     */
    function wp_get_image_mime($file)
    {
    }
    /**
     * @return string[]
     */
    function wp_get_mime_types()
    {
    }
    /**
     * @return array[]
     */
    function wp_get_ext_types()
    {
    }
    /**
     * @param string $path
     * @return int
     */
    function wp_filesize($path)
    {
    }
    /**
     * @param int|\WP_User $user
     * @return string[]
     */
    function get_allowed_mime_types($user = \null)
    {
    }
    /**
     * @param string $action
     */
    function wp_nonce_ays($action)
    {
    }
    /**
     * @param string|\WP_Error $message
     * @param string|int $title
     * @phpstan-param int|array{
     *   response?: int,
     *   link_url?: string,
     *   link_text?: string,
     *   back_link?: bool,
     *   text_direction?: string,
     *   charset?: string,
     *   code?: string,
     *   exit?: bool,
     * } $args
     */
    function wp_die($message = '', $title = '', $args = array())
    {
    }
    /**
     * @param string|\WP_Error $message
     * @param string $title
     * @param string|array $args
     */
    function _default_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _ajax_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _json_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _jsonp_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _xmlrpc_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _xml_wp_die_handler($message, $title = '', $args = array())
    {
    }
    /**
     * @param string $message
     * @param string $title
     * @param string|array $args
     */
    function _scalar_wp_die_handler($message = '', $title = '', $args = array())
    {
    }
    /**
     * @param string|\WP_Error $message
     * @param string $title
     * @param string|array $args
     * @phpstan-return array{
     *   0: string,
     *   1: string,
     *   2: array,
     * }
     */
    function _wp_die_process_input($message, $title = '', $args = array())
    {
    }
    /**
     * @param mixed $value
     * @param int $flags
     * @param int $depth
     * @return string|false
     */
    function wp_json_encode($value, $flags = 0, $depth = 512)
    {
    }
    /**
     * @param mixed $value
     * @param int $depth
     * @return mixed
     */
    function _wp_json_sanity_check($value, $depth)
    {
    }
    /**
     * @param string $input_string
     * @return string
     */
    function _wp_json_convert_string($input_string)
    {
    }
    /**
     * @param mixed $value
     * @return bool|int|float|null|string|array
     */
    function _wp_json_prepare_data($value)
    {
    }
    /**
     * @param mixed $response
     * @param int $status_code
     * @param int $flags
     */
    function wp_send_json($response, $status_code = \null, $flags = 0)
    {
    }
    /**
     * @param mixed $value
     * @param int $status_code
     * @param int $flags
     * @phpstan-return never
     */
    function wp_send_json_success($value = \null, $status_code = \null, $flags = 0)
    {
    }
    /**
     * @param mixed $value
     * @param int $status_code
     * @param int $flags
     * @phpstan-return never
     */
    function wp_send_json_error($value = \null, $status_code = \null, $flags = 0)
    {
    }
    /**
     * @param string $callback
     * @return bool
     */
    function wp_check_jsonp_callback($callback)
    {
    }
    /**
     * @param string $filename
     * @phpstan-param array{
     *   associative?: bool,
     * } $options
     * @return mixed
     */
    function wp_json_file_decode($filename, $options = array())
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function _config_wp_home($url = '')
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function _config_wp_siteurl($url = '')
    {
    }
    function _delete_option_fresh_site()
    {
    }
    /**
     * @param array $mce_init
     * @return array
     */
    function _mce_set_direction($mce_init)
    {
    }
    /**
     * @return bool
     */
    function wp_is_serving_rest_request()
    {
    }
    /**
     * @phpstan-return void
     */
    function smilies_init()
    {
    }
    /**
     * @param string|array|object $args
     * @param array $defaults
     * @return array
     */
    function wp_parse_args($args, $defaults = array())
    {
    }
    /**
     * @param array|string $input_list
     * @return array
     */
    function wp_parse_list($input_list)
    {
    }
    /**
     * @param array|string $input_list
     * @return int[]
     */
    function wp_parse_id_list($input_list)
    {
    }
    /**
     * @param array|string $input_list
     * @return string[]
     */
    function wp_parse_slug_list($input_list)
    {
    }
    /**
     * @param array $input_array
     * @param array $keys
     * @return array
     */
    function wp_array_slice_assoc($input_array, $keys)
    {
    }
    /**
     * @param array $input_array
     */
    function wp_recursive_ksort(&$input_array)
    {
    }
    /**
     * @param array $input_array
     * @param array $path
     * @param mixed $default_value
     * @return mixed
     */
    function _wp_array_get($input_array, $path, $default_value = \null)
    {
    }
    /**
     * @param array $input_array
     * @param array $path
     * @param mixed $value
     * @phpstan-return void
     */
    function _wp_array_set(&$input_array, $path, $value = \null)
    {
    }
    /**
     * @param string $input_string
     * @return string
     */
    function _wp_to_kebab_case($input_string)
    {
    }
    /**
     * @param mixed $data
     * @return bool
     */
    function wp_is_numeric_array($data)
    {
    }
    /**
     * @param array $input_list
     * @param array $args
     * @param string $operator
     * @param bool|string $field
     * @return array
     */
    function wp_filter_object_list($input_list, $args = array(), $operator = 'and', $field = \false)
    {
    }
    /**
     * @param array $input_list
     * @param array $args
     * @param string $operator
     * @return array
     */
    function wp_list_filter($input_list, $args = array(), $operator = 'AND')
    {
    }
    /**
     * @param array $input_list
     * @param int|string $field
     * @param int|string $index_key
     * @return array
     */
    function wp_list_pluck($input_list, $field, $index_key = \null)
    {
    }
    /**
     * @param array $input_list
     * @param string|array $orderby
     * @phpstan-param 'ASC'|'DESC' $order
     * @param bool $preserve_keys
     * @return array
     */
    function wp_list_sort($input_list, $orderby = array(), $order = 'ASC', $preserve_keys = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_maybe_load_widgets()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_widgets_add_menu()
    {
    }
    function wp_ob_end_flush_all()
    {
    }
    /**
     * @phpstan-return never
     */
    function dead_db()
    {
    }
    /**
     * @param mixed $maybeint
     * @return int
     */
    function absint($maybeint)
    {
    }
    /**
     * @param string $function_name
     * @param string $version
     * @param string $replacement
     */
    function _deprecated_function($function_name, $version, $replacement = '')
    {
    }
    /**
     * @param string $class_name
     * @param string $version
     * @param string $parent_class
     */
    function _deprecated_constructor($class_name, $version, $parent_class = '')
    {
    }
    /**
     * @param string $class_name
     * @param string $version
     * @param string $replacement
     */
    function _deprecated_class($class_name, $version, $replacement = '')
    {
    }
    /**
     * @param string $file
     * @param string $version
     * @param string $replacement
     * @param string $message
     */
    function _deprecated_file($file, $version, $replacement = '', $message = '')
    {
    }
    /**
     * @param string $function_name
     * @param string $version
     * @param string $message
     */
    function _deprecated_argument($function_name, $version, $message = '')
    {
    }
    /**
     * @param string $hook
     * @param string $version
     * @param string $replacement
     * @param string $message
     */
    function _deprecated_hook($hook, $version, $replacement = '', $message = '')
    {
    }
    /**
     * @param string $function_name
     * @param string $message
     * @param string $version
     */
    function _doing_it_wrong($function_name, $message, $version)
    {
    }
    /**
     * @param string $function_name
     * @param string $message
     * @param int $error_level
     * @phpstan-return void
     */
    function wp_trigger_error($function_name, $message, $error_level = \E_USER_NOTICE)
    {
    }
    /**
     * @return bool
     */
    function is_lighttpd_before_150()
    {
    }
    /**
     * @param string $mod
     * @param bool $default_value
     * @return bool
     */
    function apache_mod_loaded($mod, $default_value = \false)
    {
    }
    /**
     * @return bool
     */
    function iis7_supports_permalinks()
    {
    }
    /**
     * @param string $file
     * @param string[] $allowed_files
     * @return int
     */
    function validate_file($file, $allowed_files = array())
    {
    }
    /**
     * @param string|bool $force
     * @return bool
     */
    function force_ssl_admin($force = \null)
    {
    }
    /**
     * @return string
     */
    function wp_guess_url()
    {
    }
    /**
     * @param bool $suspend
     * @return bool
     */
    function wp_suspend_cache_addition($suspend = \null)
    {
    }
    /**
     * @param bool $suspend
     * @return bool
     */
    function wp_suspend_cache_invalidation($suspend = \true)
    {
    }
    /**
     * @param int $site_id
     * @param int $network_id
     * @return bool
     */
    function is_main_site($site_id = \null, $network_id = \null)
    {
    }
    /**
     * @param int $network_id
     * @return int
     */
    function get_main_site_id($network_id = \null)
    {
    }
    /**
     * @param int $network_id
     * @return bool
     */
    function is_main_network($network_id = \null)
    {
    }
    /**
     * @return int
     */
    function get_main_network_id()
    {
    }
    /**
     * @return bool
     */
    function is_site_meta_supported()
    {
    }
    /**
     * @return float|false
     */
    function wp_timezone_override_offset()
    {
    }
    /**
     * @param array $a
     * @param array $b
     * @return int
     */
    function _wp_timezone_choice_usort_callback($a, $b)
    {
    }
    /**
     * @param string $selected_zone
     * @param string $locale
     * @return string
     */
    function wp_timezone_choice($selected_zone, $locale = \null)
    {
    }
    /**
     * @param string $str
     * @return string
     */
    function _cleanup_header_comment($str)
    {
    }
    function wp_scheduled_delete()
    {
    }
    /**
     * @param string $file
     * @param array $default_headers
     * @param string $context
     * @return string[]
     */
    function get_file_data($file, $default_headers, $context = '')
    {
    }
    /**
     * @return true
     */
    function __return_true()
    {
    }
    /**
     * @return false
     */
    function __return_false()
    {
    }
    /**
     * @return int
     */
    function __return_zero()
    {
    }
    /**
     * @return array
     */
    function __return_empty_array()
    {
    }
    /**
     * @return null
     */
    function __return_null()
    {
    }
    /**
     * @return string
     */
    function __return_empty_string()
    {
    }
    function send_nosniff_header()
    {
    }
    /**
     * @param string $column
     * @return string
     */
    function _wp_mysql_week($column)
    {
    }
    /**
     * @param callable $callback
     * @param int $start
     * @param int $start_parent
     * @param array $callback_args
     * @return array
     */
    function wp_find_hierarchy_loop($callback, $start, $start_parent, $callback_args = array())
    {
    }
    /**
     * @param callable $callback
     * @param int $start
     * @param array $override
     * @param array $callback_args
     * @param bool $_return_loop
     * @return mixed
     */
    function wp_find_hierarchy_loop_tortoise_hare($callback, $start, $override = array(), $callback_args = array(), $_return_loop = \false)
    {
    }
    function send_frame_options_header()
    {
    }
    /**
     * @return string[]
     */
    function wp_allowed_protocols()
    {
    }
    /**
     * @param string $ignore_class
     * @param int $skip_frames
     * @param bool $pretty
     * @return string|array
     * @phpstan-return ($pretty is true ? string : list<string>)
     */
    function wp_debug_backtrace_summary($ignore_class = \null, $skip_frames = 0, $pretty = \true)
    {
    }
    /**
     * @param int[] $object_ids
     * @param string $cache_group
     * @return int[]
     */
    function _get_non_cached_ids($object_ids, $cache_group)
    {
    }
    /**
     * @param mixed $object_id
     * @return bool
     */
    function _validate_cache_id($object_id)
    {
    }
    /**
     * @return bool
     */
    function _device_can_upload()
    {
    }
    /**
     * @param string $path
     * @return bool
     */
    function wp_is_stream($path)
    {
    }
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @param string $source_date
     * @return bool
     */
    function wp_checkdate($month, $day, $year, $source_date)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_auth_check_load()
    {
    }
    function wp_auth_check_html()
    {
    }
    /**
     * @param array $response
     * @return array
     */
    function wp_auth_check($response)
    {
    }
    /**
     * @param string $tag
     * @return string
     */
    function get_tag_regex($tag)
    {
    }
    /**
     * @param ?string $blog_charset
     * @return bool
     */
    function is_utf8_charset($blog_charset = \null)
    {
    }
    /**
     * @param string $charset
     * @return string
     */
    function _canonical_charset($charset)
    {
    }
    /**
     * @param bool $reset
     * @phpstan-return void
     */
    function mbstring_binary_safe_encoding($reset = \false)
    {
    }
    function reset_mbstring_encoding()
    {
    }
    /**
     * @param mixed $value
     * @return bool
     */
    function wp_validate_boolean($value)
    {
    }
    /**
     * @param string $file
     */
    function wp_delete_file($file)
    {
    }
    /**
     * @param string $file
     * @param string $directory
     * @return bool
     */
    function wp_delete_file_from_directory($file, $directory)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_post_preview_js()
    {
    }
    /**
     * @param string $date_string
     * @return string
     */
    function mysql_to_rfc3339($date_string)
    {
    }
    /**
     * @param string $context
     * @return int|string|false
     */
    function wp_raise_memory_limit($context = 'admin')
    {
    }
    /**
     * @return string
     */
    function wp_generate_uuid4()
    {
    }
    /**
     * @param mixed $uuid
     * @param int $version
     * @return bool
     */
    function wp_is_uuid($uuid, $version = \null)
    {
    }
    /**
     * @param string $prefix
     * @return string
     */
    function wp_unique_id($prefix = '')
    {
    }
    /**
     * @param string $prefix
     * @return string
     */
    function wp_unique_prefixed_id($prefix = '')
    {
    }
    /**
     * @param string $group
     * @return string
     */
    function wp_cache_get_last_changed($group)
    {
    }
    /**
     * @param string $group
     * @return string
     */
    function wp_cache_set_last_changed($group)
    {
    }
    /**
     * @param string $old_email
     * @param string $new_email
     * @param string $option_name
     * @phpstan-return void
     */
    function wp_site_admin_email_change_notification($old_email, $new_email, $option_name)
    {
    }
    /**
     * @param string $ip_addr
     * @param bool $ipv6_fallback
     * @return string
     */
    function wp_privacy_anonymize_ip($ip_addr, $ipv6_fallback = \false)
    {
    }
    /**
     * @param string $type
     * @param string $data
     * @return string
     */
    function wp_privacy_anonymize_data($type, $data = '')
    {
    }
    /**
     * @return string
     */
    function wp_privacy_exports_dir()
    {
    }
    /**
     * @return string
     */
    function wp_privacy_exports_url()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_schedule_delete_old_privacy_export_files()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_privacy_delete_old_export_files()
    {
    }
    /**
     * @return string
     */
    function wp_get_update_php_url()
    {
    }
    /**
     * @return string
     */
    function wp_get_default_update_php_url()
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @param bool $display
     * @return string|void
     */
    function wp_update_php_annotation($before = '<p class="description">', $after = '</p>', $display = \true)
    {
    }
    /**
     * @return string
     */
    function wp_get_update_php_annotation()
    {
    }
    /**
     * @return string
     */
    function wp_get_direct_php_update_url()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_direct_php_update_button()
    {
    }
    /**
     * @return string
     */
    function wp_get_update_https_url()
    {
    }
    /**
     * @return string
     */
    function wp_get_default_update_https_url()
    {
    }
    /**
     * @return string
     */
    function wp_get_direct_update_https_url()
    {
    }
    /**
     * @param string $directory
     * @param int $max_execution_time
     * @return int|false|null
     */
    function get_dirsize($directory, $max_execution_time = \null)
    {
    }
    /**
     * @param string $directory
     * @param string|string[] $exclude
     * @param int $max_execution_time
     * @param array $directory_cache
     * @return int|false|null
     */
    function recurse_dirsize($directory, $exclude = \null, $max_execution_time = \null, &$directory_cache = \null)
    {
    }
    /**
     * @param string $path
     * @phpstan-return void
     */
    function clean_dirsize_cache($path)
    {
    }
    /**
     * @param string $required
     * @return bool
     */
    function is_wp_version_compatible($required)
    {
    }
    /**
     * @param string $required
     * @return bool
     */
    function is_php_version_compatible($required)
    {
    }
    /**
     * @param int|float $expected
     * @param int|float $actual
     * @param int|float $precision
     * @return bool
     */
    function wp_fuzzy_number_match($expected, $actual, $precision = 1)
    {
    }
    /**
     * @param string $message
     * @phpstan-param array{
     *   type?: string,
     *   dismissible?: bool,
     *   id?: string,
     *   additional_classes?: string[],
     *   attributes?: string[],
     *   paragraph_wrap?: bool,
     * } $args
     * @return string
     */
    function wp_get_admin_notice($message, $args = array())
    {
    }
    /**
     * @param string $message
     * @phpstan-param array{
     *   type?: string,
     *   dismissible?: bool,
     *   id?: string,
     *   additional_classes?: string[],
     *   attributes?: string[],
     *   paragraph_wrap?: bool,
     * } $args
     */
    function wp_admin_notice($message, $args = array())
    {
    }
    /**
     * Dependencies API: Scripts functions
     *
     * @since 2.6.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * @return \WP_Scripts
     */
    function wp_scripts()
    {
    }
    /**
     * @param string $function_name
     * @param string $handle
     * @phpstan-return void
     */
    function _wp_scripts_maybe_doing_it_wrong($function_name, $handle = '')
    {
    }
    /**
     * @param string|string[]|false $handles
     * @return string[]
     */
    function wp_print_scripts($handles = \false)
    {
    }
    /**
     * @param string $handle
     * @param string $data
     * @param string $position
     * @return bool
     */
    function wp_add_inline_script($handle, $data, $position = 'after')
    {
    }
    /**
     * @param string $handle
     * @param string|false $src
     * @param string[] $deps
     * @param string|bool|null $ver
     * @phpstan-param bool|array{
     *   strategy?: string,
     *   in_footer?: bool,
     * } $args
     * @return bool
     */
    function wp_register_script($handle, $src, $deps = array(), $ver = \false, $args = array())
    {
    }
    /**
     * @param string $handle
     * @param string $object_name
     * @param array $l10n
     * @return bool
     */
    function wp_localize_script($handle, $object_name, $l10n)
    {
    }
    /**
     * @param string $handle
     * @param string $domain
     * @param string $path
     * @return bool
     */
    function wp_set_script_translations($handle, $domain = 'default', $path = '')
    {
    }
    /**
     * @param string $handle
     * @phpstan-return void
     */
    function wp_deregister_script($handle)
    {
    }
    /**
     * @param string $handle
     * @param string $src
     * @param string[] $deps
     * @param string|bool|null $ver
     * @phpstan-param bool|array{
     *   strategy?: string,
     *   in_footer?: bool,
     * } $args
     */
    function wp_enqueue_script($handle, $src = '', $deps = array(), $ver = \false, $args = array())
    {
    }
    /**
     * @param string $handle
     */
    function wp_dequeue_script($handle)
    {
    }
    /**
     * @param string $handle
     * @phpstan-param 'enqueued'|'registered'|'queue'|'to_do'|'done' $status
     * @return bool
     */
    function wp_script_is($handle, $status = 'enqueued')
    {
    }
    /**
     * @param string $handle
     * @param string $key
     * @param mixed $value
     * @return bool
     */
    function wp_script_add_data($handle, $key, $value)
    {
    }
    /**
     * Dependencies API: Styles functions
     *
     * @since 2.6.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * @return \WP_Styles
     */
    function wp_styles()
    {
    }
    /**
     * @param string|bool|array $handles
     * @return string[]
     */
    function wp_print_styles($handles = \false)
    {
    }
    /**
     * @param string $handle
     * @param string $data
     * @return bool
     */
    function wp_add_inline_style($handle, $data)
    {
    }
    /**
     * @param string $handle
     * @param string|false $src
     * @param string[] $deps
     * @param string|bool|null $ver
     * @param string $media
     * @return bool
     */
    function wp_register_style($handle, $src, $deps = array(), $ver = \false, $media = 'all')
    {
    }
    /**
     * @param string $handle
     */
    function wp_deregister_style($handle)
    {
    }
    /**
     * @param string $handle
     * @param string $src
     * @param string[] $deps
     * @param string|bool|null $ver
     * @param string $media
     */
    function wp_enqueue_style($handle, $src = '', $deps = array(), $ver = \false, $media = 'all')
    {
    }
    /**
     * @param string $handle
     */
    function wp_dequeue_style($handle)
    {
    }
    /**
     * @param string $handle
     * @phpstan-param 'enqueued'|'registered'|'queue'|'to_do'|'done' $status
     * @return bool
     */
    function wp_style_is($handle, $status = 'enqueued')
    {
    }
    /**
     * @param string $handle
     * @phpstan-param 'conditional'|'rtl'|'suffix'|'alt'|'title'|'path' $key
     * @param mixed $value
     * @return bool
     */
    function wp_style_add_data($handle, $key, $value)
    {
    }
    /**
     * General template tags that can go anywhere in a template.
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param string $name
     * @param array $args
     * @return void|false
     */
    function get_header($name = \null, $args = array())
    {
    }
    /**
     * @param string $name
     * @param array $args
     * @return void|false
     */
    function get_footer($name = \null, $args = array())
    {
    }
    /**
     * @param string $name
     * @param array $args
     * @return void|false
     */
    function get_sidebar($name = \null, $args = array())
    {
    }
    /**
     * @param string $slug
     * @param string|null $name
     * @param array $args
     * @return void|false
     */
    function get_template_part($slug, $name = \null, $args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   echo?: bool,
     *   aria_label?: string,
     * } $args
     * @return void|string
     */
    function get_search_form($args = array())
    {
    }
    /**
     * @param string $redirect
     * @param bool $display
     * @return void|string
     * @phpstan-return ($display is true ? void : string)
     */
    function wp_loginout($redirect = '', $display = \true)
    {
    }
    /**
     * @param string $redirect
     * @return string
     */
    function wp_logout_url($redirect = '')
    {
    }
    /**
     * @param string $redirect
     * @param bool $force_reauth
     * @return string
     */
    function wp_login_url($redirect = '', $force_reauth = \false)
    {
    }
    /**
     * @return string
     */
    function wp_registration_url()
    {
    }
    /**
     * @phpstan-param array{
     *   echo?: bool,
     *   redirect?: string,
     *   form_id?: string,
     *   label_username?: string,
     *   label_password?: string,
     *   label_remember?: string,
     *   label_log_in?: string,
     *   id_username?: string,
     *   id_password?: string,
     *   id_remember?: string,
     *   id_submit?: string,
     *   remember?: bool,
     *   value_username?: string,
     *   value_remember?: bool,
     *   required_username?: bool,
     *   required_password?: bool,
     * } $args
     * @return void|string
     */
    function wp_login_form($args = array())
    {
    }
    /**
     * @param string $redirect
     * @return string
     */
    function wp_lostpassword_url($redirect = '')
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @param bool $display
     * @return void|string
     * @phpstan-return ($display is true ? void : string)
     */
    function wp_register($before = '<li>', $after = '</li>', $display = \true)
    {
    }
    function wp_meta()
    {
    }
    /**
     * @param string $show
     */
    function bloginfo($show = '')
    {
    }
    /**
     * @param string $show
     * @param string $filter
     * @return string
     */
    function get_bloginfo($show = '', $filter = 'raw')
    {
    }
    /**
     * @param int $size
     * @param string $url
     * @param int $blog_id
     * @return string
     */
    function get_site_icon_url($size = 512, $url = '', $blog_id = 0)
    {
    }
    /**
     * @param int $size
     * @param string $url
     * @param int $blog_id
     */
    function site_icon_url($size = 512, $url = '', $blog_id = 0)
    {
    }
    /**
     * @param int $blog_id
     * @return bool
     */
    function has_site_icon($blog_id = 0)
    {
    }
    /**
     * @param int $blog_id
     * @return bool
     */
    function has_custom_logo($blog_id = 0)
    {
    }
    /**
     * @param int $blog_id
     * @return string
     */
    function get_custom_logo($blog_id = 0)
    {
    }
    /**
     * @param int $blog_id
     */
    function the_custom_logo($blog_id = 0)
    {
    }
    /**
     * @return string
     */
    function wp_get_document_title()
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_render_title_tag()
    {
    }
    /**
     * @param string $sep
     * @param bool $display
     * @phpstan-param 'left'|'right' $seplocation
     * @return string|void
     * @phpstan-return ($display is true ? void : string)
     */
    function wp_title($sep = '&raquo;', $display = \true, $seplocation = '')
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function single_post_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function post_type_archive_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function single_cat_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function single_tag_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function single_term_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $prefix
     * @param bool $display
     * @return string|false|void
     * @phpstan-return ($display is true ? false|void : false|string)
     */
    function single_month_title($prefix = '', $display = \true)
    {
    }
    /**
     * @param string $before
     * @param string $after
     */
    function the_archive_title($before = '', $after = '')
    {
    }
    /**
     * @return string
     */
    function get_the_archive_title()
    {
    }
    /**
     * @param string $before
     * @param string $after
     */
    function the_archive_description($before = '', $after = '')
    {
    }
    /**
     * @return string
     */
    function get_the_archive_description()
    {
    }
    /**
     * @return string
     */
    function get_the_post_type_description()
    {
    }
    /**
     * @param string $url
     * @param string $text
     * @param string $format
     * @param string $before
     * @param string $after
     * @param bool $selected
     * @return string
     */
    function get_archives_link($url, $text, $format = 'html', $before = '', $after = '', $selected = \false)
    {
    }
    /**
     * @phpstan-param array{
     *   type?: string,
     *   limit?: string|int,
     *   format?: string,
     *   before?: string,
     *   after?: string,
     *   show_post_count?: bool,
     *   echo?: bool|int,
     *   order?: string,
     *   post_type?: string,
     *   year?: string,
     *   monthnum?: string,
     *   day?: string,
     *   w?: string,
     * } $args
     * @return void|string
     */
    function wp_get_archives($args = '')
    {
    }
    /**
     * @param int $num
     * @return float
     */
    function calendar_week_mod($num)
    {
    }
    /**
     * @param bool $initial
     * @param bool $display
     * @return void|string
     * @phpstan-return ($display is true ? void : string)
     */
    function get_calendar($initial = \true, $display = \true)
    {
    }
    function delete_get_calendar_cache()
    {
    }
    /**
     * @return string
     */
    function allowed_tags()
    {
    }
    function the_date_xml()
    {
    }
    /**
     * @param string $format
     * @param string $before
     * @param string $after
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string)
     */
    function the_date($format = '', $before = '', $after = '', $display = \true)
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Post $post
     * @return string|int|false
     */
    function get_the_date($format = '', $post = \null)
    {
    }
    /**
     * @param string $format
     * @param string $before
     * @param string $after
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string)
     */
    function the_modified_date($format = '', $before = '', $after = '', $display = \true)
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Post $post
     * @return string|int|false
     */
    function get_the_modified_date($format = '', $post = \null)
    {
    }
    /**
     * @param string $format
     */
    function the_time($format = '')
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Post $post
     * @return string|int|false
     */
    function get_the_time($format = '', $post = \null)
    {
    }
    /**
     * @param string $format
     * @param bool $gmt
     * @param int|\WP_Post $post
     * @param bool $translate
     * @return string|int|false
     */
    function get_post_time($format = 'U', $gmt = \false, $post = \null, $translate = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-param 'date'|'modified' $field
     * @phpstan-param 'local'|'gmt' $source
     * @return \DateTimeImmutable|false
     */
    function get_post_datetime($post = \null, $field = 'date', $source = 'local')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-param 'date'|'modified' $field
     * @return int|false
     */
    function get_post_timestamp($post = \null, $field = 'date')
    {
    }
    /**
     * @param string $format
     */
    function the_modified_time($format = '')
    {
    }
    /**
     * @param string $format
     * @param int|\WP_Post $post
     * @return string|int|false
     */
    function get_the_modified_time($format = '', $post = \null)
    {
    }
    /**
     * @param string $format
     * @param bool $gmt
     * @param int|\WP_Post $post
     * @param bool $translate
     * @return string|int|false
     */
    function get_post_modified_time($format = 'U', $gmt = \false, $post = \null, $translate = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function the_weekday()
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @phpstan-return void
     */
    function the_weekday_date($before = '', $after = '')
    {
    }
    function wp_head()
    {
    }
    function wp_footer()
    {
    }
    function wp_body_open()
    {
    }
    /**
     * @param array $args
     * @phpstan-return void
     */
    function feed_links($args = array())
    {
    }
    /**
     * @param array $args
     */
    function feed_links_extra($args = array())
    {
    }
    function rsd_link()
    {
    }
    function wp_strict_cross_origin_referrer()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_site_icon()
    {
    }
    function wp_resource_hints()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_preload_resources()
    {
    }
    /**
     * @return string[]
     */
    function wp_dependencies_unique_hosts()
    {
    }
    /**
     * @return bool
     */
    function user_can_richedit()
    {
    }
    /**
     * @phpstan-return 'tinymce'|'html'|'test'
     */
    function wp_default_editor()
    {
    }
    /**
     * @param string $content
     * @param string $editor_id
     * @param array $settings
     * @phpstan-param array{
     *   wpautop?: bool,
     *   media_buttons?: bool,
     *   default_editor?: string,
     *   drag_drop_upload?: bool,
     *   textarea_name?: string,
     *   textarea_rows?: int,
     *   tabindex?: string|int,
     *   tabfocus_elements?: string,
     *   editor_css?: string,
     *   editor_class?: string,
     *   teeny?: bool,
     *   dfw?: bool,
     *   tinymce?: bool|array,
     *   quicktags?: bool|array,
     * } $settings See _WP_Editors::parse_settings()
     */
    function wp_editor($content, $editor_id, $settings = array())
    {
    }
    function wp_enqueue_editor()
    {
    }
    /**
     * @phpstan-param array{
     *   type?: string,
     *   file?: string,
     *   theme?: WP_Theme,
     *   plugin?: string,
     *   codemirror?: array,
     *   csslint?: array,
     *   jshint?: array,
     *   htmlhint?: array,
     * } $args
     * @return array|false
     */
    function wp_enqueue_code_editor($args)
    {
    }
    /**
     * @phpstan-param array{
     *   type?: string,
     *   file?: string,
     *   theme?: WP_Theme,
     *   plugin?: string,
     *   codemirror?: array,
     *   csslint?: array,
     *   jshint?: array,
     *   htmlhint?: array,
     * } $args
     * @return array|false
     */
    function wp_get_code_editor_settings($args)
    {
    }
    /**
     * @param bool $escaped
     * @return string
     */
    function get_search_query($escaped = \true)
    {
    }
    function the_search_query()
    {
    }
    /**
     * @phpstan-param 'xhtml'|'html' $doctype
     * @return string
     */
    function get_language_attributes($doctype = 'html')
    {
    }
    /**
     * @phpstan-param 'xhtml'|'html' $doctype
     */
    function language_attributes($doctype = 'html')
    {
    }
    /**
     * @phpstan-param array{
     *   base?: string,
     *   format?: string,
     *   total?: int,
     *   current?: int,
     *   aria_current?: string,
     *   show_all?: bool,
     *   end_size?: int,
     *   mid_size?: int,
     *   prev_next?: bool,
     *   prev_text?: string,
     *   next_text?: string,
     *   type?: string,
     *   add_args?: array,
     *   add_fragment?: string,
     *   before_page_number?: string,
     *   after_page_number?: string,
     * } $args
     * @return string|string[]|void
     */
    function paginate_links($args = '')
    {
    }
    /**
     * @param string $key
     * @param string $name
     * @param string $url
     * @param array $colors
     * @phpstan-param array{
     *   base?: string,
     *   focus?: string,
     *   current?: string,
     * } $icons
     */
    function wp_admin_css_color($key, $name, $url, $colors = array(), $icons = array())
    {
    }
    function register_admin_color_schemes()
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function wp_admin_css_uri($file = 'wp-admin')
    {
    }
    /**
     * @param string $file
     * @param bool $force_echo
     * @phpstan-return void
     */
    function wp_admin_css($file = 'wp-admin', $force_echo = \false)
    {
    }
    function add_thickbox()
    {
    }
    function wp_generator()
    {
    }
    /**
     * @param string $type
     */
    function the_generator($type)
    {
    }
    /**
     * @param string $type
     * @return string|void
     */
    function get_the_generator($type = '')
    {
    }
    /**
     * @param mixed $checked
     * @param mixed $current
     * @param bool $display
     * @return string
     */
    function checked($checked, $current = \true, $display = \true)
    {
    }
    /**
     * @param mixed $selected
     * @param mixed $current
     * @param bool $display
     * @return string
     */
    function selected($selected, $current = \true, $display = \true)
    {
    }
    /**
     * @param mixed $disabled
     * @param mixed $current
     * @param bool $display
     * @return string
     */
    function disabled($disabled, $current = \true, $display = \true)
    {
    }
    /**
     * @param mixed $readonly_value
     * @param mixed $current
     * @param bool $display
     * @return string
     */
    function wp_readonly($readonly_value, $current = \true, $display = \true)
    {
    }
    /**
     * @param mixed $helper
     * @param mixed $current
     * @param bool $display
     * @param string $type
     * @return string
     */
    function __checked_selected_helper($helper, $current, $display, $type)
    {
    }
    /**
     * @return string
     */
    function wp_required_field_indicator()
    {
    }
    /**
     * @return string
     */
    function wp_required_field_message()
    {
    }
    /**
     * @param array $settings
     * @return array
     */
    function wp_heartbeat_settings($settings)
    {
    }
    /**
     * APIs to interact with global settings & styles.
     *
     * @package WordPress
     */
    /**
     * @param array $path
     * @phpstan-param array{
     *   block_name?: string,
     *   origin?: string,
     * } $context
     * @return mixed
     */
    function wp_get_global_settings($path = array(), $context = array())
    {
    }
    /**
     * @param array $path
     * @phpstan-param array{
     *   block_name?: string,
     *   origin?: string,
     *   transforms?: array,
     * } $context
     * @return mixed
     */
    function wp_get_global_styles($path = array(), $context = array())
    {
    }
    /**
     * @param array $types
     * @return string
     */
    function wp_get_global_stylesheet($types = array())
    {
    }
    /**
     * @return string
     */
    function wp_get_global_styles_custom_css()
    {
    }
    function wp_add_global_styles_for_blocks()
    {
    }
    /**
     * @param array $path
     * @return string
     */
    function wp_get_block_name_from_theme_json_path($path)
    {
    }
    /**
     * @return bool
     */
    function wp_theme_has_theme_json()
    {
    }
    function wp_clean_theme_json_cache()
    {
    }
    /**
     * @return string[]
     */
    function wp_get_theme_directory_pattern_slugs()
    {
    }
    /**
     * @return array
     */
    function wp_get_theme_data_custom_templates()
    {
    }
    /**
     * @return array
     */
    function wp_get_theme_data_template_parts()
    {
    }
    /**
     * @param \WP_Block_Type $block_type
     * @param string|array $target
     * @param bool $fallback
     * @return string|null
     */
    function wp_get_block_css_selector($block_type, $target = 'root', $fallback = \false)
    {
    }
    /**
     * Core HTTP Request API
     *
     * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk
     * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations.
     *
     * @package WordPress
     * @subpackage HTTP
     */
    /**
     * @return \WP_Http
     */
    function _wp_http_get_object()
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_safe_remote_request($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_safe_remote_get($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_safe_remote_post($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_safe_remote_head($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @phpstan-return \WP_Error|array{
     *   headers: string[],
     *   body: string,
     *   response: array{
     *     code: int|false,
     *     message: string|false,
     *   },
     *   cookies: WP_HTTP_Cookie[],
     *   http_response: WP_HTTP_Requests_Response|null,
     * }
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_remote_request($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_remote_get($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_remote_post($url, $args = array())
    {
    }
    /**
     * @param string $url
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-return array{headers: \WpOrg\Requests\Utility\CaseInsensitiveDictionary, body: string, response: array{code: int,message: string}, cookies: array<int, \WP_Http_Cookie>, filename: string|null, http_response: \WP_HTTP_Requests_Response}|\WP_Error
     * @phpstan-param array{
     *   method?: string,
     *   timeout?: float,
     *   redirection?: int,
     *   httpversion?: string,
     *   user-agent?: string,
     *   reject_unsafe_urls?: bool,
     *   blocking?: bool,
     *   headers?: string|array,
     *   cookies?: array,
     *   body?: string|array,
     *   compress?: bool,
     *   decompress?: bool,
     *   sslverify?: bool,
     *   sslcertificates?: string,
     *   stream?: bool,
     *   filename?: string,
     *   limit_response_size?: int,
     * } $args See WP_Http::request()
     */
    function wp_remote_head($url, $args = array())
    {
    }
    /**
     * @param array|\WP_Error $response
     * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary|array
     */
    function wp_remote_retrieve_headers($response)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @param string $header
     * @return array|string
     */
    function wp_remote_retrieve_header($response, $header)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @return int|string
     */
    function wp_remote_retrieve_response_code($response)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @return string
     */
    function wp_remote_retrieve_response_message($response)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @return string
     */
    function wp_remote_retrieve_body($response)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @return \WP_Http_Cookie[]
     */
    function wp_remote_retrieve_cookies($response)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @param string $name
     * @return \WP_Http_Cookie|string
     */
    function wp_remote_retrieve_cookie($response, $name)
    {
    }
    /**
     * @param array|\WP_Error $response
     * @param string $name
     * @return string
     */
    function wp_remote_retrieve_cookie_value($response, $name)
    {
    }
    /**
     * @param array $capabilities
     * @param string $url
     * @return bool
     */
    function wp_http_supports($capabilities = array(), $url = \null)
    {
    }
    /**
     * @return string
     */
    function get_http_origin()
    {
    }
    /**
     * @return string[]
     */
    function get_allowed_http_origins()
    {
    }
    /**
     * @param string|null $origin
     * @return string
     */
    function is_allowed_http_origin($origin = \null)
    {
    }
    /**
     * @return string|false
     */
    function send_origin_headers()
    {
    }
    /**
     * @param string $url
     * @return string|false
     */
    function wp_http_validate_url($url)
    {
    }
    /**
     * @param bool $is_external
     * @param string $host
     * @return bool
     */
    function allowed_http_request_hosts($is_external, $host)
    {
    }
    /**
     * @param bool $is_external
     * @param string $host
     * @return bool
     */
    function ms_allowed_http_request_hosts($is_external, $host)
    {
    }
    /**
     * @param string $url
     * @param int $component
     * @return mixed
     */
    function wp_parse_url($url, $component = -1)
    {
    }
    /**
     * @param array|false $url_parts
     * @param int $component
     * @return mixed
     */
    function _get_component_from_parsed_url_array($url_parts, $component = -1)
    {
    }
    /**
     * @param int $constant
     * @return string|false
     */
    function _wp_translate_php_url_constant_to_key($constant)
    {
    }
    /**
     * HTTPS detection functions.
     *
     * @package WordPress
     * @since 5.7.0
     */
    /**
     * @return bool
     */
    function wp_is_using_https()
    {
    }
    /**
     * @return bool
     */
    function wp_is_home_url_using_https()
    {
    }
    /**
     * @return bool
     */
    function wp_is_site_url_using_https()
    {
    }
    /**
     * @return bool
     */
    function wp_is_https_supported()
    {
    }
    function wp_get_https_detection_errors()
    {
    }
    /**
     * @param string $html
     * @return bool|null
     */
    function wp_is_local_html_output($html)
    {
    }
    /**
     * HTTPS migration functions.
     *
     * @package WordPress
     * @since 5.7.0
     */
    /**
     * @return bool
     */
    function wp_should_replace_insecure_home_url()
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_replace_insecure_home_url($content)
    {
    }
    /**
     * @return bool
     */
    function wp_update_urls_to_https()
    {
    }
    /**
     * @param mixed $old_url
     * @param mixed $new_url
     * @phpstan-return void
     */
    function wp_update_https_migration_required($old_url, $new_url)
    {
    }
    /**
     * Interactivity API: Functions and hooks
     *
     * @package WordPress
     * @subpackage Interactivity API
     * @since 6.5.0
     */
    /**
     * @return \WP_Interactivity_API
     */
    function wp_interactivity() : \WP_Interactivity_API
    {
    }
    /**
     * @param string $html
     * @return string
     */
    function wp_interactivity_process_directives(string $html) : string
    {
    }
    /**
     * @param string $store_namespace
     * @param array $state
     * @return array
     */
    function wp_interactivity_state(?string $store_namespace = \null, array $state = array()) : array
    {
    }
    /**
     * @param string $store_namespace
     * @param array $config
     * @return array
     */
    function wp_interactivity_config(string $store_namespace, array $config = array()) : array
    {
    }
    /**
     * @param array $context
     * @param string $store_namespace
     * @return string
     */
    function wp_interactivity_data_wp_context(array $context, string $store_namespace = '') : string
    {
    }
    /**
     * @param string $store_namespace
     * @return array
     */
    function wp_interactivity_get_context(?string $store_namespace = \null) : array
    {
    }
    function get_file($path)
    {
    }
    /**
     * @param string $content
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses($content, $allowed_html, $allowed_protocols = array())
    {
    }
    /**
     * @param string $attr
     * @param string $element
     * @return string
     */
    function wp_kses_one_attr($attr, $element)
    {
    }
    /**
     * @param string|array $context
     * @return array
     */
    function wp_kses_allowed_html($context = '')
    {
    }
    /**
     * @param string $content
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_hook($content, $allowed_html, $allowed_protocols)
    {
    }
    /**
     * @return string
     */
    function wp_kses_version()
    {
    }
    /**
     * @param string $content
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_split($content, $allowed_html, $allowed_protocols)
    {
    }
    /**
     * @return string[]
     */
    function wp_kses_uri_attributes()
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _wp_kses_split_callback($matches)
    {
    }
    /**
     * @param string $content
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_split2($content, $allowed_html, $allowed_protocols)
    {
    }
    /**
     * @param string $element
     * @param string $attr
     * @param array[]|string $allowed_html
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols)
    {
    }
    /**
     * @param string $name
     * @param string $value
     * @param string $whole
     * @param string $vless
     * @param string $element
     * @param array $allowed_html
     * @return bool
     */
    function wp_kses_attr_check(&$name, &$value, &$whole, $vless, $element, $allowed_html)
    {
    }
    /**
     * @param string $attr
     * @param string[] $allowed_protocols
     * @return array[]
     */
    function wp_kses_hair($attr, $allowed_protocols)
    {
    }
    /**
     * @param string $element
     * @return array|false
     */
    function wp_kses_attr_parse($element)
    {
    }
    /**
     * @param string $attr
     * @return array|false
     */
    function wp_kses_hair_parse($attr)
    {
    }
    /**
     * @param string $value
     * @param string $vless
     * @param string $checkname
     * @param mixed $checkvalue
     * @return bool
     */
    function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue)
    {
    }
    /**
     * @param string $content
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_bad_protocol($content, $allowed_protocols)
    {
    }
    /**
     * @param string $content
     * @param array $options
     * @return string
     */
    function wp_kses_no_null($content, $options = \null)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_kses_stripslashes($content)
    {
    }
    /**
     * @param array $inarray
     * @return array
     */
    function wp_kses_array_lc($inarray)
    {
    }
    /**
     * @param string $attr
     * @return string
     */
    function wp_kses_html_error($attr)
    {
    }
    /**
     * @param string $content
     * @param string[] $allowed_protocols
     * @param int $count
     * @return string
     */
    function wp_kses_bad_protocol_once($content, $allowed_protocols, $count = 1)
    {
    }
    /**
     * @param string $scheme
     * @param string[] $allowed_protocols
     * @return string
     */
    function wp_kses_bad_protocol_once2($scheme, $allowed_protocols)
    {
    }
    /**
     * @param string $content
     * @phpstan-param 'html'|'xml' $context
     * @return string
     */
    function wp_kses_normalize_entities($content, $context = 'html')
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_kses_named_entities($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_kses_xml_named_entities($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_kses_normalize_entities2($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function wp_kses_normalize_entities3($matches)
    {
    }
    /**
     * @param int $i
     * @return bool
     */
    function valid_unicode($i)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function wp_kses_decode_entities($content)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _wp_kses_decode_entities_chr($matches)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _wp_kses_decode_entities_chr_hexdec($matches)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_filter_kses($data)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_kses_data($data)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_filter_post_kses($data)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_filter_global_styles_post($data)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_kses_post($data)
    {
    }
    /**
     * @param mixed $data
     * @return mixed
     */
    function wp_kses_post_deep($data)
    {
    }
    /**
     * @param string $data
     * @return string
     */
    function wp_filter_nohtml_kses($data)
    {
    }
    function kses_init_filters()
    {
    }
    function kses_remove_filters()
    {
    }
    function kses_init()
    {
    }
    /**
     * @param string $css
     * @param string $deprecated
     * @return string
     */
    function safecss_filter_attr($css, $deprecated = '')
    {
    }
    /**
     * @param array $value
     * @return array
     */
    function _wp_add_global_attributes($value)
    {
    }
    /**
     * @param string $url
     * @return bool
     */
    function _wp_kses_allow_pdf_objects($url)
    {
    }
    /**
     * Core Translation API
     *
     * @package WordPress
     * @subpackage i18n
     * @since 1.2.0
     */
    /**
     * @return string
     */
    function get_locale()
    {
    }
    /**
     * @param int|\WP_User $user
     * @return string
     */
    function get_user_locale($user = 0)
    {
    }
    /**
     * @return string
     */
    function determine_locale()
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function translate($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function before_last_bar($text)
    {
    }
    /**
     * @param string $text
     * @param string $context
     * @param string $domain
     * @return string
     */
    function translate_with_gettext_context($text, $context, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function __($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function esc_attr__($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     * @return string
     */
    function esc_html__($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     */
    function _e($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     */
    function esc_attr_e($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $domain
     */
    function esc_html_e($text, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $context
     * @param string $domain
     * @return string
     */
    function _x($text, $context, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $context
     * @param string $domain
     */
    function _ex($text, $context, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $context
     * @param string $domain
     * @return string
     */
    function esc_attr_x($text, $context, $domain = 'default')
    {
    }
    /**
     * @param string $text
     * @param string $context
     * @param string $domain
     * @return string
     */
    function esc_html_x($text, $context, $domain = 'default')
    {
    }
    /**
     * @param string $single
     * @param string $plural
     * @param int $number
     * @param string $domain
     * @return string
     */
    function _n($single, $plural, $number, $domain = 'default')
    {
    }
    /**
     * @param string $single
     * @param string $plural
     * @param int $number
     * @param string $context
     * @param string $domain
     * @return string
     */
    function _nx($single, $plural, $number, $context, $domain = 'default')
    {
    }
    /**
     * @param string $singular
     * @param string $plural
     * @param string $domain
     * @phpstan-return array{
     *   0: string,
     *   1: string,
     *   singular: string,
     *   plural: string,
     *   context: null,
     *   domain: string|null,
     * }
     */
    function _n_noop($singular, $plural, $domain = \null)
    {
    }
    /**
     * @param string $singular
     * @param string $plural
     * @param string $context
     * @param string $domain
     * @phpstan-return array{
     *   0: string,
     *   1: string,
     *   2: string,
     *   singular: string,
     *   plural: string,
     *   context: string,
     *   domain: string|null,
     * }
     */
    function _nx_noop($singular, $plural, $context, $domain = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   singular?: string,
     *   plural?: string,
     *   context?: string|null,
     *   domain?: string|null,
     * } $nooped_plural
     * @param int $count
     * @param string $domain
     * @return string
     */
    function translate_nooped_plural($nooped_plural, $count, $domain = 'default')
    {
    }
    /**
     * @param string $domain
     * @param string $mofile
     * @param string $locale
     * @return bool
     */
    function load_textdomain($domain, $mofile, $locale = \null)
    {
    }
    /**
     * @param string $domain
     * @param bool $reloadable
     * @return bool
     */
    function unload_textdomain($domain, $reloadable = \false)
    {
    }
    /**
     * @param string $locale
     * @return bool
     */
    function load_default_textdomain($locale = \null)
    {
    }
    /**
     * @param string $domain
     * @param string|false $deprecated
     * @param string|false $plugin_rel_path
     * @return bool
     */
    function load_plugin_textdomain($domain, $deprecated = \false, $plugin_rel_path = \false)
    {
    }
    /**
     * @param string $domain
     * @param string $mu_plugin_rel_path
     * @return bool
     */
    function load_muplugin_textdomain($domain, $mu_plugin_rel_path = '')
    {
    }
    /**
     * @param string $domain
     * @param string|false $path
     * @return bool
     */
    function load_theme_textdomain($domain, $path = \false)
    {
    }
    /**
     * @param string $domain
     * @param string|false $path
     * @return bool
     */
    function load_child_theme_textdomain($domain, $path = \false)
    {
    }
    /**
     * @param string $handle
     * @param string $domain
     * @param string $path
     * @return string|false
     */
    function load_script_textdomain($handle, $domain = 'default', $path = '')
    {
    }
    /**
     * @param string|false $file
     * @param string $handle
     * @param string $domain
     * @return string|false
     */
    function load_script_translations($file, $handle, $domain)
    {
    }
    /**
     * @param string $domain
     * @return bool
     */
    function _load_textdomain_just_in_time($domain)
    {
    }
    /**
     * @param string $domain
     * @return \Translations|\NOOP_Translations
     */
    function get_translations_for_domain($domain)
    {
    }
    /**
     * @param string $domain
     * @return bool
     */
    function is_textdomain_loaded($domain)
    {
    }
    /**
     * @param string $name
     * @param string $domain
     * @return string
     */
    function translate_user_role($name, $domain = 'default')
    {
    }
    /**
     * @param string $dir
     * @return string[]
     */
    function get_available_languages($dir = \null)
    {
    }
    /**
     * @param string $type
     * @return array
     */
    function wp_get_installed_translations($type)
    {
    }
    /**
     * @param string $po_file
     * @return string[]
     */
    function wp_get_pomo_file_data($po_file)
    {
    }
    /**
     * @param string $php_file
     * @return string[]
     */
    function wp_get_l10n_php_file_data($php_file)
    {
    }
    /**
     * @phpstan-param array{
     *   id?: string,
     *   name?: string,
     *   languages?: string[],
     *   translations?: array,
     *   selected?: string,
     *   echo?: bool|int,
     *   show_available_translations?: bool,
     *   show_option_site_default?: bool,
     *   show_option_en_us?: bool,
     *   explicit_option_en_us?: bool,
     * } $args
     * @return string
     */
    function wp_dropdown_languages($args = array())
    {
    }
    /**
     * @return bool
     */
    function is_rtl()
    {
    }
    /**
     * @param string $locale
     * @return bool
     */
    function switch_to_locale($locale)
    {
    }
    /**
     * @param int $user_id
     * @return bool
     */
    function switch_to_user_locale($user_id)
    {
    }
    /**
     * @return string|false
     */
    function restore_previous_locale()
    {
    }
    /**
     * @return string|false
     */
    function restore_current_locale()
    {
    }
    /**
     * @return bool
     */
    function is_locale_switched()
    {
    }
    /**
     * @param string|string[]|array[]|object $i18n_schema
     * @param string|string[]|array[] $settings
     * @param string $textdomain
     * @return string|string[]|array[]
     */
    function translate_settings_using_i18n_schema($i18n_schema, $settings, $textdomain)
    {
    }
    /**
     * @return string
     */
    function wp_get_list_item_separator()
    {
    }
    /**
     * @return string
     */
    function wp_get_word_count_type()
    {
    }
    /**
     * WordPress Link Template Functions
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param int|\WP_Post $post
     */
    function the_permalink($post = 0)
    {
    }
    /**
     * @param string $url
     * @param string $type_of_url
     * @return string
     */
    function user_trailingslashit($url, $type_of_url = '')
    {
    }
    /**
     * @phpstan-param 'title'|'id' $mode
     */
    function permalink_anchor($mode = 'id')
    {
    }
    /**
     * @param \WP_Post|int|null $post
     * @param bool|null $sample
     * @return bool
     */
    function wp_force_plain_post_permalink($post = \null, $sample = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @return string|false
     * @phpstan-return ($post is \WP_Post ? string : string|false)
     */
    function get_the_permalink($post = 0, $leavename = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @return string|false
     * @phpstan-return ($post is \WP_Post ? string : string|false)
     */
    function get_permalink($post = 0, $leavename = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @param bool $sample
     * @return string|false
     * @phpstan-return ($post is \WP_Post ? string : string|false)
     */
    function get_post_permalink($post = 0, $leavename = \false, $sample = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @param bool $sample
     * @return string
     */
    function get_page_link($post = \false, $leavename = \false, $sample = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @param bool $sample
     * @return string
     */
    function _get_page_link($post = \false, $leavename = \false, $sample = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $leavename
     * @return string
     */
    function get_attachment_link($post = \null, $leavename = \false)
    {
    }
    /**
     * @param int|false $year
     * @return string
     */
    function get_year_link($year)
    {
    }
    /**
     * @param int|false $year
     * @param int|false $month
     * @return string
     */
    function get_month_link($year, $month)
    {
    }
    /**
     * @param int|false $year
     * @param int|false $month
     * @param int|false $day
     * @return string
     */
    function get_day_link($year, $month, $day)
    {
    }
    /**
     * @param string $anchor
     * @param string $feed
     */
    function the_feed_link($anchor, $feed = '')
    {
    }
    /**
     * @param string $feed
     * @return string
     */
    function get_feed_link($feed = '')
    {
    }
    /**
     * @param int $post_id
     * @param string $feed
     * @return string
     */
    function get_post_comments_feed_link($post_id = 0, $feed = '')
    {
    }
    /**
     * @param string $link_text
     * @param int $post_id
     * @param string $feed
     */
    function post_comments_feed_link($link_text = '', $post_id = '', $feed = '')
    {
    }
    /**
     * @param int $author_id
     * @param string $feed
     * @return string
     */
    function get_author_feed_link($author_id, $feed = '')
    {
    }
    /**
     * @param int|\WP_Term|object $cat
     * @param string $feed
     * @return string
     */
    function get_category_feed_link($cat, $feed = '')
    {
    }
    /**
     * @param int|\WP_Term|object $term
     * @param string $taxonomy
     * @param string $feed
     * @return string|false
     */
    function get_term_feed_link($term, $taxonomy = '', $feed = '')
    {
    }
    /**
     * @param int|\WP_Term|object $tag
     * @param string $feed
     * @return string
     */
    function get_tag_feed_link($tag, $feed = '')
    {
    }
    /**
     * @param int|\WP_Term|object $tag
     * @param string $taxonomy
     * @return string
     */
    function get_edit_tag_link($tag, $taxonomy = 'post_tag')
    {
    }
    /**
     * @param string $link
     * @param string $before
     * @param string $after
     * @param \WP_Term $tag
     */
    function edit_tag_link($link = '', $before = '', $after = '', $tag = \null)
    {
    }
    /**
     * @param int|\WP_Term|object $term
     * @param string $taxonomy
     * @param string $object_type
     * @return string|null
     */
    function get_edit_term_link($term, $taxonomy = '', $object_type = '')
    {
    }
    /**
     * @param string $link
     * @param string $before
     * @param string $after
     * @param int|\WP_Term|null $term
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string|void)
     */
    function edit_term_link($link = '', $before = '', $after = '', $term = \null, $display = \true)
    {
    }
    /**
     * @param string $query
     * @return string
     */
    function get_search_link($query = '')
    {
    }
    /**
     * @param string $search_query
     * @param string $feed
     * @return string
     */
    function get_search_feed_link($search_query = '', $feed = '')
    {
    }
    /**
     * @param string $search_query
     * @param string $feed
     * @return string
     */
    function get_search_comments_feed_link($search_query = '', $feed = '')
    {
    }
    /**
     * @param string $post_type
     * @return string|false
     */
    function get_post_type_archive_link($post_type)
    {
    }
    /**
     * @param string $post_type
     * @param string $feed
     * @return string|false
     */
    function get_post_type_archive_feed_link($post_type, $feed = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param array $query_args
     * @param string $preview_link
     * @return string|null
     */
    function get_preview_post_link($post = \null, $query_args = array(), $preview_link = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $context
     * @return string|null
     */
    function get_edit_post_link($post = 0, $context = 'display')
    {
    }
    /**
     * @param string $text
     * @param string $before
     * @param string $after
     * @param int|\WP_Post $post
     * @param string $css_class
     * @phpstan-return void
     */
    function edit_post_link($text = \null, $before = '', $after = '', $post = 0, $css_class = 'post-edit-link')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $deprecated
     * @param bool $force_delete
     * @return string|void
     */
    function get_delete_post_link($post = 0, $deprecated = '', $force_delete = \false)
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @return string|void
     */
    function get_edit_comment_link($comment_id = 0)
    {
    }
    /**
     * @param string $text
     * @param string $before
     * @param string $after
     * @phpstan-return void
     */
    function edit_comment_link($text = \null, $before = '', $after = '')
    {
    }
    /**
     * @param int|\stdClass $link
     * @return string|void
     */
    function get_edit_bookmark_link($link = 0)
    {
    }
    /**
     * @param string $link
     * @param string $before
     * @param string $after
     * @param int $bookmark
     * @phpstan-return void
     */
    function edit_bookmark_link($link = '', $before = '', $after = '', $bookmark = \null)
    {
    }
    /**
     * @param int $user_id
     * @return string
     */
    function get_edit_user_link($user_id = \null)
    {
    }
    //
    // Navigation links.
    //
    /**
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     * @return \WP_Post|null|string
     */
    function get_previous_post($in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     * @return \WP_Post|null|string
     */
    function get_next_post($in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param bool $previous
     * @param string $taxonomy
     * @return \WP_Post|null|string
     */
    function get_adjacent_post($in_same_term = \false, $excluded_terms = '', $previous = \true, $taxonomy = 'category')
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param bool $previous
     * @param string $taxonomy
     * @return string|void
     */
    function get_adjacent_post_rel_link($title = '%title', $in_same_term = \false, $excluded_terms = '', $previous = \true, $taxonomy = 'category')
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     */
    function adjacent_posts_rel_link($title = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @phpstan-return void
     */
    function adjacent_posts_rel_link_wp_head()
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     */
    function next_post_rel_link($title = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param string $title
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     */
    function prev_post_rel_link($title = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param bool $start
     * @param string $taxonomy
     * @return array|null
     */
    function get_boundary_post($in_same_term = \false, $excluded_terms = '', $start = \true, $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     * @return string
     */
    function get_previous_post_link($format = '&laquo; %link', $link = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     */
    function previous_post_link($format = '&laquo; %link', $link = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     * @return string
     */
    function get_next_post_link($format = '%link &raquo;', $link = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param string $taxonomy
     */
    function next_post_link($format = '%link &raquo;', $link = '%title', $in_same_term = \false, $excluded_terms = '', $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param bool $previous
     * @param string $taxonomy
     * @return string
     */
    function get_adjacent_post_link($format, $link, $in_same_term = \false, $excluded_terms = '', $previous = \true, $taxonomy = 'category')
    {
    }
    /**
     * @param string $format
     * @param string $link
     * @param bool $in_same_term
     * @param int[]|string $excluded_terms
     * @param bool $previous
     * @param string $taxonomy
     */
    function adjacent_post_link($format, $link, $in_same_term = \false, $excluded_terms = '', $previous = \true, $taxonomy = 'category')
    {
    }
    /**
     * @param int $pagenum
     * @param bool $escape
     * @return string
     */
    function get_pagenum_link($pagenum = 1, $escape = \true)
    {
    }
    /**
     * @param int $max_page
     * @return string|void
     */
    function get_next_posts_page_link($max_page = 0)
    {
    }
    /**
     * @param int $max_page
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string)
     */
    function next_posts($max_page = 0, $display = \true)
    {
    }
    /**
     * @param string $label
     * @param int $max_page
     * @return string|void
     */
    function get_next_posts_link($label = \null, $max_page = 0)
    {
    }
    /**
     * @param string $label
     * @param int $max_page
     */
    function next_posts_link($label = \null, $max_page = 0)
    {
    }
    /**
     * @return string|void
     */
    function get_previous_posts_page_link()
    {
    }
    /**
     * @param bool $display
     * @return string|void
     * @phpstan-return ($display is true ? void : string)
     */
    function previous_posts($display = \true)
    {
    }
    /**
     * @param string $label
     * @return string|void
     */
    function get_previous_posts_link($label = \null)
    {
    }
    /**
     * @param string $label
     */
    function previous_posts_link($label = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   sep?: string,
     *   prelabel?: string,
     *   nxtlabel?: string,
     * } $args
     * @return string
     */
    function get_posts_nav_link($args = array())
    {
    }
    /**
     * @param string $sep
     * @param string $prelabel
     * @param string $nxtlabel
     */
    function posts_nav_link($sep = '', $prelabel = '', $nxtlabel = '')
    {
    }
    /**
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   in_same_term?: bool,
     *   excluded_terms?: int[]|string,
     *   taxonomy?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args
     * @return string
     */
    function get_the_post_navigation($args = array())
    {
    }
    /**
     * @param array $args
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   in_same_term?: bool,
     *   excluded_terms?: int[]|string,
     *   taxonomy?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args See get_the_post_navigation()
     */
    function the_post_navigation($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args
     * @return string
     */
    function get_the_posts_navigation($args = array())
    {
    }
    /**
     * @param array $args
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args See get_the_posts_navigation()
     */
    function the_posts_navigation($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     *   base?: string,
     *   format?: string,
     *   total?: int,
     *   current?: int,
     *   aria_current?: string,
     *   show_all?: bool,
     *   end_size?: int,
     *   mid_size?: int,
     *   prev_next?: bool,
     *   prev_text?: string,
     *   next_text?: string,
     *   type?: string,
     *   add_args?: array,
     *   add_fragment?: string,
     *   before_page_number?: string,
     *   after_page_number?: string,
     * } $args
     * @return string
     */
    function get_the_posts_pagination($args = array())
    {
    }
    /**
     * @param array $args
     * @phpstan-param array{
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     *   base?: string,
     *   format?: string,
     *   total?: int,
     *   current?: int,
     *   aria_current?: string,
     *   show_all?: bool,
     *   end_size?: int,
     *   mid_size?: int,
     *   prev_next?: bool,
     *   prev_text?: string,
     *   next_text?: string,
     *   type?: string,
     *   add_args?: array,
     *   add_fragment?: string,
     *   before_page_number?: string,
     *   after_page_number?: string,
     * } $args See get_the_posts_pagination()
     */
    function the_posts_pagination($args = array())
    {
    }
    /**
     * @param string $links
     * @param string $css_class
     * @param string $screen_reader_text
     * @param string $aria_label
     * @return string
     */
    function _navigation_markup($links, $css_class = 'posts-navigation', $screen_reader_text = '', $aria_label = '')
    {
    }
    /**
     * @param int $pagenum
     * @param int $max_page
     * @return string
     */
    function get_comments_pagenum_link($pagenum = 1, $max_page = 0)
    {
    }
    /**
     * @param string $label
     * @param int $max_page
     * @return string|void
     */
    function get_next_comments_link($label = '', $max_page = 0)
    {
    }
    /**
     * @param string $label
     * @param int $max_page
     */
    function next_comments_link($label = '', $max_page = 0)
    {
    }
    /**
     * @param string $label
     * @return string|void
     */
    function get_previous_comments_link($label = '')
    {
    }
    /**
     * @param string $label
     */
    function previous_comments_link($label = '')
    {
    }
    /**
     * @param string|array $args
     * @return void|string|array
     * @phpstan-param array{
     *   base?: string,
     *   format?: string,
     *   total?: int,
     *   current?: int,
     *   aria_current?: string,
     *   show_all?: bool,
     *   end_size?: int,
     *   mid_size?: int,
     *   prev_next?: bool,
     *   prev_text?: string,
     *   next_text?: string,
     *   type?: string,
     *   add_args?: array,
     *   add_fragment?: string,
     *   before_page_number?: string,
     *   after_page_number?: string,
     * } $args See paginate_links()
     */
    function paginate_comments_links($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args
     * @return string
     */
    function get_the_comments_navigation($args = array())
    {
    }
    /**
     * @param array $args
     * @phpstan-param array{
     *   prev_text?: string,
     *   next_text?: string,
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args See get_the_comments_navigation()
     */
    function the_comments_navigation($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args
     * @return string
     */
    function get_the_comments_pagination($args = array())
    {
    }
    /**
     * @param array $args
     * @phpstan-param array{
     *   screen_reader_text?: string,
     *   aria_label?: string,
     *   class?: string,
     * } $args See get_the_comments_pagination()
     */
    function the_comments_pagination($args = array())
    {
    }
    /**
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function home_url($path = '', $scheme = \null)
    {
    }
    /**
     * @param int|null $blog_id
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function get_home_url($blog_id = \null, $path = '', $scheme = \null)
    {
    }
    /**
     * @param string $path
     * @param string|null $scheme
     * @return string
     * @param string|null $scheme
     */
    function site_url($path = '', $scheme = \null)
    {
    }
    /**
     * @param int|null $blog_id
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function get_site_url($blog_id = \null, $path = '', $scheme = \null)
    {
    }
    /**
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function admin_url($path = '', $scheme = 'admin')
    {
    }
    /**
     * @param int|null $blog_id
     * @param string $path
     * @phpstan-param 'http'|'https' $scheme
     * @return string
     */
    function get_admin_url($blog_id = \null, $path = '', $scheme = 'admin')
    {
    }
    /**
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function includes_url($path = '', $scheme = \null)
    {
    }
    /**
     * @param string $path
     * @return string
     */
    function content_url($path = '')
    {
    }
    /**
     * @param string $path
     * @param string $plugin
     * @return string
     */
    function plugins_url($path = '', $plugin = '')
    {
    }
    /**
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function network_site_url($path = '', $scheme = \null)
    {
    }
    /**
     * @param string $path
     * @param string|null $scheme
     * @return string
     */
    function network_home_url($path = '', $scheme = \null)
    {
    }
    /**
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function network_admin_url($path = '', $scheme = 'admin')
    {
    }
    /**
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function user_admin_url($path = '', $scheme = 'admin')
    {
    }
    /**
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function self_admin_url($path = '', $scheme = 'admin')
    {
    }
    /**
     * @param string $url
     * @param string|null $scheme
     * @return string
     */
    function set_url_scheme($url, $scheme = \null)
    {
    }
    /**
     * @param int $user_id
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function get_dashboard_url($user_id = 0, $path = '', $scheme = 'admin')
    {
    }
    /**
     * @param int $user_id
     * @param string $scheme
     * @return string
     */
    function get_edit_profile_url($user_id = 0, $scheme = 'admin')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function wp_get_canonical_url($post = \null)
    {
    }
    /**
     * @phpstan-return void
     */
    function rel_canonical()
    {
    }
    /**
     * @param int $id
     * @param string $context
     * @param bool $allow_slugs
     * @return string
     */
    function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = \true)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_shortlink_wp_head()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_shortlink_header()
    {
    }
    /**
     * @param string $text
     * @param string $title
     * @param string $before
     * @param string $after
     */
    function the_shortlink($text = '', $title = '', $before = '', $after = '')
    {
    }
    /**
     * @param mixed $id_or_email
     * @phpstan-param array{
     *   size?: int,
     *   default?: string,
     *   force_default?: bool,
     *   rating?: string,
     *   scheme?: string,
     *   processed_args?: array,
     * } $args
     * @return string|false
     */
    function get_avatar_url($id_or_email, $args = \null)
    {
    }
    /**
     * @param string $comment_type
     * @return bool
     */
    function is_avatar_comment_type($comment_type)
    {
    }
    /**
     * @param mixed $id_or_email
     * @phpstan-param array{
     *   size?: int,
     *   height?: int,
     *   width?: int,
     *   default?: string,
     *   force_default?: bool,
     *   rating?: string,
     *   scheme?: string,
     *   processed_args?: array,
     *   extra_attr?: string,
     * } $args
     * @phpstan-return array{
     *   found_avatar: bool,
     *   url: string|false,
     * }
     */
    function get_avatar_data($id_or_email, $args = \null)
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_theme_file_uri($file = '')
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_parent_theme_file_uri($file = '')
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_theme_file_path($file = '')
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function get_parent_theme_file_path($file = '')
    {
    }
    /**
     * @return string
     */
    function get_privacy_policy_url()
    {
    }
    /**
     * @param string $before
     * @param string $after
     */
    function the_privacy_policy_link($before = '', $after = '')
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @return string
     */
    function get_the_privacy_policy_link($before = '', $after = '')
    {
    }
    /**
     * @return string[]
     */
    function wp_internal_hosts()
    {
    }
    /**
     * @param string $link
     * @return bool
     */
    function wp_is_internal_link($link)
    {
    }
    /**
     * These functions are needed to load WordPress.
     *
     * @package WordPress
     */
    /**
     * @return string
     */
    function wp_get_server_protocol()
    {
    }
    function wp_fix_server_vars()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_populate_basic_auth_from_authorization_header()
    {
    }
    function wp_check_php_mysql_versions()
    {
    }
    /**
     * @return string
     */
    function wp_get_environment_type()
    {
    }
    /**
     * @return string
     */
    function wp_get_development_mode()
    {
    }
    /**
     * @phpstan-param 'core'|'plugin'|'theme'|'all' $mode
     * @return bool
     */
    function wp_is_development_mode($mode)
    {
    }
    function wp_favicon_request()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_maintenance()
    {
    }
    /**
     * @return bool
     */
    function wp_is_maintenance_mode()
    {
    }
    /**
     * @return float
     */
    function timer_float()
    {
    }
    /**
     * @return bool
     */
    function timer_start()
    {
    }
    /**
     * @param int|bool $display
     * @param int $precision
     * @return string
     */
    function timer_stop($display = 0, $precision = 3)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_debug_mode()
    {
    }
    function wp_set_lang_dir()
    {
    }
    /**
     * @phpstan-return void
     */
    function require_wp_db()
    {
    }
    function wp_set_wpdb_vars()
    {
    }
    /**
     * @param bool $using
     * @return bool
     */
    function wp_using_ext_object_cache($using = \null)
    {
    }
    function wp_start_object_cache()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_not_installed()
    {
    }
    /**
     * @return string[]
     */
    function wp_get_mu_plugins()
    {
    }
    /**
     * @return string[]
     */
    function wp_get_active_and_valid_plugins()
    {
    }
    /**
     * @param string[] $plugins
     * @return string[]
     */
    function wp_skip_paused_plugins(array $plugins)
    {
    }
    /**
     * @return string[]
     */
    function wp_get_active_and_valid_themes()
    {
    }
    /**
     * @param string[] $themes
     * @return string[]
     */
    function wp_skip_paused_themes(array $themes)
    {
    }
    /**
     * @return bool
     */
    function wp_is_recovery_mode()
    {
    }
    /**
     * @return bool
     */
    function is_protected_endpoint()
    {
    }
    /**
     * @return bool
     */
    function is_protected_ajax_action()
    {
    }
    function wp_set_internal_encoding()
    {
    }
    function wp_magic_quotes()
    {
    }
    function shutdown_action_hook()
    {
    }
    /**
     * @param object $input_object
     * @return object
     */
    function wp_clone($input_object)
    {
    }
    /**
     * @return bool
     */
    function is_login()
    {
    }
    /**
     * @return bool
     */
    function is_admin()
    {
    }
    /**
     * @return bool
     */
    function is_blog_admin()
    {
    }
    /**
     * @return bool
     */
    function is_network_admin()
    {
    }
    /**
     * @return bool
     */
    function is_user_admin()
    {
    }
    /**
     * @return bool
     */
    function is_multisite()
    {
    }
    /**
     * @return int
     */
    function get_current_blog_id()
    {
    }
    /**
     * @return int
     */
    function get_current_network_id()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_load_translations_early()
    {
    }
    /**
     * @param bool $is_installing
     * @return bool
     */
    function wp_installing($is_installing = \null)
    {
    }
    /**
     * @return bool
     */
    function is_ssl()
    {
    }
    /**
     * @param string $value
     * @return int
     */
    function wp_convert_hr_to_bytes($value)
    {
    }
    /**
     * @param string $setting
     * @return bool
     */
    function wp_is_ini_value_changeable($setting)
    {
    }
    /**
     * @return bool
     */
    function wp_doing_ajax()
    {
    }
    /**
     * @return bool
     */
    function wp_using_themes()
    {
    }
    /**
     * @return bool
     */
    function wp_doing_cron()
    {
    }
    /**
     * @param mixed $thing
     * @return bool
     * @phpstan-assert-if-true \WP_Error $thing
     * @phpstan-return ($thing is \WP_Error ? true : false)
     */
    function is_wp_error($thing)
    {
    }
    /**
     * @param string $context
     * @return bool
     */
    function wp_is_file_mod_allowed($context)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_start_scraping_edited_file_errors()
    {
    }
    /**
     * @param string $scrape_key
     */
    function wp_finalize_scraping_edited_file_errors($scrape_key)
    {
    }
    /**
     * @return bool
     */
    function wp_is_json_request()
    {
    }
    /**
     * @return bool
     */
    function wp_is_jsonp_request()
    {
    }
    /**
     * @param string $media_type
     * @return bool
     */
    function wp_is_json_media_type($media_type)
    {
    }
    /**
     * @return bool
     */
    function wp_is_xml_request()
    {
    }
    /**
     * @phpstan-param 'login'|'admin'|'front' $context
     * @return bool
     */
    function wp_is_site_protected_by_basic_auth($context = '')
    {
    }
    function wp_underscore_audio_template()
    {
    }
    function wp_underscore_video_template()
    {
    }
    function wp_print_media_templates()
    {
    }
    /**
     * WordPress API for media display.
     *
     * @package WordPress
     * @subpackage Media
     */
    /**
     * @return array
     */
    function wp_get_additional_image_sizes()
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @param string|int[] $size
     * @param string $context
     * @phpstan-return array{
     *   0: int,
     *   1: int,
     * }
     */
    function image_constrain_size_for_editor($width, $height, $size = 'medium', $context = \null)
    {
    }
    /**
     * @param int|string $width
     * @param int|string $height
     * @return string
     */
    function image_hwstring($width, $height)
    {
    }
    /**
     * @param int $id
     * @param string|int[] $size
     * @phpstan-return false|array{
     *   0: string,
     *   1: int,
     *   2: int,
     *   3: bool,
     * }
     */
    function image_downsize($id, $size = 'medium')
    {
    }
    /**
     * @param string $name
     * @param int $width
     * @param int $height
     * @phpstan-param bool|array{
     *   0: string,
     *   1: string,
     * } $crop
     */
    function add_image_size($name, $width = 0, $height = 0, $crop = \false)
    {
    }
    /**
     * @param string $name
     * @return bool
     */
    function has_image_size($name)
    {
    }
    /**
     * @param string $name
     * @return bool
     */
    function remove_image_size($name)
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @phpstan-param bool|array{
     *   0: string,
     *   1: string,
     * } $crop
     */
    function set_post_thumbnail_size($width = 0, $height = 0, $crop = \false)
    {
    }
    /**
     * @param int $id
     * @param string $alt
     * @param string $title
     * @param string $align
     * @param string|int[] $size
     * @return string
     */
    function get_image_tag($id, $alt, $title, $align, $size = 'medium')
    {
    }
    /**
     * @param int $current_width
     * @param int $current_height
     * @param int $max_width
     * @param int $max_height
     * @phpstan-return array{
     *   0: int,
     *   1: int,
     * }
     */
    function wp_constrain_dimensions($current_width, $current_height, $max_width = 0, $max_height = 0)
    {
    }
    /**
     * @param int $orig_w
     * @param int $orig_h
     * @param int $dest_w
     * @param int $dest_h
     * @phpstan-param bool|array{
     *   0: string,
     *   1: string,
     * } $crop
     * @return array|false
     */
    function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = \false)
    {
    }
    /**
     * @param string $file
     * @param int $width
     * @param int $height
     * @phpstan-param bool|array{
     *   0: string,
     *   1: string,
     * } $crop
     * @return array|false
     */
    function image_make_intermediate_size($file, $width, $height, $crop = \false)
    {
    }
    /**
     * @param int $source_width
     * @param int $source_height
     * @param int $target_width
     * @param int $target_height
     * @return bool
     */
    function wp_image_matches_ratio($source_width, $source_height, $target_width, $target_height)
    {
    }
    /**
     * @param int $post_id
     * @param string|int[] $size
     * @phpstan-return false|array{
     *   file: string,
     *   width: int,
     *   height: int,
     *   path: string,
     *   url: string,
     * }
     */
    function image_get_intermediate_size($post_id, $size = 'thumbnail')
    {
    }
    /**
     * @return string[]
     */
    function get_intermediate_image_sizes()
    {
    }
    /**
     * @return array[]
     */
    function wp_get_registered_image_subsizes()
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @param bool $icon
     * @phpstan-return false|array{
     *   0: string,
     *   1: int,
     *   2: int,
     *   3: bool,
     * }
     */
    function wp_get_attachment_image_src($attachment_id, $size = 'thumbnail', $icon = \false)
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @param bool $icon
     * @phpstan-param array{
     *   src?: string,
     *   class?: string,
     *   alt?: string,
     *   srcset?: string,
     *   sizes?: string,
     *   loading?: string|false,
     *   decoding?: string,
     *   fetchpriority?: string,
     * } $attr
     * @return string
     */
    function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = \false, $attr = '')
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @param bool $icon
     * @return string|false
     */
    function wp_get_attachment_image_url($attachment_id, $size = 'thumbnail', $icon = \false)
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function _wp_get_attachment_relative_path($file)
    {
    }
    /**
     * @param string $size_name
     * @param array $image_meta
     * @phpstan-return false|array{
     *   0: int,
     *   1: int,
     * }
     */
    function _wp_get_image_size_from_meta($size_name, $image_meta)
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @param array|null $image_meta
     * @return string|false
     */
    function wp_get_attachment_image_srcset($attachment_id, $size = 'medium', $image_meta = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   0: int,
     *   1: int,
     * } $size_array
     * @param string $image_src
     * @param array $image_meta
     * @param int $attachment_id
     * @return string|false
     */
    function wp_calculate_image_srcset($size_array, $image_src, $image_meta, $attachment_id = 0)
    {
    }
    /**
     * @param int $attachment_id
     * @param string|int[] $size
     * @param array|null $image_meta
     * @return string|false
     */
    function wp_get_attachment_image_sizes($attachment_id, $size = 'medium', $image_meta = \null)
    {
    }
    /**
     * @param string|int[] $size
     * @param string|null $image_src
     * @param array|null $image_meta
     * @param int $attachment_id
     * @return string|false
     */
    function wp_calculate_image_sizes($size, $image_src = \null, $image_meta = \null, $attachment_id = 0)
    {
    }
    /**
     * @param string $image_location
     * @param array $image_meta
     * @param int $attachment_id
     * @return bool
     */
    function wp_image_file_matches_image_meta($image_location, $image_meta, $attachment_id = 0)
    {
    }
    /**
     * @param string $image_src
     * @param array $image_meta
     * @param int $attachment_id
     * @return array|false
     */
    function wp_image_src_get_dimensions($image_src, $image_meta, $attachment_id = 0)
    {
    }
    /**
     * @param string $image
     * @param array $image_meta
     * @param int $attachment_id
     * @return string
     */
    function wp_image_add_srcset_and_sizes($image, $image_meta, $attachment_id)
    {
    }
    /**
     * @param string $tag_name
     * @param string $context
     * @return bool
     */
    function wp_lazy_loading_enabled($tag_name, $context)
    {
    }
    /**
     * @param string $content
     * @param string $context
     * @return string
     */
    function wp_filter_content_tags($content, $context = \null)
    {
    }
    /**
     * @param string $image
     * @param string $context
     * @return string
     */
    function wp_img_tag_add_loading_optimization_attrs($image, $context)
    {
    }
    /**
     * @param string $image
     * @param string $context
     * @param int $attachment_id
     * @return string
     */
    function wp_img_tag_add_width_and_height_attr($image, $context, $attachment_id)
    {
    }
    /**
     * @param string $image
     * @param string $context
     * @param int $attachment_id
     * @return string
     */
    function wp_img_tag_add_srcset_and_sizes_attr($image, $context, $attachment_id)
    {
    }
    /**
     * @param string $iframe
     * @param string $context
     * @return string
     */
    function wp_iframe_tag_add_loading_attr($iframe, $context)
    {
    }
    /**
     * @param string[] $attr
     * @return string[]
     */
    function _wp_post_thumbnail_class_filter($attr)
    {
    }
    /**
     * @param string[] $attr
     */
    function _wp_post_thumbnail_class_filter_add($attr)
    {
    }
    /**
     * @param string[] $attr
     */
    function _wp_post_thumbnail_class_filter_remove($attr)
    {
    }
    /**
     * @param string $context
     * @return string
     */
    function _wp_post_thumbnail_context_filter($context)
    {
    }
    function _wp_post_thumbnail_context_filter_add()
    {
    }
    function _wp_post_thumbnail_context_filter_remove()
    {
    }
    /**
     * @phpstan-param array{
     *   id?: string,
     *   caption_id?: string,
     *   align?: string,
     *   width?: int,
     *   caption?: string,
     *   class?: string,
     * } $attr
     * @param string $content
     * @return string
     */
    function img_caption_shortcode($attr, $content = '')
    {
    }
    /**
     * @phpstan-param array{
     *   order?: string,
     *   orderby?: string,
     *   id?: int,
     *   itemtag?: string,
     *   icontag?: string,
     *   captiontag?: string,
     *   columns?: int,
     *   size?: string|int[],
     *   ids?: string,
     *   include?: string,
     *   exclude?: string,
     *   link?: string,
     * } $attr
     * @return string
     */
    function gallery_shortcode($attr)
    {
    }
    function wp_underscore_playlist_templates()
    {
    }
    /**
     * @phpstan-param 'audio'|'video' $type
     */
    function wp_playlist_scripts($type)
    {
    }
    /**
     * @phpstan-param array{
     *   type?: string,
     *   order?: string,
     *   orderby?: string,
     *   id?: int,
     *   ids?: array,
     *   exclude?: array,
     *   style?: string,
     *   tracklist?: bool,
     *   tracknumbers?: bool,
     *   images?: bool,
     *   artists?: bool,
     * } $attr
     * @return string
     */
    function wp_playlist_shortcode($attr)
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function wp_mediaelement_fallback($url)
    {
    }
    /**
     * @return string[]
     */
    function wp_get_audio_extensions()
    {
    }
    /**
     * @param \WP_Post $attachment
     * @param string $context
     * @return string[]
     */
    function wp_get_attachment_id3_keys($attachment, $context = 'display')
    {
    }
    /**
     * @phpstan-param array{
     *   src?: string,
     *   loop?: string,
     *   autoplay?: string,
     *   preload?: string,
     *   class?: string,
     *   style?: string,
     * } $attr
     * @param string $content
     * @return string|void
     */
    function wp_audio_shortcode($attr, $content = '')
    {
    }
    /**
     * @return string[]
     */
    function wp_get_video_extensions()
    {
    }
    /**
     * @phpstan-param array{
     *   src?: string,
     *   height?: int,
     *   width?: int,
     *   poster?: string,
     *   loop?: string,
     *   autoplay?: string,
     *   muted?: string,
     *   preload?: string,
     *   class?: string,
     * } $attr
     * @param string $content
     * @return string|void
     */
    function wp_video_shortcode($attr, $content = '')
    {
    }
    /**
     * @param string|int[] $size
     * @param string|false $text
     * @return string
     */
    function get_previous_image_link($size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param string|int[] $size
     * @param string|false $text
     */
    function previous_image_link($size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param string|int[] $size
     * @param string|false $text
     * @return string
     */
    function get_next_image_link($size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param string|int[] $size
     * @param string|false $text
     */
    function next_image_link($size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param bool $prev
     * @param string|int[] $size
     * @param bool $text
     * @return string
     */
    function get_adjacent_image_link($prev = \true, $size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param bool $prev
     * @param string|int[] $size
     * @param bool $text
     */
    function adjacent_image_link($prev = \true, $size = 'thumbnail', $text = \false)
    {
    }
    /**
     * @param int|array|object $attachment
     * @param string $output
     * @return string[]|\WP_Taxonomy[]
     * @phpstan-return ($output is 'names' ? array<int, string> : array<string, \WP_Taxonomy>)
     */
    function get_attachment_taxonomies($attachment, $output = 'names')
    {
    }
    /**
     * @phpstan-param 'names'|'objects' $output
     * @return string[]|\WP_Taxonomy[]
     * @phpstan-return ($output is 'names' ? array<int, string> : array<string, \WP_Taxonomy>)
     */
    function get_taxonomies_for_attachments($output = 'names')
    {
    }
    /**
     * @param resource|\GdImage|false $image
     * @return bool
     */
    function is_gd_image($image)
    {
    }
    /**
     * @param int $width
     * @param int $height
     * @return resource|\GdImage|false
     */
    function wp_imagecreatetruecolor($width, $height)
    {
    }
    /**
     * @param int $example_width
     * @param int $example_height
     * @param int $max_width
     * @param int $max_height
     * @phpstan-return array{
     *   0: int,
     *   1: int,
     * }
     */
    function wp_expand_dimensions($example_width, $example_height, $max_width, $max_height)
    {
    }
    /**
     * @return int
     */
    function wp_max_upload_size()
    {
    }
    /**
     * @param string $path
     * @param array $args
     * @return \WP_Image_Editor|\WP_Error
     */
    function wp_get_image_editor($path, $args = array())
    {
    }
    /**
     * @param string|array $args
     * @return bool
     */
    function wp_image_editor_supports($args = array())
    {
    }
    /**
     * @param array $args
     * @return string|false
     */
    function _wp_image_editor_choose($args = array())
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_plupload_default_settings()
    {
    }
    /**
     * @param int|\WP_Post $attachment
     * @phpstan-return void|array{
     *   alt: string,
     *   author: string,
     *   authorName: string,
     *   caption: string,
     *   compat: array,
     *   context: string,
     *   date: int,
     *   dateFormatted: string,
     *   description: string,
     *   editLink: string,
     *   filename: string,
     *   filesizeHumanReadable: string,
     *   filesizeInBytes: int,
     *   height: int,
     *   icon: string,
     *   id: int,
     *   link: string,
     *   menuOrder: int,
     *   meta: array,
     *   mime: string,
     *   modified: int,
     *   name: string,
     *   nonces: array,
     *   orientation: string,
     *   sizes: array,
     *   status: string,
     *   subtype: string,
     *   title: string,
     *   type: string,
     *   uploadedTo: int,
     *   uploadedToLink: string,
     *   uploadedToTitle: string,
     *   url: string,
     *   width: int,
     * }
     */
    function wp_prepare_attachment_for_js($attachment)
    {
    }
    /**
     * @phpstan-param array{
     *   post?: int|WP_Post,
     * } $args
     * @phpstan-return void
     */
    function wp_enqueue_media($args = array())
    {
    }
    /**
     * @param string $type
     * @param int|\WP_Post $post
     * @return \WP_Post[]
     */
    function get_attached_media($type, $post = 0)
    {
    }
    /**
     * @param string $content
     * @param string[] $types
     * @return string[]
     */
    function get_media_embedded_in_content($content, $types = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $html
     * @return array
     */
    function get_post_galleries($post, $html = \true)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $html
     * @return string|array
     */
    function get_post_gallery($post = 0, $html = \true)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return array
     */
    function get_post_galleries_images($post = 0)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string[]
     */
    function get_post_gallery_images($post = 0)
    {
    }
    /**
     * @param \WP_Post $attachment
     * @phpstan-return void
     */
    function wp_maybe_generate_attachment_metadata($attachment)
    {
    }
    /**
     * @param string $url
     * @return int
     */
    function attachment_url_to_postid($url)
    {
    }
    /**
     * @return string[]
     */
    function wpview_media_sandbox_styles()
    {
    }
    /**
     * @param array[] $exporters
     * @return array[]
     */
    function wp_register_media_personal_data_exporter($exporters)
    {
    }
    /**
     * @param string $email_address
     * @param int $page
     * @phpstan-return array{
     *   data: array[],
     *   done: bool,
     * }
     */
    function wp_media_personal_data_exporter($email_address, $page = 1)
    {
    }
    function _wp_add_additional_image_sizes()
    {
    }
    /**
     * @param array[] $plupload_settings
     * @return array[]
     */
    function wp_show_heic_upload_error($plupload_settings)
    {
    }
    /**
     * @param string $filename
     * @param array $image_info
     * @return array|false
     */
    function wp_getimagesize($filename, ?array &$image_info = \null)
    {
    }
    /**
     * @param string $filename
     * @phpstan-return array{
     *   width: int|false,
     *   height: int|false,
     *   bit_depth: int|false,
     *   num_channels: int|false,
     * }
     */
    function wp_get_avif_info($filename)
    {
    }
    /**
     * @param string $filename
     * @phpstan-return array{
     *   width: int|false,
     *   height: int|false,
     *   type: string|false,
     * }
     */
    function wp_get_webp_info($filename)
    {
    }
    /**
     * @param string $tag_name
     * @param array $attr
     * @param string $context
     * @return array
     */
    function wp_get_loading_optimization_attributes($tag_name, $attr, $context)
    {
    }
    /**
     * @param bool $force
     * @return int
     */
    function wp_omit_loading_attr_threshold($force = \false)
    {
    }
    /**
     * @param int $amount
     * @return int
     */
    function wp_increase_content_media_count($amount = 1)
    {
    }
    /**
     * @param array $loading_attrs
     * @param string $tag_name
     * @param array $attr
     * @return array
     */
    function wp_maybe_add_fetchpriority_high_attr($loading_attrs, $tag_name, $attr)
    {
    }
    /**
     * @param bool $value
     * @return bool
     */
    function wp_high_priority_element_flag($value = \null)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false
     */
    function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool
     */
    function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $delete_all
     * @return bool
     */
    function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param bool $single
     * @return mixed
     */
    function get_metadata($meta_type, $object_id, $meta_key = '', $single = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param bool $single
     * @return mixed
     */
    function get_metadata_raw($meta_type, $object_id, $meta_key = '', $single = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @param bool $single
     * @return mixed
     */
    function get_metadata_default($meta_type, $object_id, $meta_key, $single = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $object_id
     * @param string $meta_key
     * @return bool
     */
    function metadata_exists($meta_type, $object_id, $meta_key)
    {
    }
    /**
     * @param string $meta_type
     * @param int $meta_id
     * @phpstan-return false|object{
     *   meta_key: string,
     *   meta_value: mixed,
     *   meta_id: string,
     *   umeta_id: string,
     *   post_id: string,
     *   comment_id: string,
     *   term_id: string,
     *   user_id: string,
     * }
     */
    function get_metadata_by_mid($meta_type, $meta_id)
    {
    }
    /**
     * @param string $meta_type
     * @param int $meta_id
     * @param string $meta_value
     * @param string|false $meta_key
     * @return bool
     */
    function update_metadata_by_mid($meta_type, $meta_id, $meta_value, $meta_key = \false)
    {
    }
    /**
     * @param string $meta_type
     * @param int $meta_id
     * @return bool
     */
    function delete_metadata_by_mid($meta_type, $meta_id)
    {
    }
    /**
     * @param string $meta_type
     * @param string|int[] $object_ids
     * @return array|false
     */
    function update_meta_cache($meta_type, $object_ids)
    {
    }
    /**
     * @return \WP_Metadata_Lazyloader
     */
    function wp_metadata_lazyloader()
    {
    }
    /**
     * @param array $meta_query
     * @param string $type
     * @param string $primary_table
     * @param string $primary_id_column
     * @param object $context
     * @phpstan-return false|array{
     *   join: string,
     *   where: string,
     * }
     */
    function get_meta_sql($meta_query, $type, $primary_table, $primary_id_column, $context = \null)
    {
    }
    /**
     * @param string $type
     * @return string|false
     */
    function _get_meta_table($type)
    {
    }
    /**
     * @param string $meta_key
     * @param string $meta_type
     * @return bool
     */
    function is_protected_meta($meta_key, $meta_type = '')
    {
    }
    /**
     * @param string $meta_key
     * @param mixed $meta_value
     * @param string $object_type
     * @param string $object_subtype
     * @return mixed
     */
    function sanitize_meta($meta_key, $meta_value, $object_type, $object_subtype = '')
    {
    }
    /**
     * @param string $object_type
     * @param string $meta_key
     * @phpstan-param array{
     *   object_subtype?: string,
     *   type?: string,
     *   description?: string,
     *   single?: bool,
     *   default?: mixed,
     *   sanitize_callback?: callable,
     *   auth_callback?: callable,
     *   show_in_rest?: bool|array,
     *   revisions_enabled?: bool,
     * } $args
     * @param string|array $deprecated
     * @return bool
     */
    function register_meta($object_type, $meta_key, $args, $deprecated = \null)
    {
    }
    /**
     * @param mixed $value
     * @param int $object_id
     * @param string $meta_key
     * @param bool $single
     * @param string $meta_type
     * @return mixed
     */
    function filter_default_metadata($value, $object_id, $meta_key, $single, $meta_type)
    {
    }
    /**
     * @param string $object_type
     * @param string $meta_key
     * @param string $object_subtype
     * @return bool
     */
    function registered_meta_key_exists($object_type, $meta_key, $object_subtype = '')
    {
    }
    /**
     * @param string $object_type
     * @param string $meta_key
     * @param string $object_subtype
     * @return bool
     */
    function unregister_meta_key($object_type, $meta_key, $object_subtype = '')
    {
    }
    /**
     * @param string $object_type
     * @param string $object_subtype
     * @return array[]
     */
    function get_registered_meta_keys($object_type, $object_subtype = '')
    {
    }
    /**
     * @param string $object_type
     * @param int $object_id
     * @param string $meta_key
     * @return mixed
     */
    function get_registered_metadata($object_type, $object_id, $meta_key = '')
    {
    }
    /**
     * @param array $args
     * @param array $default_args
     * @return array
     */
    function _wp_register_meta_args_allowed_list($args, $default_args)
    {
    }
    /**
     * @param string $object_type
     * @param int $object_id
     * @return string
     */
    function get_object_subtype($object_type, $object_id)
    {
    }
    function wpmu_update_blogs_date()
    {
    }
    /**
     * @param int $blog_id
     * @return string
     */
    function get_blogaddress_by_id($blog_id)
    {
    }
    /**
     * @param string $blogname
     * @return string
     */
    function get_blogaddress_by_name($blogname)
    {
    }
    /**
     * @param string $slug
     * @return int|null
     */
    function get_id_from_blogname($slug)
    {
    }
    /**
     * @param int|string|array $fields
     * @param bool $get_all
     * @return \WP_Site|false
     */
    function get_blog_details($fields = \null, $get_all = \true)
    {
    }
    /**
     * @param int $blog_id
     */
    function refresh_blog_details($blog_id = 0)
    {
    }
    /**
     * @param int $blog_id
     * @param array $details
     * @return bool
     */
    function update_blog_details($blog_id, $details = array())
    {
    }
    /**
     * @param int $site_id
     */
    function clean_site_details_cache($site_id = 0)
    {
    }
    /**
     * @param int $id
     * @param string $option
     * @param mixed $default_value
     * @return mixed
     */
    function get_blog_option($id, $option, $default_value = \false)
    {
    }
    /**
     * @param int $id
     * @param string $option
     * @param mixed $value
     * @return bool
     */
    function add_blog_option($id, $option, $value)
    {
    }
    /**
     * @param int $id
     * @param string $option
     * @return bool
     */
    function delete_blog_option($id, $option)
    {
    }
    /**
     * @param int $id
     * @param string $option
     * @param mixed $value
     * @param mixed $deprecated
     * @return bool
     */
    function update_blog_option($id, $option, $value, $deprecated = \null)
    {
    }
    /**
     * @param int $new_blog_id
     * @param bool $deprecated
     * @return true
     */
    function switch_to_blog($new_blog_id, $deprecated = \null)
    {
    }
    /**
     * @return bool
     */
    function restore_current_blog()
    {
    }
    /**
     * @param int $new_site_id
     * @param int $old_site_id
     * @phpstan-return void
     */
    function wp_switch_roles_and_user($new_site_id, $old_site_id)
    {
    }
    /**
     * @return bool
     */
    function ms_is_switched()
    {
    }
    /**
     * @param int $id
     * @return string
     */
    function is_archived($id)
    {
    }
    /**
     * @param int $id
     * @param string $archived
     * @return string
     */
    function update_archived($id, $archived)
    {
    }
    /**
     * @param int $blog_id
     * @param string $pref
     * @param string $value
     * @param null $deprecated
     * @return string|false
     */
    function update_blog_status($blog_id, $pref, $value, $deprecated = \null)
    {
    }
    /**
     * @param int $id
     * @param string $pref
     * @return bool|string|null
     */
    function get_blog_status($id, $pref)
    {
    }
    /**
     * @param mixed $deprecated
     * @param int $start
     * @param int $quantity
     * @return array
     */
    function get_last_updated($deprecated = '', $start = 0, $quantity = 40)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _update_blog_date_on_post_publish($new_status, $old_status, $post)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function _update_blog_date_on_post_delete($post_id)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _update_posts_count_on_delete($post_id, $post)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _update_posts_count_on_transition_post_status($new_status, $old_status, $post = \null)
    {
    }
    /**
     * @param int $network_id
     * @phpstan-return array{
     *   all: int,
     *   public: int,
     *   archived: int,
     *   mature: int,
     *   spam: int,
     *   deleted: int,
     * }
     */
    function wp_count_sites($network_id = \null)
    {
    }
    /**
     * Defines constants and global variables that can be overridden, generally in wp-config.php.
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 3.0.0
     */
    /**
     * @phpstan-return void
     */
    function ms_upload_constants()
    {
    }
    function ms_cookie_constants()
    {
    }
    function ms_file_constants()
    {
    }
    /**
     * @phpstan-return void
     */
    function ms_subdomain_constants()
    {
    }
    /**
     * Deprecated functions from WordPress MU and the multisite feature. You shouldn't
     * use these functions and look for the alternatives instead. The functions will be
     * removed in a later version.
     *
     * @package WordPress
     * @subpackage Deprecated
     * @since 3.0.0
     */
    /*
     * Deprecated functions come here to die.
     */
    /**
     * @return \WP_Site
     */
    function get_dashboard_blog()
    {
    }
    /**
     * @param int $len
     */
    function generate_random_password($len = 8)
    {
    }
    /**
     * @param string $user_login
     */
    function is_site_admin($user_login = '')
    {
    }
    /**
     * @phpstan-return never
     */
    function graceful_fail($message)
    {
    }
    /**
     * @param string $username
     */
    function get_user_details($username)
    {
    }
    /**
     * @param int $post_id
     */
    function clear_global_post_cache($post_id)
    {
    }
    function is_main_blog()
    {
    }
    /**
     * @param string $email
     * @param bool $check_domain
     * @return string|false
     */
    function validate_email($email, $check_domain = \true)
    {
    }
    /**
     * @param int $start
     * @param int $num
     * @param string $deprecated
     */
    function get_blog_list($start = 0, $num = 10, $deprecated = '')
    {
    }
    /**
     * @param int $num
     * @param bool $display
     * @return array
     */
    function get_most_active_blogs($num = 10, $display = \true)
    {
    }
    /**
     * @param string $url
     * @phpstan-return never
     */
    function wpmu_admin_do_redirect($url = '')
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function wpmu_admin_redirect_add_updated_param($url = '')
    {
    }
    /**
     * @param string $email_or_login
     * @return int
     */
    function get_user_id_from_string($email_or_login)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @return string
     */
    function get_blogaddress_by_domain($domain, $path)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $weblog_title
     * @param int $site_id
     * @return string|int
     */
    function create_empty_blog($domain, $path, $weblog_title, $site_id = 1)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @return array|false
     */
    function get_admin_users_for_domain($domain = '', $path = '')
    {
    }
    /**
     * @phpstan-param array{
     *   network_id?: int|int[],
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   limit?: int,
     *   offset?: int,
     * } $args
     * @return array[]
     */
    function wp_get_sites($args = array())
    {
    }
    /**
     * @param string $key
     * @param int $user_id
     * @param int $blog_id
     * @return bool
     */
    function is_user_option_local($key, $user_id = 0, $blog_id = 0)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param int $site_id
     * @return int|false
     */
    function insert_blog($domain, $path, $site_id)
    {
    }
    /**
     * @param int $blog_id
     * @param string $blog_title
     */
    function install_blog($blog_id, $blog_title = '')
    {
    }
    /**
     * @param int $blog_id
     * @param int $user_id
     */
    function install_blog_defaults($blog_id, $user_id)
    {
    }
    /**
     * @param int $id
     * @param string $pref
     * @param int $value
     * @param null $deprecated
     * @return int
     */
    function update_user_status($id, $pref, $value, $deprecated = \null)
    {
    }
    /**
     * @param int $term_id
     * @param string $deprecated
     * @return int
     */
    function global_terms($term_id, $deprecated = '')
    {
    }
    /**
     * Multisite WordPress API
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 3.0.0
     */
    /**
     * @phpstan-return array{
     *   blogs: int,
     *   users: int,
     * }
     */
    function get_sitestats()
    {
    }
    /**
     * @param int $user_id
     * @return \WP_Site|void
     */
    function get_active_blog_for_user($user_id)
    {
    }
    /**
     * @param int|null $network_id
     * @return int
     */
    function get_blog_count($network_id = \null)
    {
    }
    /**
     * @param int $blog_id
     * @param int $post_id
     * @return \WP_Post|null
     */
    function get_blog_post($blog_id, $post_id)
    {
    }
    /**
     * @param int $blog_id
     * @param int $user_id
     * @param string $role
     * @return true|\WP_Error
     */
    function add_user_to_blog($blog_id, $user_id, $role)
    {
    }
    /**
     * @param int $user_id
     * @param int $blog_id
     * @param int $reassign
     * @return true|\WP_Error
     */
    function remove_user_from_blog($user_id, $blog_id = 0, $reassign = 0)
    {
    }
    /**
     * @param int $blog_id
     * @param int $post_id
     * @return string
     */
    function get_blog_permalink($blog_id, $post_id)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @return int
     */
    function get_blog_id_from_url($domain, $path = '/')
    {
    }
    //
    // Admin functions.
    //
    /**
     * @param string $user_email
     * @return bool
     */
    function is_email_address_unsafe($user_email)
    {
    }
    /**
     * @param string $user_name
     * @param string $user_email
     * @phpstan-return array{
     *   user_name: string,
     *   orig_username: string,
     *   user_email: string,
     *   errors: WP_Error,
     * }
     */
    function wpmu_validate_user_signup($user_name, $user_email)
    {
    }
    /**
     * @param string $blogname
     * @param string $blog_title
     * @param \WP_User|string $user
     * @phpstan-return array{
     *   domain: string,
     *   path: string,
     *   blogname: string,
     *   blog_title: string,
     *   user: string|WP_User,
     *   errors: WP_Error,
     * }
     */
    function wpmu_validate_blog_signup($blogname, $blog_title, $user = '')
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $title
     * @param string $user
     * @param string $user_email
     * @param array $meta
     */
    function wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta = array())
    {
    }
    /**
     * @param string $user
     * @param string $user_email
     * @param array $meta
     */
    function wpmu_signup_user($user, $user_email, $meta = array())
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $title
     * @param string $user_login
     * @param string $user_email
     * @param string $key
     * @param array $meta
     * @return bool
     */
    function wpmu_signup_blog_notification($domain, $path, $title, $user_login, $user_email, $key, $meta = array())
    {
    }
    /**
     * @param string $user_login
     * @param string $user_email
     * @param string $key
     * @param array $meta
     * @return bool
     */
    function wpmu_signup_user_notification($user_login, $user_email, $key, $meta = array())
    {
    }
    /**
     * @param string $key
     * @return array|\WP_Error
     */
    function wpmu_activate_signup($key)
    {
    }
    /**
     * @param int $id
     * @param int|null $reassign
     * @param \WP_User $user
     */
    function wp_delete_signup_on_user_delete($id, $reassign, $user)
    {
    }
    /**
     * @param string $user_name
     * @param string $password
     * @param string $email
     * @return int|false
     */
    function wpmu_create_user($user_name, $password, $email)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $title
     * @param int $user_id
     * @param array $options
     * @param int $network_id
     * @return int|\WP_Error
     */
    function wpmu_create_blog($domain, $path, $title, $user_id, $options = array(), $network_id = 1)
    {
    }
    /**
     * @param \WP_Site|int $blog_id
     * @param string $deprecated
     * @return bool
     */
    function newblog_notify_siteadmin($blog_id, $deprecated = '')
    {
    }
    /**
     * @param int $user_id
     * @return bool
     */
    function newuser_notify_siteadmin($user_id)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param int $network_id
     * @return int|null
     */
    function domain_exists($domain, $path, $network_id = 1)
    {
    }
    /**
     * @param int $blog_id
     * @param int $user_id
     * @param string $password
     * @param string $title
     * @param array $meta
     * @return bool
     */
    function wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta = array())
    {
    }
    /**
     * @param int $site_id
     * @param int $user_id
     * @return bool
     */
    function wpmu_new_site_admin_notification($site_id, $user_id)
    {
    }
    /**
     * @param int $user_id
     * @param string $password
     * @param array $meta
     * @return bool
     */
    function wpmu_welcome_user_notification($user_id, $password, $meta = array())
    {
    }
    /**
     * @return \WP_Network
     */
    function get_current_site()
    {
    }
    /**
     * @param int $user_id
     * @return array
     */
    function get_most_recent_post_of_user($user_id)
    {
    }
    //
    // Misc functions.
    //
    /**
     * @param array $mimes
     * @return array
     */
    function check_upload_mimes($mimes)
    {
    }
    /**
     * @param string $deprecated
     */
    function update_posts_count($deprecated = '')
    {
    }
    /**
     * @param \WP_Site|int $blog_id
     * @param int|array $user_id
     */
    function wpmu_log_new_registrations($blog_id, $user_id)
    {
    }
    /**
     * @param array|string $deprecated
     * @phpstan-return array{
     *   0: string,
     * }
     */
    function redirect_this_site($deprecated = '')
    {
    }
    /**
     * @param array $upload
     * @return string|array
     */
    function upload_is_file_too_big($upload)
    {
    }
    function signup_nonce_fields()
    {
    }
    /**
     * @param array $result
     * @return array
     */
    function signup_nonce_check($result)
    {
    }
    function maybe_redirect_404()
    {
    }
    /**
     * @phpstan-return void
     */
    function maybe_add_existing_user_to_blog()
    {
    }
    /**
     * @phpstan-param false|array{
     *   user_id?: int,
     *   role?: string,
     * } $details
     * @return true|\WP_Error|void
     */
    function add_existing_user_to_blog($details = \false)
    {
    }
    /**
     * @param int $user_id
     * @param string $password
     * @param array $meta
     */
    function add_new_user_to_blog($user_id, $password, $meta)
    {
    }
    /**
     * @param \PHPMailer $phpmailer
     */
    function fix_phpmailer_messageid($phpmailer)
    {
    }
    /**
     * @param string|\WP_User $user
     * @return bool
     */
    function is_user_spammy($user = \null)
    {
    }
    /**
     * @param int $old_value
     * @param int $value
     */
    function update_blog_public($old_value, $value)
    {
    }
    /**
     * @return bool
     */
    function users_can_register_signup_filter()
    {
    }
    /**
     * @param string $text
     * @return string
     */
    function welcome_user_msg_filter($text)
    {
    }
    /**
     * @param bool $force
     * @return bool
     */
    function force_ssl_content($force = '')
    {
    }
    /**
     * @param string $url
     * @return string
     */
    function filter_SSL($url)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_schedule_update_network_counts()
    {
    }
    /**
     * @param int|null $network_id
     */
    function wp_update_network_counts($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     * @phpstan-return void
     */
    function wp_maybe_update_network_site_counts($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     * @phpstan-return void
     */
    function wp_maybe_update_network_user_counts($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     */
    function wp_update_network_site_counts($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     */
    function wp_update_network_user_counts($network_id = \null)
    {
    }
    /**
     * @return int
     */
    function get_space_used()
    {
    }
    /**
     * @return int
     */
    function get_space_allowed()
    {
    }
    /**
     * @return int
     */
    function get_upload_space_available()
    {
    }
    /**
     * @return bool
     */
    function is_upload_space_available()
    {
    }
    /**
     * @param int $size
     * @return int
     */
    function upload_size_limit_filter($size)
    {
    }
    /**
     * @param string $using
     * @param int|null $network_id
     * @return bool
     */
    function wp_is_large_network($using = 'sites', $network_id = \null)
    {
    }
    /**
     * @return string[]
     */
    function get_subdirectory_reserved_names()
    {
    }
    /**
     * @param string $old_value
     * @param string $value
     * @phpstan-return void
     */
    function update_network_option_new_admin_email($old_value, $value)
    {
    }
    /**
     * @param string $option_name
     * @param string $new_email
     * @param string $old_email
     * @param int $network_id
     * @phpstan-return void
     */
    function wp_network_admin_email_change_notification($option_name, $new_email, $old_email, $network_id)
    {
    }
    /**
     * These functions are needed to load Multisite.
     *
     * @since 3.0.0
     *
     * @package WordPress
     * @subpackage Multisite
     */
    /**
     * @return bool
     */
    function is_subdomain_install()
    {
    }
    /**
     * @return string[]
     */
    function wp_get_active_network_plugins()
    {
    }
    /**
     * @return true|string
     */
    function ms_site_check()
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param int|null $segments
     * @return \WP_Network|false
     */
    function get_network_by_path($domain, $path, $segments = \null)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param int|null $segments
     * @return \WP_Site|false
     */
    function get_site_by_path($domain, $path, $segments = \null)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param bool $subdomain
     * @return bool|string
     */
    function ms_load_current_site_and_network($domain, $path, $subdomain = \false)
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @phpstan-return never
     */
    function ms_not_installed($domain, $path)
    {
    }
    /**
     * @param \WP_Network $current_site
     * @return \WP_Network
     */
    function get_current_site_name($current_site)
    {
    }
    /**
     * @return \WP_Network
     */
    function wpmu_current_site()
    {
    }
    /**
     * @param object|int $network
     * @return \WP_Network|false
     */
    function wp_get_network($network)
    {
    }
    /**
     * Network API
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 5.1.0
     */
    /**
     * @param \WP_Network|int|null $network
     * @return \WP_Network|null
     */
    function get_network($network = \null)
    {
    }
    /**
     * @param string|array $args
     * @return array|int
     * @param string|array $args
     */
    function get_networks($args = array())
    {
    }
    /**
     * @param int|array $ids
     * @phpstan-return void
     */
    function clean_network_cache($ids)
    {
    }
    /**
     * @param array $networks
     */
    function update_network_cache($networks)
    {
    }
    /**
     * @param array $network_ids
     */
    function _prime_network_caches($network_ids)
    {
    }
    /**
     * Site API
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 5.1.0
     */
    /**
     * @phpstan-param array{
     *   domain?: string,
     *   path?: string,
     *   network_id?: int,
     *   registered?: string,
     *   last_updated?: string,
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $data
     * @return int|\WP_Error
     */
    function wp_insert_site(array $data)
    {
    }
    /**
     * @param int $site_id
     * @param array $data
     * @return int|\WP_Error
     * @phpstan-param array{
     *   domain?: string,
     *   path?: string,
     *   network_id?: int,
     *   registered?: string,
     *   last_updated?: string,
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $data See wp_insert_site()
     */
    function wp_update_site($site_id, array $data)
    {
    }
    /**
     * @param int $site_id
     * @return \WP_Site|\WP_Error
     */
    function wp_delete_site($site_id)
    {
    }
    /**
     * @param \WP_Site|int|null $site
     * @return \WP_Site|null
     */
    function get_site($site = \null)
    {
    }
    /**
     * @param array $ids
     * @param bool $update_meta_cache
     */
    function _prime_site_caches($ids, $update_meta_cache = \true)
    {
    }
    /**
     * @param array $site_ids
     * @phpstan-return void
     */
    function wp_lazyload_site_meta(array $site_ids)
    {
    }
    /**
     * @param array $sites
     * @param bool $update_meta_cache
     * @phpstan-return void
     */
    function update_site_cache($sites, $update_meta_cache = \true)
    {
    }
    /**
     * @param array $site_ids
     * @return array|false
     */
    function update_sitemeta_cache($site_ids)
    {
    }
    /**
     * @param string|array $args
     * @return array|int
     * @phpstan-param array{
     *   site__in?: int[],
     *   site__not_in?: int[],
     *   count?: bool,
     *   date_query?: array,
     *   fields?: string,
     *   ID?: int,
     *   number?: int,
     *   offset?: int,
     *   no_found_rows?: bool,
     *   orderby?: string|array,
     *   order?: string,
     *   network_id?: int,
     *   network__in?: int[],
     *   network__not_in?: int[],
     *   domain?: string,
     *   domain__in?: string[],
     *   domain__not_in?: string[],
     *   path?: string,
     *   path__in?: string[],
     *   path__not_in?: string[],
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   lang__in?: string[],
     *   lang__not_in?: string[],
     *   search?: string,
     *   search_columns?: string[],
     *   update_site_cache?: bool,
     *   update_site_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Site_Query::__construct()
     */
    function get_sites($args = array())
    {
    }
    /**
     * @param array $data
     * @param array $defaults
     * @param \WP_Site|null $old_site
     * @return array|\WP_Error
     * @phpstan-param array{
     *   domain?: string,
     *   path?: string,
     *   network_id?: int,
     *   registered?: string,
     *   last_updated?: string,
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $data See wp_insert_site()
     */
    function wp_prepare_site_data($data, $defaults, $old_site = \null)
    {
    }
    /**
     * @param array $data
     * @return array
     * @phpstan-param array{
     *   domain?: string,
     *   path?: string,
     *   network_id?: int,
     *   registered?: string,
     *   last_updated?: string,
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $data See wp_insert_site()
     */
    function wp_normalize_site_data($data)
    {
    }
    /**
     * @param \WP_Error $errors
     * @param array $data
     * @param \WP_Site|null $old_site
     * @phpstan-return void
     * @phpstan-param array{
     *   domain?: string,
     *   path?: string,
     *   network_id?: int,
     *   registered?: string,
     *   last_updated?: string,
     *   public?: int,
     *   archived?: int,
     *   mature?: int,
     *   spam?: int,
     *   deleted?: int,
     *   lang_id?: int,
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $data See wp_insert_site()
     */
    function wp_validate_site_data($errors, $data, $old_site = \null)
    {
    }
    /**
     * @param int|\WP_Site $site_id
     * @phpstan-param array{
     *   user_id?: int,
     *   title?: string,
     *   options?: array,
     *   meta?: array,
     * } $args
     * @return true|\WP_Error
     */
    function wp_initialize_site($site_id, array $args = array())
    {
    }
    /**
     * @param int|\WP_Site $site_id
     * @return true|\WP_Error
     */
    function wp_uninitialize_site($site_id)
    {
    }
    /**
     * @param int|\WP_Site $site_id
     * @return bool
     */
    function wp_is_site_initialized($site_id)
    {
    }
    /**
     * @param \WP_Site|int $blog
     * @phpstan-return void
     */
    function clean_blog_cache($blog)
    {
    }
    /**
     * @param int $site_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false
     */
    function add_site_meta($site_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param int $site_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_site_meta($site_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $site_id
     * @param string $key
     * @param bool $single
     * @return mixed
     */
    function get_site_meta($site_id, $key = '', $single = \false)
    {
    }
    /**
     * @param int $site_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool
     */
    function update_site_meta($site_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @param string $meta_key
     * @return bool
     */
    function delete_site_meta_by_key($meta_key)
    {
    }
    /**
     * @param \WP_Site $new_site
     * @param \WP_Site|null $old_site
     * @phpstan-return void
     */
    function wp_maybe_update_network_site_counts_on_update($new_site, $old_site = \null)
    {
    }
    /**
     * @param \WP_Site $new_site
     * @param \WP_Site|null $old_site
     */
    function wp_maybe_transition_site_statuses_on_update($new_site, $old_site = \null)
    {
    }
    /**
     * @param \WP_Site $new_site
     * @param \WP_Site $old_site
     */
    function wp_maybe_clean_new_site_cache_on_update($new_site, $old_site)
    {
    }
    /**
     * @param int $site_id
     * @phpstan-param '1'|'0' $is_public
     * @phpstan-return void
     */
    function wp_update_blog_public_option_on_site_update($site_id, $is_public)
    {
    }
    function wp_cache_set_sites_last_changed()
    {
    }
    /**
     * @param mixed $check
     * @return mixed
     */
    function wp_check_site_meta_support_prefilter($check)
    {
    }
    /**
     * @phpstan-param array{
     *   menu?: int|string|WP_Term,
     *   menu_class?: string,
     *   menu_id?: string,
     *   container?: string,
     *   container_class?: string,
     *   container_id?: string,
     *   container_aria_label?: string,
     *   fallback_cb?: callable|false,
     *   before?: string,
     *   after?: string,
     *   link_before?: string,
     *   link_after?: string,
     *   echo?: bool,
     *   depth?: int,
     *   walker?: object,
     *   theme_location?: string,
     *   items_wrap?: string,
     *   item_spacing?: string,
     * } $args
     * @return void|string|false
     */
    function wp_nav_menu($args = array())
    {
    }
    /**
     * @param array $menu_items
     */
    function _wp_menu_item_classes_by_context(&$menu_items)
    {
    }
    /**
     * @param array $items
     * @param int $depth
     * @param \stdClass $args
     * @return string
     */
    function walk_nav_menu_tree($items, $depth, $args)
    {
    }
    /**
     * @param string $id
     * @param object $item
     * @return string
     */
    function _nav_menu_item_id_use_once($id, $item)
    {
    }
    /**
     * @param string[] $classes
     * @param \WP_Post $menu_item
     * @param \stdClass|false $args
     * @param int|false $depth
     * @return string[]
     */
    function wp_nav_menu_remove_menu_item_has_children_class($classes, $menu_item, $args = \false, $depth = \false)
    {
    }
    /**
     * Navigation Menu functions
     *
     * @package WordPress
     * @subpackage Nav_Menus
     * @since 3.0.0
     */
    /**
     * @param int|string|\WP_Term $menu
     * @return \WP_Term|false
     */
    function wp_get_nav_menu_object($menu)
    {
    }
    /**
     * @param int|string|\WP_Term $menu
     * @return bool
     */
    function is_nav_menu($menu)
    {
    }
    /**
     * @param string[] $locations
     */
    function register_nav_menus($locations = array())
    {
    }
    /**
     * @param string $location
     * @return bool
     */
    function unregister_nav_menu($location)
    {
    }
    /**
     * @param string $location
     * @param string $description
     */
    function register_nav_menu($location, $description)
    {
    }
    /**
     * @return string[]
     */
    function get_registered_nav_menus()
    {
    }
    /**
     * @return int[]
     */
    function get_nav_menu_locations()
    {
    }
    /**
     * @param string $location
     * @return bool
     */
    function has_nav_menu($location)
    {
    }
    /**
     * @param string $location
     * @return string
     */
    function wp_get_nav_menu_name($location)
    {
    }
    /**
     * @param int $menu_item_id
     * @return bool
     */
    function is_nav_menu_item($menu_item_id = 0)
    {
    }
    /**
     * @param string $menu_name
     * @return int|\WP_Error
     */
    function wp_create_nav_menu($menu_name)
    {
    }
    /**
     * @param int|string|\WP_Term $menu
     * @return bool|\WP_Error
     */
    function wp_delete_nav_menu($menu)
    {
    }
    /**
     * @param int $menu_id
     * @param array $menu_data
     * @return int|\WP_Error
     */
    function wp_update_nav_menu_object($menu_id = 0, $menu_data = array())
    {
    }
    /**
     * @param int $menu_id
     * @param int $menu_item_db_id
     * @param array $menu_item_data
     * @param bool $fire_after_hooks
     * @return int|\WP_Error
     */
    function wp_update_nav_menu_item($menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array(), $fire_after_hooks = \true)
    {
    }
    /**
     * @param array $args
     * @return \WP_Term[]
     */
    function wp_get_nav_menus($args = array())
    {
    }
    /**
     * @param object $item
     * @return bool
     */
    function _is_valid_nav_menu_item($item)
    {
    }
    /**
     * @param int|string|\WP_Term $menu
     * @phpstan-param array{
     *   order?: string,
     *   orderby?: string,
     *   post_type?: string,
     *   post_status?: string,
     *   output?: string,
     *   output_key?: string,
     *   nopaging?: bool,
     *   update_menu_item_cache?: bool,
     * } $args
     * @return array|false
     */
    function wp_get_nav_menu_items($menu, $args = array())
    {
    }
    /**
     * @param \WP_Post[] $menu_items
     */
    function update_menu_item_cache($menu_items)
    {
    }
    /**
     * @param object $menu_item
     * @return object
     */
    function wp_setup_nav_menu_item($menu_item)
    {
    }
    /**
     * @param int $object_id
     * @param string $object_type
     * @param string $taxonomy
     * @return int[]
     */
    function wp_get_associated_nav_menu_items($object_id = 0, $object_type = 'post_type', $taxonomy = '')
    {
    }
    /**
     * @param int $object_id
     */
    function _wp_delete_post_menu_item($object_id)
    {
    }
    /**
     * @param int $object_id
     * @param int $tt_id
     * @param string $taxonomy
     */
    function _wp_delete_tax_menu_item($object_id, $tt_id, $taxonomy)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _wp_auto_add_pages_to_menu($new_status, $old_status, $post)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function _wp_delete_customize_changeset_dependent_auto_drafts($post_id)
    {
    }
    function _wp_menus_changed()
    {
    }
    /**
     * @param array $new_nav_menu_locations
     * @param array $old_nav_menu_locations
     * @return array
     */
    function wp_map_nav_menu_locations($new_nav_menu_locations, $old_nav_menu_locations)
    {
    }
    /**
     * @param array $menu_item_data
     * @return array
     */
    function _wp_reset_invalid_menu_item_parent($menu_item_data)
    {
    }
    /**
     * Option API
     *
     * @package WordPress
     * @subpackage Option
     */
    /**
     * @param string $option
     * @param mixed $default_value
     * @return mixed
     */
    function get_option($option, $default_value = \false)
    {
    }
    /**
     * @param string[] $options
     * @phpstan-return void
     */
    function wp_prime_option_caches($options)
    {
    }
    /**
     * @param string $option_group
     */
    function wp_prime_option_caches_by_group($option_group)
    {
    }
    /**
     * @param string[] $options
     * @return array
     */
    function get_options($options)
    {
    }
    /**
     * @param array $options
     * @return array
     */
    function wp_set_option_autoload_values(array $options)
    {
    }
    /**
     * @param string[] $options
     * @param string|bool $autoload
     * @return array
     */
    function wp_set_options_autoload(array $options, $autoload)
    {
    }
    /**
     * @param string $option
     * @param string|bool $autoload
     * @return bool
     */
    function wp_set_option_autoload($option, $autoload)
    {
    }
    /**
     * @param string $option
     */
    function wp_protect_special_option($option)
    {
    }
    /**
     * @param string $option
     */
    function form_option($option)
    {
    }
    /**
     * @param bool $force_cache
     * @return array
     */
    function wp_load_alloptions($force_cache = \false)
    {
    }
    /**
     * @param string[] $options
     */
    function wp_prime_site_option_caches(array $options)
    {
    }
    /**
     * @param int $network_id
     * @param string[] $options
     * @phpstan-return void
     */
    function wp_prime_network_option_caches($network_id, array $options)
    {
    }
    /**
     * @param int $network_id
     * @phpstan-return void
     */
    function wp_load_core_site_options($network_id = \null)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @param bool|null $autoload
     * @return bool
     */
    function update_option($option, $value, $autoload = \null)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @param string $deprecated
     * @param bool|null $autoload
     * @return bool
     */
    function add_option($option, $value = '', $deprecated = '', $autoload = \null)
    {
    }
    /**
     * @param string $option
     * @return bool
     */
    function delete_option($option)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @param mixed $serialized_value
     * @param bool|null $autoload
     * @return string
     */
    function wp_determine_option_autoload_value($option, $value, $serialized_value, $autoload)
    {
    }
    /**
     * @param bool|null $autoload
     * @param string $option
     * @param mixed $value
     * @param mixed $serialized_value
     * @return bool|null
     */
    function wp_filter_default_autoload_value_via_option_size($autoload, $option, $value, $serialized_value)
    {
    }
    /**
     * @param string $transient
     * @return bool
     */
    function delete_transient($transient)
    {
    }
    /**
     * @param string $transient
     * @return mixed
     */
    function get_transient($transient)
    {
    }
    /**
     * @param string $transient
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function set_transient($transient, $value, $expiration = 0)
    {
    }
    /**
     * @param bool $force_db
     * @phpstan-return void
     */
    function delete_expired_transients($force_db = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_user_settings()
    {
    }
    /**
     * @param string $name
     * @param string|false $default_value
     * @return mixed
     */
    function get_user_setting($name, $default_value = \false)
    {
    }
    /**
     * @param string $name
     * @param string $value
     * @return bool|null
     */
    function set_user_setting($name, $value)
    {
    }
    /**
     * @param string $names
     * @return bool|null
     */
    function delete_user_setting($names)
    {
    }
    /**
     * @return array
     */
    function get_all_user_settings()
    {
    }
    /**
     * @param array $user_settings
     * @return bool|null
     */
    function wp_set_all_user_settings($user_settings)
    {
    }
    /**
     * @phpstan-return void
     */
    function delete_all_user_settings()
    {
    }
    /**
     * @param string $option
     * @param mixed $default_value
     * @param bool $deprecated
     * @return mixed
     */
    function get_site_option($option, $default_value = \false, $deprecated = \true)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @return bool
     */
    function add_site_option($option, $value)
    {
    }
    /**
     * @param string $option
     * @return bool
     */
    function delete_site_option($option)
    {
    }
    /**
     * @param string $option
     * @param mixed $value
     * @return bool
     */
    function update_site_option($option, $value)
    {
    }
    /**
     * @param int $network_id
     * @param string $option
     * @param mixed $default_value
     * @return mixed
     */
    function get_network_option($network_id, $option, $default_value = \false)
    {
    }
    /**
     * @param int $network_id
     * @param string $option
     * @param mixed $value
     * @return bool
     */
    function add_network_option($network_id, $option, $value)
    {
    }
    /**
     * @param int $network_id
     * @param string $option
     * @return bool
     */
    function delete_network_option($network_id, $option)
    {
    }
    /**
     * @param int $network_id
     * @param string $option
     * @param mixed $value
     * @return bool
     */
    function update_network_option($network_id, $option, $value)
    {
    }
    /**
     * @param string $transient
     * @return bool
     */
    function delete_site_transient($transient)
    {
    }
    /**
     * @param string $transient
     * @return mixed
     */
    function get_site_transient($transient)
    {
    }
    /**
     * @param string $transient
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function set_site_transient($transient, $value, $expiration = 0)
    {
    }
    function register_initial_settings()
    {
    }
    /**
     * @param string $option_group
     * @param string $option_name
     * @phpstan-param array{
     *   type?: string,
     *   label?: string,
     *   description?: string,
     *   sanitize_callback?: callable,
     *   show_in_rest?: bool|array,
     *   default?: mixed,
     * } $args
     */
    function register_setting($option_group, $option_name, $args = array())
    {
    }
    /**
     * @param string $option_group
     * @param string $option_name
     * @param callable $deprecated
     */
    function unregister_setting($option_group, $option_name, $deprecated = '')
    {
    }
    /**
     * @return array
     */
    function get_registered_settings()
    {
    }
    /**
     * @param mixed $default_value
     * @param string $option
     * @param bool $passed_default
     * @return mixed
     */
    function filter_default_option($default_value, $option, $passed_default)
    {
    }
    /**
     * @return string[]
     */
    function wp_autoload_values_to_autoload()
    {
    }
    /**
     * @param int|null $id
     * @param string $name
     * @return \WP_User
     */
    function set_current_user($id, $name = '')
    {
    }
    /**
     * @return bool|\WP_User
     */
    function get_currentuserinfo()
    {
    }
    /**
     * @param string $user_login
     * @return bool|object
     */
    function get_userdatabylogin($user_login)
    {
    }
    /**
     * @param string $email
     * @return bool|object
     */
    function get_user_by_email($email)
    {
    }
    /**
     * @param string $username
     * @param string $password
     * @param bool $already_md5
     * @param string $home
     * @param string $siteurl
     * @param bool $remember
     */
    function wp_setcookie($username, $password = '', $already_md5 = \false, $home = '', $siteurl = '', $remember = \false)
    {
    }
    function wp_clearcookie()
    {
    }
    /**
     * @return bool
     */
    function wp_get_cookie_login()
    {
    }
    /**
     * @param string $username
     * @param string $password
     * @param string $deprecated
     * @return bool
     */
    function wp_login($username, $password, $deprecated = '')
    {
    }
    /**
     * @param int|null $id
     * @param string $name
     * @return \WP_User
     */
    function wp_set_current_user($id, $name = '')
    {
    }
    /**
     * @return \WP_User
     */
    function wp_get_current_user()
    {
    }
    /**
     * @param int $user_id
     * @return \WP_User|false
     */
    function get_userdata($user_id)
    {
    }
    /**
     * @param string $field
     * @param int|string $value
     * @return \WP_User|false
     */
    function get_user_by($field, $value)
    {
    }
    /**
     * @param int[] $user_ids
     * @phpstan-return void
     */
    function cache_users($user_ids)
    {
    }
    /**
     * @param string|string[] $to
     * @param string $subject
     * @param string $message
     * @param string|string[] $headers
     * @param string|string[] $attachments
     * @return bool
     */
    function wp_mail($to, $subject, $message, $headers = '', $attachments = array())
    {
    }
    /**
     * @param string $username
     * @param string $password
     * @return \WP_User|\WP_Error
     */
    function wp_authenticate($username, $password)
    {
    }
    function wp_logout()
    {
    }
    /**
     * @param string $cookie
     * @phpstan-param 'auth'|'secure_auth'|'logged_in' $scheme
     * @return int|false
     */
    function wp_validate_auth_cookie($cookie = '', $scheme = '')
    {
    }
    /**
     * @param int $user_id
     * @param int $expiration
     * @phpstan-param 'auth'|'secure_auth'|'logged_in' $scheme
     * @param string $token
     * @return string
     */
    function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth', $token = '')
    {
    }
    /**
     * @param string $cookie
     * @phpstan-param 'auth'|'secure_auth'|'logged_in' $scheme
     * @phpstan-return false|array{
     *   username: string,
     *   expiration: string,
     *   token: string,
     *   hmac: string,
     *   scheme: string,
     * }
     */
    function wp_parse_auth_cookie($cookie = '', $scheme = '')
    {
    }
    /**
     * @param int $user_id
     * @param bool $remember
     * @param bool|string $secure
     * @param string $token
     * @phpstan-return void
     */
    function wp_set_auth_cookie($user_id, $remember = \false, $secure = '', $token = '')
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_clear_auth_cookie()
    {
    }
    /**
     * @return bool
     */
    function is_user_logged_in()
    {
    }
    /**
     * @phpstan-return void
     */
    function auth_redirect()
    {
    }
    /**
     * @param int|string $action
     * @param string $query_arg
     * @return int|false
     */
    function check_admin_referer($action = -1, $query_arg = '_wpnonce')
    {
    }
    /**
     * @param int|string $action
     * @param false|string $query_arg
     * @param bool $stop
     * @return int|false
     */
    function check_ajax_referer($action = -1, $query_arg = \false, $stop = \true)
    {
    }
    /**
     * @param string $location
     * @param int $status
     * @param string|false $x_redirect_by
     * @return bool
     */
    function wp_redirect($location, $status = 302, $x_redirect_by = 'WordPress')
    {
    }
    /**
     * @param string $location
     * @return string
     */
    function wp_sanitize_redirect($location)
    {
    }
    /**
     * @param array $matches
     * @return string
     */
    function _wp_sanitize_utf8_in_redirect($matches)
    {
    }
    /**
     * @param string $location
     * @param int $status
     * @param string|false $x_redirect_by
     * @return bool
     */
    function wp_safe_redirect($location, $status = 302, $x_redirect_by = 'WordPress')
    {
    }
    /**
     * @param string $location
     * @param string $fallback_url
     * @return string
     */
    function wp_validate_redirect($location, $fallback_url = '')
    {
    }
    /**
     * @param int|\WP_Comment $comment_id
     * @param string $deprecated
     * @return bool
     */
    function wp_notify_postauthor($comment_id, $deprecated = \null)
    {
    }
    /**
     * @param int $comment_id
     * @return true
     */
    function wp_notify_moderator($comment_id)
    {
    }
    /**
     * @param \WP_User $user
     */
    function wp_password_change_notification($user)
    {
    }
    /**
     * @param int $user_id
     * @param null $deprecated
     * @phpstan-param 'admin'|'user'|'both' $notify
     * @phpstan-return void
     */
    function wp_new_user_notification($user_id, $deprecated = \null, $notify = '')
    {
    }
    /**
     * @param string|int $action
     * @return float
     */
    function wp_nonce_tick($action = -1)
    {
    }
    /**
     * @param string $nonce
     * @param string|int $action
     * @return int|false
     */
    function wp_verify_nonce($nonce, $action = -1)
    {
    }
    /**
     * @param string|int $action
     * @return string
     */
    function wp_create_nonce($action = -1)
    {
    }
    /**
     * @param string $scheme
     * @return string
     */
    function wp_salt($scheme = 'auth')
    {
    }
    /**
     * @param string $data
     * @param string $scheme
     * @return string
     */
    function wp_hash($data, $scheme = 'auth')
    {
    }
    /**
     * @param string $password
     * @return string
     */
    function wp_hash_password($password)
    {
    }
    /**
     * @param string $password
     * @param string $hash
     * @param string|int $user_id
     * @return bool
     */
    function wp_check_password($password, $hash, $user_id = '')
    {
    }
    /**
     * @param int $length
     * @param bool $special_chars
     * @param bool $extra_special_chars
     * @return string
     */
    function wp_generate_password($length = 12, $special_chars = \true, $extra_special_chars = \false)
    {
    }
    /**
     * @param int $min
     * @param int $max
     * @return int
     */
    function wp_rand($min = \null, $max = \null)
    {
    }
    /**
     * @param string $password
     * @param int $user_id
     */
    function wp_set_password($password, $user_id)
    {
    }
    /**
     * @param mixed $id_or_email
     * @param int $size
     * @param string $default_value
     * @param string $alt
     * @phpstan-param array{
     *   height?: int,
     *   width?: int,
     *   force_default?: bool,
     *   rating?: string,
     *   scheme?: string,
     *   class?: array|string,
     *   force_display?: bool,
     *   loading?: string,
     *   fetchpriority?: string,
     *   decoding?: string,
     *   extra_attr?: string,
     * } $args
     * @return string|false
     */
    function get_avatar($id_or_email, $size = 96, $default_value = '', $alt = '', $args = \null)
    {
    }
    /**
     * @param string $left_string
     * @param string $right_string
     * @phpstan-param array{
     *   title?: string,
     *   title_left?: string,
     *   title_right?: string,
     *   show_split_view?: bool,
     * } $args
     * @return string
     */
    function wp_text_diff($left_string, $right_string, $args = \null)
    {
    }
    /**
     * @param string $hook_name
     * @param callable $callback
     * @param int $priority
     * @param int $accepted_args
     * @return true
     */
    function add_filter($hook_name, $callback, $priority = 10, $accepted_args = 1)
    {
    }
    /**
     * @param string $hook_name
     * @param mixed $value
     * @param mixed $args
     * @return mixed
     */
    function apply_filters($hook_name, $value, ...$args)
    {
    }
    /**
     * @param string $hook_name
     * @param array $args
     * @return mixed
     */
    function apply_filters_ref_array($hook_name, $args)
    {
    }
    /**
     * @param string $hook_name
     * @param callable|string|array|false $callback
     * @return bool|int
     * @phpstan-return ($callback is false ? bool : false|int)
     */
    function has_filter($hook_name, $callback = \false)
    {
    }
    /**
     * @param string $hook_name
     * @param callable|string|array $callback
     * @param int $priority
     * @return bool
     */
    function remove_filter($hook_name, $callback, $priority = 10)
    {
    }
    /**
     * @param string $hook_name
     * @param int|false $priority
     * @return true
     */
    function remove_all_filters($hook_name, $priority = \false)
    {
    }
    /**
     * @return string
     */
    function current_filter()
    {
    }
    /**
     * @param string|null $hook_name
     * @return bool
     */
    function doing_filter($hook_name = \null)
    {
    }
    /**
     * @param string $hook_name
     * @return int
     */
    function did_filter($hook_name)
    {
    }
    /**
     * @param string $hook_name
     * @param callable $callback
     * @param int $priority
     * @param int $accepted_args
     * @return true
     */
    function add_action($hook_name, $callback, $priority = 10, $accepted_args = 1)
    {
    }
    /**
     * @param string $hook_name
     * @param mixed $arg
     * @phpstan-return void
     */
    function do_action($hook_name, ...$arg)
    {
    }
    /**
     * @param string $hook_name
     * @param array $args
     * @phpstan-return void
     */
    function do_action_ref_array($hook_name, $args)
    {
    }
    /**
     * @param string $hook_name
     * @param callable|string|array|false $callback
     * @return bool|int
     * @phpstan-return ($callback is false ? bool : false|int)
     */
    function has_action($hook_name, $callback = \false)
    {
    }
    /**
     * @param string $hook_name
     * @param callable|string|array $callback
     * @param int $priority
     * @return bool
     */
    function remove_action($hook_name, $callback, $priority = 10)
    {
    }
    /**
     * @param string $hook_name
     * @param int|false $priority
     * @return true
     */
    function remove_all_actions($hook_name, $priority = \false)
    {
    }
    /**
     * @return string
     */
    function current_action()
    {
    }
    /**
     * @param string|null $hook_name
     * @return bool
     */
    function doing_action($hook_name = \null)
    {
    }
    /**
     * @param string $hook_name
     * @return int
     */
    function did_action($hook_name)
    {
    }
    /**
     * @param string $hook_name
     * @param array $args
     * @param string $version
     * @param string $replacement
     * @param string $message
     * @return mixed
     */
    function apply_filters_deprecated($hook_name, $args, $version, $replacement = '', $message = '')
    {
    }
    /**
     * @param string $hook_name
     * @param array $args
     * @param string $version
     * @param string $replacement
     * @param string $message
     * @phpstan-return void
     */
    function do_action_deprecated($hook_name, $args, $version, $replacement = '', $message = '')
    {
    }
    //
    // Functions for handling plugins.
    //
    /**
     * @param string $file
     * @return string
     */
    function plugin_basename($file)
    {
    }
    /**
     * @param string $file
     * @return bool
     */
    function wp_register_plugin_realpath($file)
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function plugin_dir_path($file)
    {
    }
    /**
     * @param string $file
     * @return string
     */
    function plugin_dir_url($file)
    {
    }
    /**
     * @param string $file
     * @param callable $callback
     */
    function register_activation_hook($file, $callback)
    {
    }
    /**
     * @param string $file
     * @param callable $callback
     */
    function register_deactivation_hook($file, $callback)
    {
    }
    /**
     * @param string $file
     * @param callable $callback
     * @phpstan-return void
     */
    function register_uninstall_hook($file, $callback)
    {
    }
    /**
     * @param array $args
     */
    function _wp_call_all_hook($args)
    {
    }
    /**
     * @param string $hook_name
     * @param callable|string|array $callback
     * @param int $priority
     * @return string
     */
    function _wp_filter_build_unique_id($hook_name, $callback, $priority)
    {
    }
    /**
     * Post format functions.
     *
     * @package WordPress
     * @subpackage Post
     */
    /**
     * @param int|\WP_Post|null $post
     * @return string|false
     */
    function get_post_format($post = \null)
    {
    }
    /**
     * @param string|string[] $format
     * @param \WP_Post|int|null $post
     * @return bool
     */
    function has_post_format($format = array(), $post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $format
     * @return array|\WP_Error|false
     */
    function set_post_format($post, $format)
    {
    }
    /**
     * @return string[]
     */
    function get_post_format_strings()
    {
    }
    /**
     * @return string[]
     */
    function get_post_format_slugs()
    {
    }
    /**
     * @param string $slug
     * @return string
     */
    function get_post_format_string($slug)
    {
    }
    /**
     * @param string $format
     * @return string|\WP_Error|false
     */
    function get_post_format_link($format)
    {
    }
    /**
     * @param array $qvs
     * @return array
     */
    function _post_format_request($qvs)
    {
    }
    /**
     * @param string $link
     * @param \WP_Term $term
     * @param string $taxonomy
     * @return string
     */
    function _post_format_link($link, $term, $taxonomy)
    {
    }
    /**
     * @param object $term
     * @return object
     */
    function _post_format_get_term($term)
    {
    }
    /**
     * @param array $terms
     * @param string|array $taxonomies
     * @param array $args
     * @return array
     */
    function _post_format_get_terms($terms, $taxonomies, $args)
    {
    }
    /**
     * @param array $terms
     * @return array
     */
    function _post_format_wp_get_object_terms($terms)
    {
    }
    function the_ID()
    {
    }
    /**
     * @return int|false
     */
    function get_the_ID()
    {
    }
    /**
     * @param string $before
     * @param string $after
     * @param bool $display
     * @return void|string
     * @phpstan-return ($display is true ? void : string|void)
     */
    function the_title($before = '', $after = '', $display = \true)
    {
    }
    /**
     * @phpstan-param array{
     *   before?: string,
     *   after?: string,
     *   echo?: bool,
     *   post?: WP_Post,
     * } $args
     * @return void|string
     */
    function the_title_attribute($args = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_title($post = 0)
    {
    }
    /**
     * @param int|\WP_Post $post
     */
    function the_guid($post = 0)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_guid($post = 0)
    {
    }
    /**
     * @param string $more_link_text
     * @param bool $strip_teaser
     */
    function the_content($more_link_text = \null, $strip_teaser = \false)
    {
    }
    /**
     * @param string $more_link_text
     * @param bool $strip_teaser
     * @param \WP_Post|object|int $post
     * @return string
     */
    function get_the_content($more_link_text = \null, $strip_teaser = \false, $post = \null)
    {
    }
    function the_excerpt()
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_excerpt($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function has_excerpt($post = 0)
    {
    }
    /**
     * @param string|string[] $css_class
     * @param int|\WP_Post $post
     */
    function post_class($css_class = '', $post = \null)
    {
    }
    /**
     * @param string|string[] $css_class
     * @param int|\WP_Post $post
     * @return string[]
     */
    function get_post_class($css_class = '', $post = \null)
    {
    }
    /**
     * @param string|string[] $css_class
     */
    function body_class($css_class = '')
    {
    }
    /**
     * @param string|string[] $css_class
     * @return string[]
     */
    function get_body_class($css_class = '')
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return bool
     */
    function post_password_required($post = \null)
    {
    }
    //
    // Page Template Functions for usage in Themes.
    //
    /**
     * @phpstan-param array{
     *   before?: string,
     *   after?: string,
     *   link_before?: string,
     *   link_after?: string,
     *   aria_current?: string,
     *   next_or_number?: string,
     *   separator?: string,
     *   nextpagelink?: string,
     *   previouspagelink?: string,
     *   pagelink?: string,
     *   echo?: int|bool,
     * } $args
     * @return string
     */
    function wp_link_pages($args = '')
    {
    }
    /**
     * @param int $i
     * @return string
     */
    function _wp_link_page($i)
    {
    }
    //
    // Post-meta: Custom per-post fields.
    //
    /**
     * @param string $key
     * @return array|string|false
     */
    function post_custom($key = '')
    {
    }
    function the_meta()
    {
    }
    //
    // Pages.
    //
    /**
     * @phpstan-param array{
     *   depth?: int,
     *   child_of?: int,
     *   selected?: int|string,
     *   echo?: bool|int,
     *   name?: string,
     *   id?: string,
     *   class?: string,
     *   show_option_none?: string,
     *   show_option_no_change?: string,
     *   option_none_value?: string,
     *   value_field?: string,
     *   child_of?: int,
     *   sort_order?: string,
     *   sort_column?: string,
     *   hierarchical?: bool,
     *   exclude?: int[],
     *   include?: int[],
     *   meta_key?: string,
     *   meta_value?: string,
     *   authors?: string,
     *   parent?: int,
     *   exclude_tree?: string|int[],
     *   number?: int,
     *   offset?: int,
     *   post_type?: string,
     *   post_status?: string|array,
     * } $args
     * @return string
     */
    function wp_dropdown_pages($args = '')
    {
    }
    /**
     * @phpstan-param array{
     *   child_of?: int,
     *   authors?: string,
     *   date_format?: string,
     *   depth?: int,
     *   echo?: bool,
     *   exclude?: string,
     *   include?: array,
     *   link_after?: string,
     *   link_before?: string,
     *   post_type?: string,
     *   post_status?: string|array,
     *   show_date?: string,
     *   sort_column?: string,
     *   title_li?: string,
     *   item_spacing?: string,
     *   walker?: Walker,
     *   child_of?: int,
     *   sort_order?: string,
     *   sort_column?: string,
     *   hierarchical?: bool,
     *   exclude?: int[],
     *   include?: int[],
     *   meta_key?: string,
     *   meta_value?: string,
     *   authors?: string,
     *   parent?: int,
     *   exclude_tree?: string|int[],
     *   number?: int,
     *   offset?: int,
     *   post_type?: string,
     *   post_status?: string|array,
     * } $args
     * @return void|string
     */
    function wp_list_pages($args = '')
    {
    }
    /**
     * @phpstan-param array{
     *   sort_column?: string,
     *   menu_id?: string,
     *   menu_class?: string,
     *   container?: string,
     *   echo?: bool,
     *   show_home?: int|bool|string,
     *   link_before?: string,
     *   link_after?: string,
     *   before?: string,
     *   after?: string,
     *   item_spacing?: string,
     *   walker?: Walker,
     *   child_of?: int,
     *   authors?: string,
     *   date_format?: string,
     *   depth?: int,
     *   echo?: bool,
     *   exclude?: string,
     *   include?: array,
     *   link_after?: string,
     *   link_before?: string,
     *   post_type?: string,
     *   post_status?: string|array,
     *   show_date?: string,
     *   sort_column?: string,
     *   title_li?: string,
     *   item_spacing?: string,
     *   walker?: Walker,
     *   child_of?: int,
     *   sort_order?: string,
     *   sort_column?: string,
     *   hierarchical?: bool,
     *   exclude?: int[],
     *   include?: int[],
     *   meta_key?: string,
     *   meta_value?: string,
     *   authors?: string,
     *   parent?: int,
     *   exclude_tree?: string|int[],
     *   number?: int,
     *   offset?: int,
     *   post_type?: string,
     *   post_status?: string|array,
     * } $args
     * @return void|string
     */
    function wp_page_menu($args = array())
    {
    }
    //
    // Page helpers.
    //
    /**
     * @param array $pages
     * @param int $depth
     * @param int $current_page
     * @param array $args
     * @return string
     */
    function walk_page_tree($pages, $depth, $current_page, $args)
    {
    }
    /**
     * @param mixed $args
     * @return string
     */
    function walk_page_dropdown_tree(...$args)
    {
    }
    //
    // Attachments.
    //
    /**
     * @param int|\WP_Post $post
     * @param bool $fullsize
     * @param bool $deprecated
     * @param bool $permalink
     */
    function the_attachment_link($post = 0, $fullsize = \false, $deprecated = \false, $permalink = \false)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string|int[] $size
     * @param bool $permalink
     * @param bool $icon
     * @param string|false $text
     * @param array|string $attr
     * @return string
     */
    function wp_get_attachment_link($post = 0, $size = 'thumbnail', $permalink = \false, $icon = \false, $text = \false, $attr = '')
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function prepend_attachment($content)
    {
    }
    //
    // Misc.
    //
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_password_form($post = 0)
    {
    }
    /**
     * @param string|string[] $template
     * @return bool
     */
    function is_page_template($template = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function get_page_template_slug($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $revision
     * @param bool $link
     * @return string|false
     */
    function wp_post_revision_title($revision, $link = \true)
    {
    }
    /**
     * @param int|\WP_Post $revision
     * @param bool $link
     * @return string|false
     */
    function wp_post_revision_title_expanded($revision, $link = \true)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $type
     * @phpstan-return void
     */
    function wp_list_post_revisions($post = 0, $type = 'all')
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return \WP_Post|null
     */
    function get_post_parent($post = \null)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return bool
     */
    function has_post_parent($post = \null)
    {
    }
    /**
     * WordPress Post Thumbnail Template Functions.
     *
     * Support for post thumbnails.
     * Theme's functions.php must call add_theme_support( 'post-thumbnails' ) to use these.
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function has_post_thumbnail($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int|false
     */
    function get_post_thumbnail_id($post = \null)
    {
    }
    /**
     * @param string|int[] $size
     * @param string|array $attr
     */
    function the_post_thumbnail($size = 'post-thumbnail', $attr = '')
    {
    }
    /**
     * @param \WP_Query $wp_query
     * @phpstan-return void
     */
    function update_post_thumbnail_cache($wp_query = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string|int[] $size
     * @param string|array $attr
     * @return string
     */
    function get_the_post_thumbnail($post = \null, $size = 'post-thumbnail', $attr = '')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string|int[] $size
     * @return string|false
     */
    function get_the_post_thumbnail_url($post = \null, $size = 'post-thumbnail')
    {
    }
    /**
     * @param string|int[] $size
     */
    function the_post_thumbnail_url($size = 'post-thumbnail')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function get_the_post_thumbnail_caption($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     */
    function the_post_thumbnail_caption($post = \null)
    {
    }
    function create_initial_post_types()
    {
    }
    /**
     * @param int $attachment_id
     * @param bool $unfiltered
     * @return string|false
     */
    function get_attached_file($attachment_id, $unfiltered = \false)
    {
    }
    /**
     * @param int $attachment_id
     * @param string $file
     * @return bool
     */
    function update_attached_file($attachment_id, $file)
    {
    }
    /**
     * @param string $path
     * @return string
     */
    function _wp_relative_upload_path($path)
    {
    }
    /**
     * @param mixed $args
     * @param string $output
     * @return \WP_Post[]|array[]|int[]
     */
    function get_children($args = '', $output = \OBJECT)
    {
    }
    /**
     * @param string $post
     * @phpstan-return array{
     *   main: string,
     *   extended: string,
     *   more_text: string,
     * }
     */
    function get_extended($post)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @param string $output
     * @phpstan-param 'raw'|'edit'|'db'|'display' $filter
     * @return \WP_Post|array|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return ($post is \WP_Post ? array<array-key, mixed>|\WP_Post : array<array-key, mixed>|\WP_Post|null) & ($output is 'ARRAY_A' ? array<string, mixed>|null : ($output is 'ARRAY_N' ? array<int, mixed>|null : \WP_Post|null))
     */
    function get_post($post = \null, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int[]
     */
    function get_post_ancestors($post)
    {
    }
    /**
     * @param string $field
     * @param int|\WP_Post $post
     * @phpstan-param 'raw'|'edit'|'db'|'display' $context
     * @return string
     */
    function get_post_field($field, $post = \null, $context = 'display')
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function get_post_mime_type($post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|false
     */
    function get_post_status($post = \null)
    {
    }
    /**
     * @return string[]
     */
    function get_post_statuses()
    {
    }
    /**
     * @return string[]
     */
    function get_page_statuses()
    {
    }
    /**
     * @return string[]
     */
    function _wp_privacy_statuses()
    {
    }
    /**
     * @param string $post_status
     * @phpstan-param array{
     *   label?: bool|string,
     *   label_count?: array|false,
     *   exclude_from_search?: bool,
     *   _builtin?: bool,
     *   public?: bool,
     *   internal?: bool,
     *   protected?: bool,
     *   private?: bool,
     *   publicly_queryable?: bool,
     *   show_in_admin_all_list?: bool,
     *   show_in_admin_status_list?: bool,
     *   date_floating?: bool,
     * } $args
     * @return object
     */
    function register_post_status($post_status, $args = array())
    {
    }
    /**
     * @param string $post_status
     * @return \stdClass|null
     */
    function get_post_status_object($post_status)
    {
    }
    /**
     * @param array|string $args
     * @phpstan-param 'names'|'objects' $output
     * @param string $operator
     * @return string[]|\stdClass[]
     * @phpstan-return ($output is 'names' ? array<string, string> : array<string, \stdClass>)
     */
    function get_post_stati($args = array(), $output = 'names', $operator = 'and')
    {
    }
    /**
     * @param string $post_type
     * @return bool
     */
    function is_post_type_hierarchical($post_type)
    {
    }
    /**
     * @param string $post_type
     * @return bool
     */
    function post_type_exists($post_type)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return string|false
     */
    function get_post_type($post = \null)
    {
    }
    /**
     * @param string $post_type
     * @return \WP_Post_Type|null
     */
    function get_post_type_object($post_type)
    {
    }
    /**
     * @param array|string $args
     * @phpstan-param 'names'|'objects' $output
     * @param string $operator
     * @return string[]|\WP_Post_Type[]
     * @phpstan-return ($output is 'names' ? array<string, string> : array<string, \WP_Post_Type>)
     */
    function get_post_types($args = array(), $output = 'names', $operator = 'and')
    {
    }
    /**
     * @param string $post_type
     * @phpstan-param array{
     *   label?: string,
     *   labels?: string[],
     *   description?: string,
     *   public?: bool,
     *   hierarchical?: bool,
     *   exclude_from_search?: bool,
     *   publicly_queryable?: bool,
     *   show_ui?: bool,
     *   show_in_menu?: bool|string,
     *   show_in_nav_menus?: bool,
     *   show_in_admin_bar?: bool,
     *   show_in_rest?: bool,
     *   rest_base?: string,
     *   rest_namespace?: string,
     *   rest_controller_class?: string,
     *   autosave_rest_controller_class?: string|bool,
     *   revisions_rest_controller_class?: string|bool,
     *   late_route_registration?: bool,
     *   menu_position?: int,
     *   menu_icon?: string,
     *   capability_type?: string|array,
     *   capabilities?: string[],
     *   map_meta_cap?: bool,
     *   supports?: array|false,
     *   register_meta_box_cb?: callable,
     *   taxonomies?: string[],
     *   has_archive?: bool|string,
     *   rewrite?: bool|array{
     *     slug?: string,
     *     with_front?: bool,
     *     feeds?: bool,
     *     pages?: bool,
     *     ep_mask?: int,
     *   },
     *   query_var?: string|bool,
     *   can_export?: bool,
     *   delete_with_user?: bool,
     *   template?: array,
     *   template_lock?: string|false,
     *   _builtin?: bool,
     *   _edit_link?: string,
     * } $args
     * @return \WP_Post_Type|\WP_Error
     */
    function register_post_type($post_type, $args = array())
    {
    }
    /**
     * @param string $post_type
     * @return true|\WP_Error
     */
    function unregister_post_type($post_type)
    {
    }
    /**
     * @param object $args
     * @return object
     */
    function get_post_type_capabilities($args)
    {
    }
    /**
     * @param string[] $capabilities
     */
    function _post_type_meta_capabilities($capabilities = \null)
    {
    }
    /**
     * @param object|\WP_Post_Type $post_type_object
     * @return object
     */
    function get_post_type_labels($post_type_object)
    {
    }
    /**
     * @param object $data_object
     * @param array $nohier_vs_hier_defaults
     * @return object
     */
    function _get_custom_object_labels($data_object, $nohier_vs_hier_defaults)
    {
    }
    function _add_post_type_submenus()
    {
    }
    /**
     * @param string $post_type
     * @param string|array $feature
     * @param mixed $args
     */
    function add_post_type_support($post_type, $feature, ...$args)
    {
    }
    /**
     * @param string $post_type
     * @param string $feature
     */
    function remove_post_type_support($post_type, $feature)
    {
    }
    /**
     * @param string $post_type
     * @return array
     */
    function get_all_post_type_supports($post_type)
    {
    }
    /**
     * @param string $post_type
     * @param string $feature
     * @return bool
     */
    function post_type_supports($post_type, $feature)
    {
    }
    /**
     * @param array|string $feature
     * @param string $operator
     * @return string[]
     */
    function get_post_types_by_support($feature, $operator = 'and')
    {
    }
    /**
     * @param int $post_id
     * @phpstan-param 'post'|'page' $post_type
     * @return int|false
     */
    function set_post_type($post_id = 0, $post_type = 'post')
    {
    }
    /**
     * @param string|\WP_Post_Type $post_type
     * @return bool
     */
    function is_post_type_viewable($post_type)
    {
    }
    /**
     * @param string|\stdClass $post_status
     * @return bool
     */
    function is_post_status_viewable($post_status)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return bool
     */
    function is_post_publicly_viewable($post = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   numberposts?: int,
     *   category?: int|string,
     *   include?: int[],
     *   exclude?: int[],
     *   suppress_filters?: bool,
     *   attachment_id?: int,
     *   author?: int|string,
     *   author_name?: string,
     *   author__in?: int[],
     *   author__not_in?: int[],
     *   cache_results?: bool,
     *   cat?: int|string,
     *   category__and?: int[],
     *   category__in?: int[],
     *   category__not_in?: int[],
     *   category_name?: string,
     *   comment_count?: array|int,
     *   comment_status?: string,
     *   comments_per_page?: int,
     *   date_query?: array,
     *   day?: int,
     *   exact?: bool,
     *   fields?: string,
     *   hour?: int,
     *   ignore_sticky_posts?: int|bool,
     *   m?: int,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     *   menu_order?: int,
     *   minute?: int,
     *   monthnum?: int,
     *   name?: string,
     *   nopaging?: bool,
     *   no_found_rows?: bool,
     *   offset?: int,
     *   order?: string,
     *   orderby?: string|array,
     *   p?: int,
     *   page?: int,
     *   paged?: int,
     *   page_id?: int,
     *   pagename?: string,
     *   perm?: string,
     *   ping_status?: string,
     *   post__in?: int[],
     *   post__not_in?: int[],
     *   post_mime_type?: string,
     *   post_name__in?: string[],
     *   post_parent?: int,
     *   post_parent__in?: int[],
     *   post_parent__not_in?: int[],
     *   post_type?: string|string[],
     *   post_status?: string|string[],
     *   posts_per_page?: int,
     *   posts_per_archive_page?: int,
     *   s?: string,
     *   search_columns?: string[],
     *   second?: int,
     *   sentence?: bool,
     *   suppress_filters?: bool,
     *   tag?: string,
     *   tag__and?: int[],
     *   tag__in?: int[],
     *   tag__not_in?: int[],
     *   tag_id?: int,
     *   tag_slug__and?: string[],
     *   tag_slug__in?: string[],
     *   tax_query?: array,
     *   title?: string,
     *   update_post_meta_cache?: bool,
     *   update_post_term_cache?: bool,
     *   update_menu_item_cache?: bool,
     *   lazy_load_term_meta?: bool,
     *   w?: int,
     *   year?: int,
     * } $args
     * @return \WP_Post[]|int[]
     */
    function get_posts($args = \null)
    {
    }
    //
    // Post meta functions.
    //
    /**
     * @param int $post_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false
     */
    function add_post_meta($post_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param int $post_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_post_meta($post_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $post_id
     * @param string $key
     * @param bool $single
     * @return mixed
     */
    function get_post_meta($post_id, $key = '', $single = \false)
    {
    }
    /**
     * @param int $post_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool
     */
    function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @param string $post_meta_key
     * @return bool
     */
    function delete_post_meta_by_key($post_meta_key)
    {
    }
    /**
     * @param string $post_type
     * @param string $meta_key
     * @param array $args
     * @return bool
     * @phpstan-param array{
     *   object_subtype?: string,
     *   type?: string,
     *   description?: string,
     *   single?: bool,
     *   default?: mixed,
     *   sanitize_callback?: callable,
     *   auth_callback?: callable,
     *   show_in_rest?: bool|array,
     *   revisions_enabled?: bool,
     * } $args See register_meta()
     */
    function register_post_meta($post_type, $meta_key, array $args)
    {
    }
    /**
     * @param string $post_type
     * @param string $meta_key
     * @return bool
     */
    function unregister_post_meta($post_type, $meta_key)
    {
    }
    /**
     * @param int $post_id
     * @return mixed
     */
    function get_post_custom($post_id = 0)
    {
    }
    /**
     * @param int $post_id
     * @return array|void
     */
    function get_post_custom_keys($post_id = 0)
    {
    }
    /**
     * @param string $key
     * @param int $post_id
     * @return array|null
     */
    function get_post_custom_values($key = '', $post_id = 0)
    {
    }
    /**
     * @param int $post_id
     * @return bool
     */
    function is_sticky($post_id = 0)
    {
    }
    /**
     * @param object|\WP_Post|array $post
     * @phpstan-param 'raw'|'edit'|'db'|'display'|'attribute'|'js' $context
     * @return object|\WP_Post|array
     * @phpstan-template T of array|object
     * @phpstan-param T $post
     * @phpstan-return T
     */
    function sanitize_post($post, $context = 'display')
    {
    }
    /**
     * @param string $field
     * @param mixed $value
     * @param int $post_id
     * @phpstan-param 'raw'|'edit'|'db'|'display'|'attribute'|'js' $context
     * @return mixed
     */
    function sanitize_post_field($field, $value, $post_id, $context = 'display')
    {
    }
    /**
     * @param int $post_id
     */
    function stick_post($post_id)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function unstick_post($post_id)
    {
    }
    /**
     * @param string $type
     * @param string $perm
     * @return string
     */
    function _count_posts_cache_key($type = 'post', $perm = '')
    {
    }
    /**
     * @param string $type
     * @param string $perm
     * @return \stdClass
     */
    function wp_count_posts($type = 'post', $perm = '')
    {
    }
    /**
     * @param string|string[] $mime_type
     * @return \stdClass
     */
    function wp_count_attachments($mime_type = '')
    {
    }
    /**
     * @return array
     */
    function get_post_mime_types()
    {
    }
    /**
     * @param string|string[] $wildcard_mime_types
     * @param string|string[] $real_mime_types
     * @return array
     */
    function wp_match_mime_types($wildcard_mime_types, $real_mime_types)
    {
    }
    /**
     * @param string|string[] $post_mime_types
     * @param string $table_alias
     * @return string
     */
    function wp_post_mime_type_where($post_mime_types, $table_alias = '')
    {
    }
    /**
     * @param int $post_id
     * @param bool $force_delete
     * @return \WP_Post|false|null
     */
    function wp_delete_post($post_id = 0, $force_delete = \false)
    {
    }
    /**
     * @param int $post_id
     */
    function _reset_front_page_settings_for_post($post_id)
    {
    }
    /**
     * @param int $post_id
     * @return \WP_Post|false|null
     */
    function wp_trash_post($post_id = 0)
    {
    }
    /**
     * @param int $post_id
     * @return \WP_Post|false|null
     */
    function wp_untrash_post($post_id = 0)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return mixed|void
     */
    function wp_trash_post_comments($post = \null)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return true|void
     */
    function wp_untrash_post_comments($post = \null)
    {
    }
    /**
     * @param int $post_id
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-param array{
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Term_Query::__construct()
     */
    function wp_get_post_categories($post_id = 0, $args = array())
    {
    }
    /**
     * @param int $post_id
     * @param array $args
     * @return array|\WP_Error
     * @phpstan-param array{
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Term_Query::__construct()
     */
    function wp_get_post_tags($post_id = 0, $args = array())
    {
    }
    /**
     * @param int $post_id
     * @param string|string[] $taxonomy
     * @phpstan-param array{
     *   fields?: string,
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args
     * @return array|\WP_Error
     */
    function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array())
    {
    }
    /**
     * @param array $args
     * @param string $output
     * @return array|false
     */
    function wp_get_recent_posts($args = array(), $output = \ARRAY_A)
    {
    }
    /**
     * @phpstan-param array{
     *   ID?: int,
     *   post_author?: int,
     *   post_date?: string,
     *   post_date_gmt?: string,
     *   post_content?: string,
     *   post_content_filtered?: string,
     *   post_title?: string,
     *   post_excerpt?: string,
     *   post_status?: string,
     *   post_type?: string,
     *   comment_status?: string,
     *   ping_status?: string,
     *   post_password?: string,
     *   post_name?: string,
     *   to_ping?: string,
     *   pinged?: string,
     *   post_parent?: int,
     *   menu_order?: int,
     *   post_mime_type?: string,
     *   guid?: string,
     *   import_id?: int,
     *   post_category?: int[],
     *   tags_input?: array,
     *   tax_input?: array,
     *   meta_input?: array,
     *   page_template?: string,
     * } $postarr
     * @param bool $wp_error
     * @param bool $fire_after_hooks
     * @return int|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int : positive-int|\WP_Error)
     */
    function wp_insert_post($postarr, $wp_error = \false, $fire_after_hooks = \true)
    {
    }
    /**
     * @param array|object $postarr
     * @param bool $wp_error
     * @param bool $fire_after_hooks
     * @return int|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int : positive-int|\WP_Error)
     * @phpstan-param array{
     *   ID?: int,
     *   post_author?: int,
     *   post_date?: string,
     *   post_date_gmt?: string,
     *   post_content?: string,
     *   post_content_filtered?: string,
     *   post_title?: string,
     *   post_excerpt?: string,
     *   post_status?: string,
     *   post_type?: string,
     *   comment_status?: string,
     *   ping_status?: string,
     *   post_password?: string,
     *   post_name?: string,
     *   to_ping?: string,
     *   pinged?: string,
     *   post_parent?: int,
     *   menu_order?: int,
     *   post_mime_type?: string,
     *   guid?: string,
     *   import_id?: int,
     *   post_category?: int[],
     *   tags_input?: array,
     *   tax_input?: array,
     *   meta_input?: array,
     *   page_template?: string,
     * } $postarr See wp_insert_post()
     */
    function wp_update_post($postarr = array(), $wp_error = \false, $fire_after_hooks = \true)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-return void
     */
    function wp_publish_post($post)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-return void
     */
    function check_and_publish_future_post($post)
    {
    }
    /**
     * @param string $post_date
     * @param string $post_date_gmt
     * @return string|false
     */
    function wp_resolve_post_date($post_date = '', $post_date_gmt = '')
    {
    }
    /**
     * @param string $slug
     * @param int $post_id
     * @param string $post_status
     * @param string $post_type
     * @param int $post_parent
     * @return string
     */
    function wp_unique_post_slug($slug, $post_id, $post_status, $post_type, $post_parent)
    {
    }
    /**
     * @param string $slug
     * @param int $length
     * @return string
     */
    function _truncate_post_slug($slug, $length = 200)
    {
    }
    /**
     * @param int $post_id
     * @param string|array $tags
     * @return array|false|\WP_Error
     */
    function wp_add_post_tags($post_id = 0, $tags = '')
    {
    }
    /**
     * @param int $post_id
     * @param string|array $tags
     * @param bool $append
     * @return array|false|\WP_Error
     */
    function wp_set_post_tags($post_id = 0, $tags = '', $append = \false)
    {
    }
    /**
     * @param int $post_id
     * @param string|array $terms
     * @param string $taxonomy
     * @param bool $append
     * @return array|false|\WP_Error
     */
    function wp_set_post_terms($post_id = 0, $terms = '', $taxonomy = 'post_tag', $append = \false)
    {
    }
    /**
     * @param int $post_id
     * @param int[]|int $post_categories
     * @param bool $append
     * @return array|false|\WP_Error
     */
    function wp_set_post_categories($post_id = 0, $post_categories = array(), $append = \false)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     */
    function wp_transition_post_status($new_status, $old_status, $post)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param bool $update
     * @param null|\WP_Post $post_before
     * @phpstan-return void
     */
    function wp_after_insert_post($post, $update, $post_before)
    {
    }
    //
    // Comment, trackback, and pingback functions.
    //
    /**
     * @param int|\WP_Post $post
     * @param string|array $uri
     * @return int|false
     */
    function add_ping($post, $uri)
    {
    }
    /**
     * @param int $post_id
     * @return string[]
     */
    function get_enclosed($post_id)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string[]|false
     */
    function get_pung($post)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string[]|false
     */
    function get_to_ping($post)
    {
    }
    /**
     * @param string $tb_list
     * @param int $post_id
     */
    function trackback_url_list($tb_list, $post_id)
    {
    }
    //
    // Page functions.
    //
    /**
     * @return string[]
     */
    function get_all_page_ids()
    {
    }
    /**
     * @param int|\WP_Post $page
     * @param string $output
     * @param string $filter
     * @return \WP_Post|array|null
     */
    function get_page($page, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param string $page_path
     * @param string $output
     * @param string|array $post_type
     * @return \WP_Post|array|null
     * @phpstan-return ($output is 'ARRAY_A' ? array<string, mixed>|null : ($output is 'ARRAY_N' ? array<int, mixed>|null : \WP_Post|null))
     */
    function get_page_by_path($page_path, $output = \OBJECT, $post_type = 'page')
    {
    }
    /**
     * @param int $page_id
     * @param \WP_Post[] $pages
     * @return \WP_Post[]
     */
    function get_page_children($page_id, $pages)
    {
    }
    /**
     * @param \WP_Post[] $pages
     * @param int $page_id
     * @return string[]
     */
    function get_page_hierarchy(&$pages, $page_id = 0)
    {
    }
    /**
     * @param int $page_id
     * @param array $children
     * @param string[] $result
     */
    function _page_traverse_name($page_id, &$children, &$result)
    {
    }
    /**
     * @param \WP_Post|object|int $page
     * @return string|false
     */
    function get_page_uri($page = 0)
    {
    }
    /**
     * @phpstan-param array{
     *   child_of?: int,
     *   sort_order?: string,
     *   sort_column?: string,
     *   hierarchical?: bool,
     *   exclude?: int[],
     *   include?: int[],
     *   meta_key?: string,
     *   meta_value?: string,
     *   authors?: string,
     *   parent?: int,
     *   exclude_tree?: string|int[],
     *   number?: int,
     *   offset?: int,
     *   post_type?: string,
     *   post_status?: string|array,
     * } $args
     * @return \WP_Post[]|false
     */
    function get_pages($args = array())
    {
    }
    //
    // Attachment functions.
    //
    /**
     * @param string $url
     * @return bool
     */
    function is_local_attachment($url)
    {
    }
    /**
     * @param string|array $args
     * @param string|false $file
     * @param int $parent_post_id
     * @param bool $wp_error
     * @param bool $fire_after_hooks
     * @return int|\WP_Error
     * @phpstan-return ($wp_error is false ? 0|positive-int : positive-int|\WP_Error)
     */
    function wp_insert_attachment($args, $file = \false, $parent_post_id = 0, $wp_error = \false, $fire_after_hooks = \true)
    {
    }
    /**
     * @param int $post_id
     * @param bool $force_delete
     * @return \WP_Post|false|null
     */
    function wp_delete_attachment($post_id, $force_delete = \false)
    {
    }
    /**
     * @param int $post_id
     * @param array $meta
     * @param array $backup_sizes
     * @param string $file
     * @return bool
     */
    function wp_delete_attachment_files($post_id, $meta, $backup_sizes, $file)
    {
    }
    /**
     * @param int $attachment_id
     * @param bool $unfiltered
     * @phpstan-return false|array{
     *   width: int,
     *   height: int,
     *   file: string,
     *   sizes: array,
     *   image_meta: array,
     *   filesize: int,
     * }
     */
    function wp_get_attachment_metadata($attachment_id = 0, $unfiltered = \false)
    {
    }
    /**
     * @param int $attachment_id
     * @param array $data
     * @return int|false
     */
    function wp_update_attachment_metadata($attachment_id, $data)
    {
    }
    /**
     * @param int $attachment_id
     * @return string|false
     */
    function wp_get_attachment_url($attachment_id = 0)
    {
    }
    /**
     * @param int $post_id
     * @return string|false
     */
    function wp_get_attachment_caption($post_id = 0)
    {
    }
    /**
     * @param int $post_id
     * @return string|false
     */
    function wp_get_attachment_thumb_url($post_id = 0)
    {
    }
    /**
     * @param string $type
     * @param int|\WP_Post $post
     * @return bool
     */
    function wp_attachment_is($type, $post = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function wp_attachment_is_image($post = \null)
    {
    }
    /**
     * @param string|int $mime
     * @param string $preferred_ext
     * @return string|false
     */
    function wp_mime_type_icon($mime = 0, $preferred_ext = '.png')
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @param \WP_Post $post_before
     * @phpstan-return void
     */
    function wp_check_for_changed_slugs($post_id, $post, $post_before)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @param \WP_Post $post_before
     * @phpstan-return void
     */
    function wp_check_for_changed_dates($post_id, $post, $post_before)
    {
    }
    /**
     * @param string|array $post_type
     * @return string
     */
    function get_private_posts_cap_sql($post_type)
    {
    }
    /**
     * @param string|string[] $post_type
     * @param bool $full
     * @param int $post_author
     * @param bool $public_only
     * @return string
     */
    function get_posts_by_author_sql($post_type, $full = \true, $post_author = \null, $public_only = \false)
    {
    }
    /**
     * @phpstan-param 'server'|'blog'|'gmt' $timezone
     * @param string $post_type
     * @return string
     */
    function get_lastpostdate($timezone = 'server', $post_type = 'any')
    {
    }
    /**
     * @param string $timezone
     * @param string $post_type
     * @return string
     * @phpstan-param 'server'|'blog'|'gmt' $timezone
     */
    function get_lastpostmodified($timezone = 'server', $post_type = 'any')
    {
    }
    /**
     * @param string $timezone
     * @phpstan-param 'date'|'modified' $field
     * @param string $post_type
     * @return string|false
     * @phpstan-param 'server'|'blog'|'gmt' $timezone
     */
    function _get_last_post_time($timezone, $field, $post_type = 'any')
    {
    }
    /**
     * @param \WP_Post[] $posts
     * @phpstan-return void
     */
    function update_post_cache(&$posts)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-return void
     */
    function clean_post_cache($post)
    {
    }
    /**
     * @param \WP_Post[] $posts
     * @param string $post_type
     * @param bool $update_term_cache
     * @param bool $update_meta_cache
     * @phpstan-return void
     */
    function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = \true, $update_meta_cache = \true)
    {
    }
    /**
     * @param \WP_Post[] $posts
     * @phpstan-return void
     */
    function update_post_author_caches($posts)
    {
    }
    /**
     * @param \WP_Post[] $posts
     */
    function update_post_parent_caches($posts)
    {
    }
    /**
     * @param int[] $post_ids
     * @return array|false
     */
    function update_postmeta_cache($post_ids)
    {
    }
    /**
     * @param int $id
     * @param bool $clean_terms
     * @phpstan-return void
     */
    function clean_attachment_cache($id, $clean_terms = \false)
    {
    }
    //
    // Hooks.
    //
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     */
    function _transition_post_status($new_status, $old_status, $post)
    {
    }
    /**
     * @param int $deprecated
     * @param \WP_Post $post
     */
    function _future_post_hook($deprecated, $post)
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function _publish_post_hook($post_id)
    {
    }
    /**
     * @param int|\WP_Post|null $post
     * @return int|false
     */
    function wp_get_post_parent_id($post = \null)
    {
    }
    /**
     * @param int $post_parent
     * @param int $post_id
     * @return int
     */
    function wp_check_post_hierarchy_for_loops($post_parent, $post_id)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param int $thumbnail_id
     * @return int|bool
     */
    function set_post_thumbnail($post, $thumbnail_id)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function delete_post_thumbnail($post)
    {
    }
    function wp_delete_auto_drafts()
    {
    }
    /**
     * @param \WP_Post[] $posts
     */
    function wp_queue_posts_for_term_meta_lazyload($posts)
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     */
    function _update_term_count_on_transition_post_status($new_status, $old_status, $post)
    {
    }
    /**
     * @param int[] $ids
     * @param bool $update_term_cache
     * @param bool $update_meta_cache
     */
    function _prime_post_caches($ids, $update_term_cache = \true, $update_meta_cache = \true)
    {
    }
    /**
     * @param int[] $ids
     * @phpstan-return void
     */
    function _prime_post_parent_id_caches(array $ids)
    {
    }
    /**
     * @param string $post_name
     * @param int $post_id
     */
    function wp_add_trashed_suffix_to_post_name_for_trashed_posts($post_name, $post_id = 0)
    {
    }
    /**
     * @param \WP_Post $post
     * @return string
     */
    function wp_add_trashed_suffix_to_post_name_for_post($post)
    {
    }
    function wp_cache_set_posts_last_changed()
    {
    }
    /**
     * @param string $type
     * @return string[]
     */
    function get_available_post_mime_types($type = 'attachment')
    {
    }
    /**
     * @param int $attachment_id
     * @param bool $unfiltered
     * @return string|false
     */
    function wp_get_original_image_path($attachment_id, $unfiltered = \false)
    {
    }
    /**
     * @param int $attachment_id
     * @return string|false
     */
    function wp_get_original_image_url($attachment_id)
    {
    }
    /**
     * @param string $new_status
     * @param int $post_id
     * @param string $previous_status
     * @return string
     */
    function wp_untrash_post_set_previous_status($new_status, $post_id, $previous_status)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return bool
     */
    function use_block_editor_for_post($post)
    {
    }
    /**
     * @param string $post_type
     * @return bool
     */
    function use_block_editor_for_post_type($post_type)
    {
    }
    function wp_create_initial_post_meta()
    {
    }
    /**
     * WordPress Query API
     *
     * The query API attempts to get which part of WordPress the user is on. It
     * also provides functionality for getting URL query information.
     *
     * @link https://developer.wordpress.org/themes/basics/the-loop/ More information on The Loop.
     *
     * @package WordPress
     * @subpackage Query
     */
    /**
     * @param string $query_var
     * @param mixed $default_value
     * @return mixed
     */
    function get_query_var($query_var, $default_value = '')
    {
    }
    /**
     * @return \WP_Term|\WP_Post_Type|\WP_Post|\WP_User|null
     */
    function get_queried_object()
    {
    }
    /**
     * @return int
     */
    function get_queried_object_id()
    {
    }
    /**
     * @param string $query_var
     * @param mixed $value
     */
    function set_query_var($query_var, $value)
    {
    }
    /**
     * @param array|string $query
     * @return \WP_Post[]|int[]
     */
    function query_posts($query)
    {
    }
    function wp_reset_query()
    {
    }
    function wp_reset_postdata()
    {
    }
    /*
     * Query type checks.
     */
    /**
     * @return bool
     */
    function is_archive()
    {
    }
    /**
     * @param string|string[] $post_types
     * @return bool
     */
    function is_post_type_archive($post_types = '')
    {
    }
    /**
     * @param int|string|int[]|string[] $attachment
     * @return bool
     */
    function is_attachment($attachment = '')
    {
    }
    /**
     * @param int|string|int[]|string[] $author
     * @return bool
     */
    function is_author($author = '')
    {
    }
    /**
     * @param int|string|int[]|string[] $category
     * @return bool
     */
    function is_category($category = '')
    {
    }
    /**
     * @param int|string|int[]|string[] $tag
     * @return bool
     */
    function is_tag($tag = '')
    {
    }
    /**
     * @param string|string[] $taxonomy
     * @param int|string|int[]|string[] $term
     * @return bool
     */
    function is_tax($taxonomy = '', $term = '')
    {
    }
    /**
     * @return bool
     */
    function is_date()
    {
    }
    /**
     * @return bool
     */
    function is_day()
    {
    }
    /**
     * @param string|string[] $feeds
     * @return bool
     */
    function is_feed($feeds = '')
    {
    }
    /**
     * @return bool
     */
    function is_comment_feed()
    {
    }
    /**
     * @return bool
     */
    function is_front_page()
    {
    }
    /**
     * @return bool
     */
    function is_home()
    {
    }
    /**
     * @return bool
     */
    function is_privacy_policy()
    {
    }
    /**
     * @return bool
     */
    function is_month()
    {
    }
    /**
     * @param int|string|int[]|string[] $page
     * @return bool
     */
    function is_page($page = '')
    {
    }
    /**
     * @return bool
     */
    function is_paged()
    {
    }
    /**
     * @return bool
     */
    function is_preview()
    {
    }
    /**
     * @return bool
     */
    function is_robots()
    {
    }
    /**
     * @return bool
     */
    function is_favicon()
    {
    }
    /**
     * @return bool
     */
    function is_search()
    {
    }
    /**
     * @param int|string|int[]|string[] $post
     * @return bool
     */
    function is_single($post = '')
    {
    }
    /**
     * @param string|string[] $post_types
     * @return bool
     */
    function is_singular($post_types = '')
    {
    }
    /**
     * @return bool
     */
    function is_time()
    {
    }
    /**
     * @return bool
     */
    function is_trackback()
    {
    }
    /**
     * @return bool
     */
    function is_year()
    {
    }
    /**
     * @return bool
     */
    function is_404()
    {
    }
    /**
     * @return bool
     */
    function is_embed()
    {
    }
    /**
     * @return bool
     */
    function is_main_query()
    {
    }
    /*
     * The Loop. Post loop control.
     */
    /**
     * @return bool
     * @phpstan-impure
     */
    function have_posts()
    {
    }
    /**
     * @return bool
     */
    function in_the_loop()
    {
    }
    /**
     * @phpstan-return void
     */
    function rewind_posts()
    {
    }
    /**
     * @phpstan-return void
     */
    function the_post()
    {
    }
    /*
     * Comments loop.
     */
    /**
     * @return bool
     */
    function have_comments()
    {
    }
    /**
     * @phpstan-return void
     */
    function the_comment()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_old_slug_redirect()
    {
    }
    /**
     * @param string $post_type
     * @return int
     */
    function _find_post_by_old_slug($post_type)
    {
    }
    /**
     * @param string $post_type
     * @return int
     */
    function _find_post_by_old_date($post_type)
    {
    }
    /**
     * @param \WP_Post|object|int $post
     * @return bool
     */
    function setup_postdata($post)
    {
    }
    /**
     * @param \WP_Post|object|int $post
     * @return array|false
     */
    function generate_postdata($post)
    {
    }
    /**
     * @param string $route_namespace
     * @param string $route
     * @param array $args
     * @param bool $override
     * @return bool
     */
    function register_rest_route($route_namespace, $route, $args = array(), $override = \false)
    {
    }
    /**
     * @param string|array $object_type
     * @param string $attribute
     * @phpstan-param array{
     *   get_callback?: callable|null,
     *   update_callback?: callable|null,
     *   schema?: array|null,
     * } $args
     */
    function register_rest_field($object_type, $attribute, $args = array())
    {
    }
    function rest_api_init()
    {
    }
    function rest_api_register_rewrites()
    {
    }
    function rest_api_default_filters()
    {
    }
    function create_initial_rest_routes()
    {
    }
    /**
     * @phpstan-return void
     */
    function rest_api_loaded()
    {
    }
    /**
     * @return string
     */
    function rest_get_url_prefix()
    {
    }
    /**
     * @param int|null $blog_id
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function get_rest_url($blog_id = \null, $path = '/', $scheme = 'rest')
    {
    }
    /**
     * @param string $path
     * @param string $scheme
     * @return string
     */
    function rest_url($path = '', $scheme = 'rest')
    {
    }
    /**
     * @param \WP_REST_Request|string $request
     * @return \WP_REST_Response
     */
    function rest_do_request($request)
    {
    }
    /**
     * @return \WP_REST_Server
     */
    function rest_get_server()
    {
    }
    /**
     * @param array|string|\WP_REST_Request $request
     * @return \WP_REST_Request
     */
    function rest_ensure_request($request)
    {
    }
    /**
     * @param \WP_REST_Response|\WP_Error|\WP_HTTP_Response|mixed $response
     * @return \WP_REST_Response|\WP_Error
     * @phpstan-return ($response is WP_Error ? WP_Error : WP_REST_Response)
     */
    function rest_ensure_response($response)
    {
    }
    /**
     * @param string $function_name
     * @param string $replacement
     * @param string $version
     * @phpstan-return void
     */
    function rest_handle_deprecated_function($function_name, $replacement, $version)
    {
    }
    /**
     * @param string $function_name
     * @param string $message
     * @param string $version
     * @phpstan-return void
     */
    function rest_handle_deprecated_argument($function_name, $message, $version)
    {
    }
    /**
     * @param string $function_name
     * @param string $message
     * @param string|null $version
     * @phpstan-return void
     */
    function rest_handle_doing_it_wrong($function_name, $message, $version)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function rest_send_cors_headers($value)
    {
    }
    /**
     * @param mixed $response
     * @param \WP_REST_Server $handler
     * @param \WP_REST_Request $request
     * @return \WP_REST_Response
     */
    function rest_handle_options_request($response, $handler, $request)
    {
    }
    /**
     * @param \WP_REST_Response $response
     * @param \WP_REST_Server $server
     * @param \WP_REST_Request $request
     * @return \WP_REST_Response
     */
    function rest_send_allow_header($response, $server, $request)
    {
    }
    /**
     * @param array $array1
     * @param array $array2
     * @return array
     */
    function _rest_array_intersect_key_recursive($array1, $array2)
    {
    }
    /**
     * @param \WP_REST_Response $response
     * @param \WP_REST_Server $server
     * @param \WP_REST_Request $request
     * @return \WP_REST_Response
     */
    function rest_filter_response_fields($response, $server, $request)
    {
    }
    /**
     * @param string $field
     * @param array $fields
     * @return bool
     */
    function rest_is_field_included($field, $fields)
    {
    }
    /**
     * @phpstan-return void
     */
    function rest_output_rsd()
    {
    }
    /**
     * @phpstan-return void
     */
    function rest_output_link_wp_head()
    {
    }
    /**
     * @phpstan-return void
     */
    function rest_output_link_header()
    {
    }
    /**
     * @param \WP_Error|mixed $result
     * @return \WP_Error|mixed|bool
     */
    function rest_cookie_check_errors($result)
    {
    }
    /**
     * @phpstan-return void
     */
    function rest_cookie_collect_status()
    {
    }
    /**
     * @param \WP_Error $user_or_error
     * @param array $app_password
     */
    function rest_application_password_collect_status($user_or_error, $app_password = array())
    {
    }
    /**
     * @return string|null
     */
    function rest_get_authenticated_app_password()
    {
    }
    /**
     * @param \WP_Error|null|true $result
     * @return \WP_Error|null|true
     */
    function rest_application_password_check_errors($result)
    {
    }
    /**
     * @param \WP_REST_Response $response
     * @return \WP_REST_Response
     */
    function rest_add_application_passwords_to_index($response)
    {
    }
    /**
     * @param mixed $id_or_email
     * @return (string|false)[]
     */
    function rest_get_avatar_urls($id_or_email)
    {
    }
    /**
     * @return int[]
     */
    function rest_get_avatar_sizes()
    {
    }
    /**
     * @param string $date
     * @param bool $force_utc
     * @return int|false
     */
    function rest_parse_date($date, $force_utc = \false)
    {
    }
    /**
     * @param string $color
     * @return string|false
     */
    function rest_parse_hex_color($color)
    {
    }
    /**
     * @param string $date
     * @param bool $is_utc
     * @phpstan-return null|array{
     *   0: string,
     *   1: string,
     * }
     */
    function rest_get_date_with_gmt($date, $is_utc = \false)
    {
    }
    /**
     * @return int
     */
    function rest_authorization_required_code()
    {
    }
    /**
     * @param mixed $value
     * @param \WP_REST_Request $request
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_request_arg($value, $request, $param)
    {
    }
    /**
     * @param mixed $value
     * @param \WP_REST_Request $request
     * @param string $param
     * @return mixed
     */
    function rest_sanitize_request_arg($value, $request, $param)
    {
    }
    /**
     * @param mixed $value
     * @param \WP_REST_Request $request
     * @param string $param
     * @return mixed
     */
    function rest_parse_request_arg($value, $request, $param)
    {
    }
    /**
     * @param string $ip
     * @return string|false
     */
    function rest_is_ip_address($ip)
    {
    }
    /**
     * @param bool|string|int $value
     * @return bool
     */
    function rest_sanitize_boolean($value)
    {
    }
    /**
     * @param bool|string $maybe_bool
     * @return bool
     */
    function rest_is_boolean($maybe_bool)
    {
    }
    /**
     * @param mixed $maybe_integer
     * @return bool
     */
    function rest_is_integer($maybe_integer)
    {
    }
    /**
     * @param mixed $maybe_array
     * @return bool
     */
    function rest_is_array($maybe_array)
    {
    }
    /**
     * @param mixed $maybe_array
     * @return array
     */
    function rest_sanitize_array($maybe_array)
    {
    }
    /**
     * @param mixed $maybe_object
     * @return bool
     */
    function rest_is_object($maybe_object)
    {
    }
    /**
     * @param mixed $maybe_object
     * @return array
     */
    function rest_sanitize_object($maybe_object)
    {
    }
    /**
     * @param mixed $value
     * @param string[] $types
     * @return string
     */
    function rest_get_best_type_for_value($value, $types)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return string
     */
    function rest_handle_multi_type_schema($value, $args, $param = '')
    {
    }
    /**
     * @param array $input_array
     * @return bool
     */
    function rest_validate_array_contains_unique_items($input_array)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    function rest_stabilize_value($value)
    {
    }
    /**
     * @param string $pattern
     * @param string $value
     * @return bool
     */
    function rest_validate_json_schema_pattern($pattern, $value)
    {
    }
    /**
     * @param string $property
     * @param array $args
     * @return array|null
     */
    function rest_find_matching_pattern_property_schema($property, $args)
    {
    }
    /**
     * @param string $param
     * @param array $error
     * @return \WP_Error
     */
    function rest_format_combining_operation_error($param, $error)
    {
    }
    /**
     * @param array $value
     * @param string $param
     * @param array $errors
     * @return \WP_Error
     */
    function rest_get_combining_operation_error($value, $param, $errors)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return array|\WP_Error
     */
    function rest_find_any_matching_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @param bool $stop_after_first_match
     * @return array|\WP_Error
     */
    function rest_find_one_matching_schema($value, $args, $param, $stop_after_first_match = \false)
    {
    }
    /**
     * @param mixed $value1
     * @param mixed $value2
     * @return bool
     */
    function rest_are_values_equal($value1, $value2)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_enum($value, $args, $param)
    {
    }
    /**
     * @return string[]
     */
    function rest_get_allowed_schema_keywords()
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_value_from_schema($value, $args, $param = '')
    {
    }
    /**
     * @param mixed $value
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_null_value_from_schema($value, $param)
    {
    }
    /**
     * @param mixed $value
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_boolean_value_from_schema($value, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_object_value_from_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_array_value_from_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_number_value_from_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_string_value_from_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return true|\WP_Error
     */
    function rest_validate_integer_value_from_schema($value, $args, $param)
    {
    }
    /**
     * @param mixed $value
     * @param array $args
     * @param string $param
     * @return mixed|\WP_Error
     */
    function rest_sanitize_value_from_schema($value, $args, $param = '')
    {
    }
    /**
     * @param array $memo
     * @param string $path
     * @return array
     */
    function rest_preload_api_request($memo, $path)
    {
    }
    /**
     * @param string|array $embed
     * @return true|string[]
     */
    function rest_parse_embed_param($embed)
    {
    }
    /**
     * @param array|object $response_data
     * @param array $schema
     * @param string $context
     * @return array|object
     */
    function rest_filter_response_by_context($response_data, $schema, $context)
    {
    }
    /**
     * @param array $schema
     * @return array
     */
    function rest_default_additional_properties_to_false($schema)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string
     */
    function rest_get_route_for_post($post)
    {
    }
    /**
     * @param string $post_type
     * @return string
     */
    function rest_get_route_for_post_type_items($post_type)
    {
    }
    /**
     * @param int|\WP_Term $term
     * @return string
     */
    function rest_get_route_for_term($term)
    {
    }
    /**
     * @param string $taxonomy
     * @return string
     */
    function rest_get_route_for_taxonomy_items($taxonomy)
    {
    }
    /**
     * @return string
     */
    function rest_get_queried_resource_route()
    {
    }
    /**
     * @param array $schema
     * @param string $method
     * @return array
     */
    function rest_get_endpoint_args_for_schema($schema, $method = \WP_REST_Server::CREATABLE)
    {
    }
    /**
     * @param \WP_Error $error
     * @return \WP_REST_Response
     */
    function rest_convert_error_to_response($error)
    {
    }
    /**
     * @return bool
     */
    function wp_is_rest_endpoint()
    {
    }
    /**
     * Post revision functions.
     *
     * @package WordPress
     * @subpackage Post_Revisions
     */
    /**
     * @param array|\WP_Post $post
     * @param bool $deprecated
     * @return string[]
     */
    function _wp_post_revision_fields($post = array(), $deprecated = \false)
    {
    }
    /**
     * @param array|\WP_Post $post
     * @param bool $autosave
     * @return array
     */
    function _wp_post_revision_data($post = array(), $autosave = \false)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @param bool $update
     * @phpstan-return void
     */
    function wp_save_post_revision_on_insert($post_id, $post, $update)
    {
    }
    /**
     * @param int $post_id
     * @return int|\WP_Error|void
     */
    function wp_save_post_revision($post_id)
    {
    }
    /**
     * @param int $post_id
     * @param int $user_id
     * @return \WP_Post|false
     */
    function wp_get_post_autosave($post_id, $user_id = 0)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int|false
     */
    function wp_is_post_revision($post)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return int|false
     */
    function wp_is_post_autosave($post)
    {
    }
    /**
     * @param int|\WP_Post|array|null $post
     * @param bool $autosave
     * @return int|\WP_Error
     */
    function _wp_put_post_revision($post = \null, $autosave = \false)
    {
    }
    /**
     * @param int $revision_id
     * @param int $post_id
     * @phpstan-return void
     */
    function wp_save_revisioned_meta_fields($revision_id, $post_id)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param string $output
     * @param string $filter
     * @return \WP_Post|array|null
     */
    function wp_get_post_revision(&$post, $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param int|\WP_Post $revision
     * @param array $fields
     * @return int|false|null
     */
    function wp_restore_post_revision($revision, $fields = \null)
    {
    }
    /**
     * @param int $post_id
     * @param int $revision_id
     * @phpstan-return void
     */
    function wp_restore_post_revision_meta($post_id, $revision_id)
    {
    }
    /**
     * @param int $source_post_id
     * @param int $target_post_id
     * @param string $meta_key
     */
    function _wp_copy_post_meta($source_post_id, $target_post_id, $meta_key)
    {
    }
    /**
     * @param string $post_type
     * @return array
     */
    function wp_post_revision_meta_keys($post_type)
    {
    }
    /**
     * @param bool $post_has_changed
     * @param \WP_Post $last_revision
     * @param \WP_Post $post
     * @return bool
     */
    function wp_check_revisioned_meta_fields_have_changed($post_has_changed, \WP_Post $last_revision, \WP_Post $post)
    {
    }
    /**
     * @param int|\WP_Post $revision
     * @return \WP_Post|false|null
     */
    function wp_delete_post_revision($revision)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @param array|null $args
     * @return \WP_Post[]|int[]
     */
    function wp_get_post_revisions($post = 0, $args = \null)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-return \WP_Error|array{
     *   latest_id: int,
     *   count: int,
     * }
     */
    function wp_get_latest_revision_id_and_total_count($post = 0)
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string|null
     */
    function wp_get_post_revisions_url($post = 0)
    {
    }
    /**
     * @param \WP_Post $post
     * @return bool
     */
    function wp_revisions_enabled($post)
    {
    }
    /**
     * @param \WP_Post $post
     * @return int
     */
    function wp_revisions_to_keep($post)
    {
    }
    /**
     * @param \WP_Post $post
     * @return \WP_Post|false
     */
    function _set_preview($post)
    {
    }
    function _show_post_preview()
    {
    }
    /**
     * @param array $terms
     * @param int $post_id
     * @param string $taxonomy
     * @return array
     */
    function _wp_preview_terms_filter($terms, $post_id, $taxonomy)
    {
    }
    /**
     * @param null|array|string $value
     * @param int $post_id
     * @param string $meta_key
     * @return null|array
     */
    function _wp_preview_post_thumbnail_filter($value, $post_id, $meta_key)
    {
    }
    /**
     * @param \WP_Post $revision
     * @return int|false
     */
    function _wp_get_post_revision_version($revision)
    {
    }
    /**
     * @param \WP_Post $post
     * @param array $revisions
     * @return bool
     */
    function _wp_upgrade_revisions_of_post($post, $revisions)
    {
    }
    /**
     * @param mixed $value
     * @param int $object_id
     * @param string $meta_key
     * @param bool $single
     * @return mixed
     */
    function _wp_preview_meta_filter($value, $object_id, $meta_key, $single)
    {
    }
    /**
     * @param string $regex
     * @param string|array $query
     * @phpstan-param 'top'|'bottom' $after
     */
    function add_rewrite_rule($regex, $query, $after = 'bottom')
    {
    }
    /**
     * @param string $tag
     * @param string $regex
     * @param string $query
     * @phpstan-return void
     */
    function add_rewrite_tag($tag, $regex, $query = '')
    {
    }
    /**
     * @param string $tag
     */
    function remove_rewrite_tag($tag)
    {
    }
    /**
     * @param string $name
     * @param string $struct
     * @param array $args
     * @phpstan-param array{
     *   with_front?: bool,
     *   ep_mask?: int,
     *   paged?: bool,
     *   feed?: bool,
     *   forcomments?: bool,
     *   walk_dirs?: bool,
     *   endpoints?: bool,
     * } $args See WP_Rewrite::add_permastruct()
     */
    function add_permastruct($name, $struct, $args = array())
    {
    }
    /**
     * @param string $name
     */
    function remove_permastruct($name)
    {
    }
    /**
     * @param string $feedname
     * @param callable $callback
     * @return string
     */
    function add_feed($feedname, $callback)
    {
    }
    /**
     * @param bool $hard
     */
    function flush_rewrite_rules($hard = \true)
    {
    }
    /**
     * @param string $name
     * @param int $places
     * @param string|bool $query_var
     */
    function add_rewrite_endpoint($name, $places, $query_var = \true)
    {
    }
    /**
     * @param string $base
     * @return string
     */
    function _wp_filter_taxonomy_base($base)
    {
    }
    /**
     * @param array $query_vars
     * @return array
     */
    function wp_resolve_numeric_slug_conflicts($query_vars = array())
    {
    }
    /**
     * @param string $url
     * @return int
     */
    function url_to_postid($url)
    {
    }
    /**
     * Robots template functions.
     *
     * @package WordPress
     * @subpackage Robots
     * @since 5.7.0
     */
    /**
     * @phpstan-return void
     */
    function wp_robots()
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_noindex(array $robots)
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_noindex_embeds(array $robots)
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_noindex_search(array $robots)
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_no_robots(array $robots)
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_sensitive_page(array $robots)
    {
    }
    /**
     * @param array $robots
     * @return array
     */
    function wp_robots_max_image_preview_large(array $robots)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     * @param bool $force_uncompressed
     */
    function wp_register_tinymce_scripts($scripts, $force_uncompressed = \false)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     */
    function wp_default_packages_vendor($scripts)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     * @param string[] $tests
     * @return string
     */
    function wp_get_script_polyfill($scripts, $tests)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     * @phpstan-return void
     */
    function wp_register_development_scripts($scripts)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     */
    function wp_default_packages_scripts($scripts)
    {
    }
    /**
     * @param \WP_Scripts $scripts
     */
    function wp_default_packages_inline_scripts($scripts)
    {
    }
    function wp_tinymce_inline_scripts()
    {
    }
    /**
     * @param \WP_Scripts $scripts
     */
    function wp_default_packages($scripts)
    {
    }
    /**
     * @param string $type
     * @return string
     */
    function wp_scripts_get_suffix($type = '')
    {
    }
    /**
     * @param \WP_Scripts $scripts
     */
    function wp_default_scripts($scripts)
    {
    }
    /**
     * @param \WP_Styles $styles
     */
    function wp_default_styles($styles)
    {
    }
    /**
     * @param string[] $js_array
     * @return string[]
     */
    function wp_prototype_before_jquery($js_array)
    {
    }
    function wp_just_in_time_script_localization()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_localize_jquery_ui_datepicker()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_localize_community_events()
    {
    }
    /**
     * @param string $src
     * @phpstan-param 'colors'|'colors-rtl' $handle
     * @return string|false
     */
    function wp_style_loader_src($src, $handle)
    {
    }
    /**
     * @return array
     */
    function print_head_scripts()
    {
    }
    /**
     * @return array
     */
    function print_footer_scripts()
    {
    }
    function _print_scripts()
    {
    }
    /**
     * @return array
     */
    function wp_print_head_scripts()
    {
    }
    function _wp_footer_scripts()
    {
    }
    function wp_print_footer_scripts()
    {
    }
    function wp_enqueue_scripts()
    {
    }
    /**
     * @return array
     */
    function print_admin_styles()
    {
    }
    /**
     * @return array|void
     */
    function print_late_styles()
    {
    }
    function _print_styles()
    {
    }
    function script_concat_settings()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_common_block_scripts_and_styles()
    {
    }
    /**
     * @param array $nodes
     * @return array
     */
    function wp_filter_out_block_nodes($nodes)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_global_styles()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_global_styles_custom_css()
    {
    }
    /**
     * @return bool
     */
    function wp_should_load_block_editor_scripts_and_styles()
    {
    }
    /**
     * @return bool
     */
    function wp_should_load_separate_core_block_assets()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_registered_block_scripts_and_styles()
    {
    }
    function enqueue_block_styles_assets()
    {
    }
    function enqueue_editor_block_styles_assets()
    {
    }
    function wp_enqueue_editor_block_directory_assets()
    {
    }
    function wp_enqueue_editor_format_library_assets()
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function wp_sanitize_script_attributes($attributes)
    {
    }
    /**
     * @param array $attributes
     * @return string
     */
    function wp_get_script_tag($attributes)
    {
    }
    /**
     * @param array $attributes
     */
    function wp_print_script_tag($attributes)
    {
    }
    /**
     * @param string $data
     * @param array $attributes
     * @return string
     */
    function wp_get_inline_script_tag($data, $attributes = array())
    {
    }
    /**
     * @param string $data
     * @param array $attributes
     */
    function wp_print_inline_script_tag($data, $attributes = array())
    {
    }
    function wp_maybe_inline_styles()
    {
    }
    /**
     * @param string $css
     * @param string $stylesheet_url
     * @return string
     */
    function _wp_normalize_relative_css_links($css, $stylesheet_url)
    {
    }
    function wp_enqueue_global_styles_css_custom_properties()
    {
    }
    /**
     * @param string $style
     * @param int $priority
     */
    function wp_enqueue_block_support_styles($style, $priority = 10)
    {
    }
    /**
     * @phpstan-param array{
     *   optimize?: bool,
     *   prettify?: bool,
     * } $options
     * @phpstan-return void
     */
    function wp_enqueue_stored_styles($options = array())
    {
    }
    /**
     * @param string $block_name
     * @phpstan-param array{
     *   handle?: string,
     *   src?: string|false,
     *   deps?: string[],
     *   ver?: string|bool|null,
     *   media?: string,
     *   path?: string|null,
     * } $args
     */
    function wp_enqueue_block_style($block_name, $args)
    {
    }
    function wp_enqueue_classic_theme_styles()
    {
    }
    /**
     * @param array $editor_settings
     * @return array
     */
    function wp_add_editor_classic_theme_styles($editor_settings)
    {
    }
    /**
     * @param string $contents
     * @return string
     */
    function wp_remove_surrounding_empty_script_tags($contents)
    {
    }
    /**
     * Script Modules API: Script Module functions
     *
     * @since 6.5.0
     *
     * @package WordPress
     * @subpackage Script Modules
     */
    /**
     * @return \WP_Script_Modules
     */
    function wp_script_modules() : \WP_Script_Modules
    {
    }
    /**
     * @param string $id
     * @param string $src
     * @phpstan-param array<int|string, array{
     *   id: string,
     *   import?: string,
     * }> $deps
     * @param string|false|null $version
     */
    function wp_register_script_module(string $id, string $src, array $deps = array(), $version = \false)
    {
    }
    /**
     * @param string $id
     * @param string $src
     * @phpstan-param array<int|string, array{
     *   id: string,
     *   import?: string,
     * }> $deps
     * @param string|false|null $version
     */
    function wp_enqueue_script_module(string $id, string $src = '', array $deps = array(), $version = \false)
    {
    }
    /**
     * @param string $id
     */
    function wp_dequeue_script_module(string $id)
    {
    }
    /**
     * @param string $id
     */
    function wp_deregister_script_module(string $id)
    {
    }
    /**
     * @param string $tag
     * @param callable $callback
     * @phpstan-return void
     */
    function add_shortcode($tag, $callback)
    {
    }
    /**
     * @param string $tag
     */
    function remove_shortcode($tag)
    {
    }
    function remove_all_shortcodes()
    {
    }
    /**
     * @param string $tag
     * @return bool
     */
    function shortcode_exists($tag)
    {
    }
    /**
     * @param string $content
     * @param string $tag
     * @return bool
     */
    function has_shortcode($content, $tag)
    {
    }
    /**
     * @param string $content
     * @return string[]
     */
    function get_shortcode_tags_in_content($content)
    {
    }
    /**
     * @param string $content
     * @param bool $ignore_html
     * @return string
     */
    function apply_shortcodes($content, $ignore_html = \false)
    {
    }
    /**
     * @param string $content
     * @param bool $ignore_html
     * @return string
     */
    function do_shortcode($content, $ignore_html = \false)
    {
    }
    /**
     * @return string
     */
    function _filter_do_shortcode_context()
    {
    }
    /**
     * @param array $tagnames
     * @return string
     */
    function get_shortcode_regex($tagnames = \null)
    {
    }
    /**
     * @phpstan-param array{
     *   0: string,
     *   1: string,
     *   2: string,
     *   3: string,
     *   4: string,
     *   5: string,
     *   6: string,
     * } $m
     * @return string
     */
    function do_shortcode_tag($m)
    {
    }
    /**
     * @param string $content
     * @param bool $ignore_html
     * @param array $tagnames
     * @return string
     */
    function do_shortcodes_in_html_tags($content, $ignore_html, $tagnames)
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function unescape_invalid_shortcodes($content)
    {
    }
    /**
     * @return string
     */
    function get_shortcode_atts_regex()
    {
    }
    /**
     * @param string $text
     * @return array
     */
    function shortcode_parse_atts($text)
    {
    }
    /**
     * @param array $pairs
     * @param array $atts
     * @param string $shortcode
     * @return array
     */
    function shortcode_atts($pairs, $atts, $shortcode = '')
    {
    }
    /**
     * @param string $content
     * @return string
     */
    function strip_shortcodes($content)
    {
    }
    /**
     * @param array $m
     * @return string|false
     */
    function strip_shortcode_tag($m)
    {
    }
    /**
     * Sitemaps: Public functions
     *
     * This file contains a variety of public functions developers can use to interact with
     * the XML Sitemaps API.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * @return \WP_Sitemaps
     */
    function wp_sitemaps_get_server()
    {
    }
    /**
     * @return \WP_Sitemaps_Provider[]
     */
    function wp_get_sitemap_providers()
    {
    }
    /**
     * @param string $name
     * @param \WP_Sitemaps_Provider $provider
     * @return bool
     */
    function wp_register_sitemap_provider($name, \WP_Sitemaps_Provider $provider)
    {
    }
    /**
     * @param string $object_type
     * @return int
     */
    function wp_sitemaps_get_max_urls($object_type)
    {
    }
    /**
     * @param string $name
     * @param string $subtype_name
     * @param int $page
     * @return string|false
     */
    function get_sitemap_url($name, $subtype_name = '', $page = 1)
    {
    }
    /**
     * Style engine: Public functions
     *
     * This file contains a variety of public functions developers can use to interact with
     * the Style Engine API.
     *
     * @package WordPress
     * @subpackage StyleEngine
     * @since 6.1.0
     */
    /**
     * @param array $block_styles
     * @phpstan-param array{
     *   context?: string|null,
     *   convert_vars_to_classnames?: bool,
     *   selector?: string,
     * } $options
     * @phpstan-return array{
     *   css: string,
     *   declarations: string[],
     *   classnames: string,
     * }
     */
    function wp_style_engine_get_styles($block_styles, $options = array())
    {
    }
    /**
     * @phpstan-param array<int|string, array{
     *   rules_group: string,
     *   selector: string,
     *   declarations: string[],
     * }> $css_rules
     * @phpstan-param array{
     *   context?: string|null,
     *   optimize?: bool,
     *   prettify?: bool,
     * } $options
     * @return string
     */
    function wp_style_engine_get_stylesheet_from_css_rules($css_rules, $options = array())
    {
    }
    /**
     * @param string $context
     * @phpstan-param array{
     *   optimize?: bool,
     *   prettify?: bool,
     * } $options
     * @return string
     */
    function wp_style_engine_get_stylesheet_from_context($context, $options = array())
    {
    }
    function create_initial_taxonomies()
    {
    }
    /**
     * @param array $args
     * @phpstan-param 'names'|'objects' $output
     * @phpstan-param 'and'|'or' $operator
     * @return string[]|\WP_Taxonomy[]
     * @phpstan-return ($output is 'names' ? array<int, string> : array<int, \WP_Taxonomy>)
     */
    function get_taxonomies($args = array(), $output = 'names', $operator = 'and')
    {
    }
    /**
     * @param string|string[]|\WP_Post $object_type
     * @phpstan-param 'names'|'objects' $output
     * @return string[]|\WP_Taxonomy[]
     * @phpstan-return ($output is 'names' ? array<int, string> : array<string, \WP_Taxonomy>)
     */
    function get_object_taxonomies($object_type, $output = 'names')
    {
    }
    /**
     * @param string $taxonomy
     * @return \WP_Taxonomy|false
     */
    function get_taxonomy($taxonomy)
    {
    }
    /**
     * @param string $taxonomy
     * @return bool
     */
    function taxonomy_exists($taxonomy)
    {
    }
    /**
     * @param string $taxonomy
     * @return bool
     */
    function is_taxonomy_hierarchical($taxonomy)
    {
    }
    /**
     * @param string $taxonomy
     * @param array|string $object_type
     * @phpstan-param array{
     *   labels?: string[],
     *   description?: string,
     *   public?: bool,
     *   publicly_queryable?: bool,
     *   hierarchical?: bool,
     *   show_ui?: bool,
     *   show_in_menu?: bool,
     *   show_in_nav_menus?: bool,
     *   show_in_rest?: bool,
     *   rest_base?: string,
     *   rest_namespace?: string,
     *   rest_controller_class?: string,
     *   show_tagcloud?: bool,
     *   show_in_quick_edit?: bool,
     *   show_admin_column?: bool,
     *   meta_box_cb?: bool|callable,
     *   meta_box_sanitize_cb?: callable,
     *   capabilities?: array{
     *     manage_terms?: string,
     *     edit_terms?: string,
     *     delete_terms?: string,
     *     assign_terms?: string,
     *   },
     *   rewrite?: bool|array{
     *     slug?: string,
     *     with_front?: bool,
     *     hierarchical?: bool,
     *     ep_mask?: int,
     *   },
     *   query_var?: string|bool,
     *   update_count_callback?: callable,
     *   default_term?: string|array{
     *     name?: string,
     *     slug?: string,
     *     description?: string,
     *   },
     *   sort?: bool,
     *   args?: array,
     *   _builtin?: bool,
     * } $args
     * @return \WP_Taxonomy|\WP_Error
     */
    function register_taxonomy($taxonomy, $object_type, $args = array())
    {
    }
    /**
     * @param string $taxonomy
     * @return true|\WP_Error
     */
    function unregister_taxonomy($taxonomy)
    {
    }
    /**
     * @param \WP_Taxonomy $tax
     * @phpstan-return object{
     *   name: string,
     *   singular_name: string,
     *   search_items: string,
     *   popular_items: string,
     *   all_items: string,
     *   parent_item: string,
     *   parent_item_colon: string,
     *   name_field_description: string,
     *   slug_field_description: string,
     *   parent_field_description: string,
     *   desc_field_description: string,
     *   edit_item: string,
     *   view_item: string,
     *   update_item: string,
     *   add_new_item: string,
     *   new_item_name: string,
     *   template_name: string,
     *   separate_items_with_commas: string,
     *   add_or_remove_items: string,
     *   choose_from_most_used: string,
     *   not_found: string,
     *   no_terms: string,
     *   filter_by_item: string,
     *   items_list_navigation: string,
     *   items_list: string,
     *   most_used: string,
     *   back_to_items: string,
     *   item_link: string,
     *   item_link_description: string,
     * }
     */
    function get_taxonomy_labels($tax)
    {
    }
    /**
     * @param string $taxonomy
     * @param string $object_type
     * @return bool
     */
    function register_taxonomy_for_object_type($taxonomy, $object_type)
    {
    }
    /**
     * @param string $taxonomy
     * @param string $object_type
     * @return bool
     */
    function unregister_taxonomy_for_object_type($taxonomy, $object_type)
    {
    }
    //
    // Term API.
    //
    /**
     * @param int|int[] $term_ids
     * @param string|string[] $taxonomies
     * @phpstan-param array{
     *   order?: string,
     * } $args
     * @return string[]|\WP_Error
     */
    function get_objects_in_term($term_ids, $taxonomies, $args = array())
    {
    }
    /**
     * @param array $tax_query
     * @param string $primary_table
     * @param string $primary_id_column
     * @return string[]
     */
    function get_tax_sql($tax_query, $primary_table, $primary_id_column)
    {
    }
    /**
     * @param int|\WP_Term|object $term
     * @param string $taxonomy
     * @param string $output
     * @param string $filter
     * @return \WP_Term|array|\WP_Error|null
     * @phpstan-param 'OBJECT'|'ARRAY_A'|'ARRAY_N' $output
     * @phpstan-return ($output is 'ARRAY_A' ? array<string, string|int>|\WP_Error|null : ($output is 'ARRAY_N' ? list<string|int>|\WP_Error|null : \WP_Term|\WP_Error|null))
     */
    function get_term($term, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param string $field
     * @param string|int $value
     * @param string $taxonomy
     * @param string $output
     * @param string $filter
     * @return \WP_Term|array|false
     * @phpstan-return ($output is 'ARRAY_A' ? array<string, string|int>|\WP_Error|false : ($output is 'ARRAY_N' ? list<string|int>|\WP_Error|false : \WP_Term|\WP_Error|false))
     */
    function get_term_by($field, $value, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
    {
    }
    /**
     * @param int $term_id
     * @param string $taxonomy
     * @return array|\WP_Error
     */
    function get_term_children($term_id, $taxonomy)
    {
    }
    /**
     * @param string $field
     * @param int|\WP_Term $term
     * @param string $taxonomy
     * @param string $context
     * @return string|int|null|\WP_Error
     */
    function get_term_field($field, $term, $taxonomy = '', $context = 'display')
    {
    }
    /**
     * @param int|object $id
     * @param string $taxonomy
     * @return string|int|null|\WP_Error
     */
    function get_term_to_edit($id, $taxonomy)
    {
    }
    /**
     * @param array|string $args
     * @param array|string $deprecated
     * @return \WP_Term[]|int[]|string[]|string|\WP_Error
     * @phpstan-param array{
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Term_Query::__construct()
     */
    function get_terms($args = array(), $deprecated = '')
    {
    }
    /**
     * @param int $term_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false|\WP_Error
     */
    function add_term_meta($term_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param int $term_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_term_meta($term_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $term_id
     * @param string $key
     * @param bool $single
     * @return mixed
     */
    function get_term_meta($term_id, $key = '', $single = \false)
    {
    }
    /**
     * @param int $term_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool|\WP_Error
     */
    function update_term_meta($term_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @param array $term_ids
     * @return array|false
     */
    function update_termmeta_cache($term_ids)
    {
    }
    /**
     * @param array $term_ids
     * @phpstan-return void
     */
    function wp_lazyload_term_meta(array $term_ids)
    {
    }
    /**
     * @param int $term_id
     * @return array|false
     */
    function has_term_meta($term_id)
    {
    }
    /**
     * @param string $taxonomy
     * @param string $meta_key
     * @param array $args
     * @return bool
     * @phpstan-param array{
     *   object_subtype?: string,
     *   type?: string,
     *   description?: string,
     *   single?: bool,
     *   default?: mixed,
     *   sanitize_callback?: callable,
     *   auth_callback?: callable,
     *   show_in_rest?: bool|array,
     *   revisions_enabled?: bool,
     * } $args See register_meta()
     */
    function register_term_meta($taxonomy, $meta_key, array $args)
    {
    }
    /**
     * @param string $taxonomy
     * @param string $meta_key
     * @return bool
     */
    function unregister_term_meta($taxonomy, $meta_key)
    {
    }
    /**
     * @param int|string $term
     * @param string $taxonomy
     * @param int $parent_term
     * @return mixed
     * @phpstan-return ($term is 0 ? 0 : ($term is '' ? null : ($taxonomy is '' ? string|null : array{term_id: string, term_taxonomy_id: string}|null)))
     */
    function term_exists($term, $taxonomy = '', $parent_term = \null)
    {
    }
    /**
     * @param int|object $term1
     * @param int|object $term2
     * @param string $taxonomy
     * @return bool
     */
    function term_is_ancestor_of($term1, $term2, $taxonomy)
    {
    }
    /**
     * @param array|object $term
     * @param string $taxonomy
     * @phpstan-param 'raw'|'edit'|'db'|'display'|'rss'|'attribute'|'js' $context
     * @return array|object
     * @phpstan-template T of array|object
     * @phpstan-param T $term
     * @phpstan-return T
     */
    function sanitize_term($term, $taxonomy, $context = 'display')
    {
    }
    /**
     * @param string $field
     * @param string $value
     * @param int $term_id
     * @param string $taxonomy
     * @phpstan-param 'raw'|'edit'|'db'|'display'|'rss'|'attribute'|'js' $context
     * @return mixed
     */
    function sanitize_term_field($field, $value, $term_id, $taxonomy, $context)
    {
    }
    /**
     * @param array|string $args
     * @param array|string $deprecated
     * @return string|\WP_Error
     * @phpstan-param array{
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Term_Query::__construct()
     */
    function wp_count_terms($args = array(), $deprecated = '')
    {
    }
    /**
     * @param int $object_id
     * @param string|array $taxonomies
     */
    function wp_delete_object_term_relationships($object_id, $taxonomies)
    {
    }
    /**
     * @param int $term
     * @param string $taxonomy
     * @phpstan-param array{
     *   default?: int,
     *   force_default?: bool,
     * } $args
     * @return bool|int|\WP_Error
     */
    function wp_delete_term($term, $taxonomy, $args = array())
    {
    }
    /**
     * @param int $cat_id
     * @return bool|int|\WP_Error
     */
    function wp_delete_category($cat_id)
    {
    }
    /**
     * @param int|int[] $object_ids
     * @param string|string[] $taxonomies
     * @param array|string $args
     * @return \WP_Term[]|int[]|string[]|string|\WP_Error
     * @phpstan-param array{
     *   taxonomy?: string|string[],
     *   object_ids?: int|int[],
     *   orderby?: string,
     *   order?: string,
     *   hide_empty?: bool|int,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   exclude_tree?: int[]|string,
     *   number?: int|string,
     *   offset?: int,
     *   fields?: string,
     *   count?: bool,
     *   name?: string|string[],
     *   slug?: string|string[],
     *   term_taxonomy_id?: int|int[],
     *   hierarchical?: bool,
     *   search?: string,
     *   name__like?: string,
     *   description__like?: string,
     *   pad_counts?: bool,
     *   get?: string,
     *   child_of?: int,
     *   parent?: int,
     *   childless?: bool,
     *   cache_domain?: string,
     *   cache_results?: bool,
     *   update_term_meta_cache?: bool,
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     * } $args See WP_Term_Query::__construct()
     */
    function wp_get_object_terms($object_ids, $taxonomies, $args = array())
    {
    }
    /**
     * @param string $term
     * @param string $taxonomy
     * @phpstan-param array{
     *   alias_of?: string,
     *   description?: string,
     *   parent?: int,
     *   slug?: string,
     * } $args
     * @phpstan-return \WP_Error|array{
     *   term_id: int,
     *   term_taxonomy_id: int|string,
     * }
     */
    function wp_insert_term($term, $taxonomy, $args = array())
    {
    }
    /**
     * @param int $object_id
     * @param string|int|array $terms
     * @param string $taxonomy
     * @param bool $append
     * @return array|\WP_Error
     */
    function wp_set_object_terms($object_id, $terms, $taxonomy, $append = \false)
    {
    }
    /**
     * @param int $object_id
     * @param string|int|array $terms
     * @param array|string $taxonomy
     * @return array|\WP_Error
     */
    function wp_add_object_terms($object_id, $terms, $taxonomy)
    {
    }
    /**
     * @param int $object_id
     * @param string|int|array $terms
     * @param string $taxonomy
     * @return bool|\WP_Error
     */
    function wp_remove_object_terms($object_id, $terms, $taxonomy)
    {
    }
    /**
     * @param string $slug
     * @param object $term
     * @return string
     */
    function wp_unique_term_slug($slug, $term)
    {
    }
    /**
     * @param int $term_id
     * @param string $taxonomy
     * @phpstan-param array{
     *   alias_of?: string,
     *   description?: string,
     *   parent?: int,
     *   slug?: string,
     * } $args
     * @return array|\WP_Error
     */
    function wp_update_term($term_id, $taxonomy, $args = array())
    {
    }
    /**
     * @param bool $defer
     * @return bool
     */
    function wp_defer_term_counting($defer = \null)
    {
    }
    /**
     * @param int|array $terms
     * @param string $taxonomy
     * @param bool $do_deferred
     * @return bool
     */
    function wp_update_term_count($terms, $taxonomy, $do_deferred = \false)
    {
    }
    /**
     * @param array $terms
     * @param string $taxonomy
     * @return true
     */
    function wp_update_term_count_now($terms, $taxonomy)
    {
    }
    //
    // Cache.
    //
    /**
     * @param int|array $object_ids
     * @param array|string $object_type
     * @phpstan-return void
     */
    function clean_object_term_cache($object_ids, $object_type)
    {
    }
    /**
     * @param int|int[] $ids
     * @param string $taxonomy
     * @param bool $clean_taxonomy
     * @phpstan-return void
     */
    function clean_term_cache($ids, $taxonomy = '', $clean_taxonomy = \true)
    {
    }
    /**
     * @param string $taxonomy
     */
    function clean_taxonomy_cache($taxonomy)
    {
    }
    /**
     * @param int $id
     * @param string $taxonomy
     * @return bool|\WP_Term[]|\WP_Error
     */
    function get_object_term_cache($id, $taxonomy)
    {
    }
    /**
     * @param string|int[] $object_ids
     * @param string|string[] $object_type
     * @return void|false
     */
    function update_object_term_cache($object_ids, $object_type)
    {
    }
    /**
     * @param \WP_Term[] $terms
     * @param string $taxonomy
     */
    function update_term_cache($terms, $taxonomy = '')
    {
    }
    //
    // Private.
    //
    /**
     * @param string $taxonomy
     * @return array
     */
    function _get_term_hierarchy($taxonomy)
    {
    }
    /**
     * @param int $term_id
     * @param array $terms
     * @param string $taxonomy
     * @param array $ancestors
     * @return array|\WP_Error
     */
    function _get_term_children($term_id, $terms, $taxonomy, &$ancestors = array())
    {
    }
    /**
     * @param object[]|\WP_Term[] $terms
     * @param string $taxonomy
     * @phpstan-return void
     */
    function _pad_term_counts(&$terms, $taxonomy)
    {
    }
    /**
     * @param array $term_ids
     * @param bool $update_meta_cache
     */
    function _prime_term_caches($term_ids, $update_meta_cache = \true)
    {
    }
    //
    // Default callbacks.
    //
    /**
     * @param int[] $terms
     * @param \WP_Taxonomy $taxonomy
     */
    function _update_post_term_count($terms, $taxonomy)
    {
    }
    /**
     * @param int[] $terms
     * @param \WP_Taxonomy $taxonomy
     */
    function _update_generic_term_count($terms, $taxonomy)
    {
    }
    /**
     * @param int|object $term_id
     * @param int|object $term_taxonomy_id
     * @param bool $record
     * @return int|\WP_Error
     */
    function _split_shared_term($term_id, $term_taxonomy_id, $record = \true)
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_batch_split_terms()
    {
    }
    function _wp_check_for_scheduled_split_terms()
    {
    }
    /**
     * @param int $term_id
     * @param int $new_term_id
     * @param int $term_taxonomy_id
     * @param string $taxonomy
     * @phpstan-return void
     */
    function _wp_check_split_default_terms($term_id, $new_term_id, $term_taxonomy_id, $taxonomy)
    {
    }
    /**
     * @param int $term_id
     * @param int $new_term_id
     * @param int $term_taxonomy_id
     * @param string $taxonomy
     */
    function _wp_check_split_terms_in_menus($term_id, $new_term_id, $term_taxonomy_id, $taxonomy)
    {
    }
    /**
     * @param int $term_id
     * @param int $new_term_id
     * @param int $term_taxonomy_id
     * @param string $taxonomy
     * @phpstan-return void
     */
    function _wp_check_split_nav_menu_terms($term_id, $new_term_id, $term_taxonomy_id, $taxonomy)
    {
    }
    /**
     * @param int $old_term_id
     * @return array
     */
    function wp_get_split_terms($old_term_id)
    {
    }
    /**
     * @param int $old_term_id
     * @param string $taxonomy
     * @return int|false
     */
    function wp_get_split_term($old_term_id, $taxonomy)
    {
    }
    /**
     * @param int $term_id
     * @return bool
     */
    function wp_term_is_shared($term_id)
    {
    }
    /**
     * @param \WP_Term|int|string $term
     * @param string $taxonomy
     * @return string|\WP_Error
     */
    function get_term_link($term, $taxonomy = '')
    {
    }
    /**
     * @phpstan-param array{
     *   post?: int|WP_Post,
     *   before?: string,
     *   sep?: string,
     *   after?: string,
     * } $args
     */
    function the_taxonomies($args = array())
    {
    }
    /**
     * @param int|\WP_Post $post
     * @phpstan-param array{
     *   template?: string,
     *   term_template?: string,
     * } $args
     * @return string[]
     */
    function get_the_taxonomies($post = 0, $args = array())
    {
    }
    /**
     * @param int|\WP_Post $post
     * @return string[]
     */
    function get_post_taxonomies($post = 0)
    {
    }
    /**
     * @param int $object_id
     * @param string $taxonomy
     * @param int|string|int[]|string[] $terms
     * @return bool|\WP_Error
     */
    function is_object_in_term($object_id, $taxonomy, $terms = \null)
    {
    }
    /**
     * @param string $object_type
     * @param string $taxonomy
     * @return bool
     */
    function is_object_in_taxonomy($object_type, $taxonomy)
    {
    }
    /**
     * @param int $object_id
     * @param string $object_type
     * @phpstan-param 'post_type'|'taxonomy' $resource_type
     * @return int[]
     */
    function get_ancestors($object_id = 0, $object_type = '', $resource_type = '')
    {
    }
    /**
     * @param int $term_id
     * @param string $taxonomy
     * @return int|false
     */
    function wp_get_term_taxonomy_parent_id($term_id, $taxonomy)
    {
    }
    /**
     * @param int $parent_term
     * @param int $term_id
     * @param string $taxonomy
     * @return int
     */
    function wp_check_term_hierarchy_for_loops($parent_term, $term_id, $taxonomy)
    {
    }
    /**
     * @param string|\WP_Taxonomy $taxonomy
     * @return bool
     */
    function is_taxonomy_viewable($taxonomy)
    {
    }
    /**
     * @param int|\WP_Term $term
     * @return bool
     */
    function is_term_publicly_viewable($term)
    {
    }
    function wp_cache_set_terms_last_changed()
    {
    }
    /**
     * @param mixed $check
     * @return mixed
     */
    function wp_check_term_meta_support_prefilter($check)
    {
    }
    /**
     * Template loading functions.
     *
     * @package WordPress
     * @subpackage Template
     */
    /**
     * @param string $type
     * @param string[] $templates
     * @return string
     */
    function get_query_template($type, $templates = array())
    {
    }
    /**
     * @return string
     */
    function get_index_template()
    {
    }
    /**
     * @return string
     */
    function get_404_template()
    {
    }
    /**
     * @return string
     */
    function get_archive_template()
    {
    }
    /**
     * @return string
     */
    function get_post_type_archive_template()
    {
    }
    /**
     * @return string
     */
    function get_author_template()
    {
    }
    /**
     * @return string
     */
    function get_category_template()
    {
    }
    /**
     * @return string
     */
    function get_tag_template()
    {
    }
    /**
     * @return string
     */
    function get_taxonomy_template()
    {
    }
    /**
     * @return string
     */
    function get_date_template()
    {
    }
    /**
     * @return string
     */
    function get_home_template()
    {
    }
    /**
     * @return string
     */
    function get_front_page_template()
    {
    }
    /**
     * @return string
     */
    function get_privacy_policy_template()
    {
    }
    /**
     * @return string
     */
    function get_page_template()
    {
    }
    /**
     * @return string
     */
    function get_search_template()
    {
    }
    /**
     * @return string
     */
    function get_single_template()
    {
    }
    /**
     * @return string
     */
    function get_embed_template()
    {
    }
    /**
     * @return string
     */
    function get_singular_template()
    {
    }
    /**
     * @return string
     */
    function get_attachment_template()
    {
    }
    function wp_set_template_globals()
    {
    }
    /**
     * @param string|array $template_names
     * @param bool $load
     * @param bool $load_once
     * @param array $args
     * @return string
     */
    function locate_template($template_names, $load = \false, $load_once = \true, $args = array())
    {
    }
    /**
     * @param string $_template_file
     * @param bool $load_once
     * @param array $args
     */
    function load_template($_template_file, $load_once = \true, $args = array())
    {
    }
    /**
     * Theme previews using the Site Editor for block themes.
     *
     * @package WordPress
     */
    /**
     * @param string $current_stylesheet
     * @return string
     */
    function wp_get_theme_preview_path($current_stylesheet = \null)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_attach_theme_preview_middleware()
    {
    }
    function wp_block_theme_activate_nonce()
    {
    }
    function wp_initialize_theme_preview_hooks()
    {
    }
    /**
     * @param int $post_id
     * @phpstan-return void
     */
    function wp_set_unique_slug_on_create_template_part($post_id)
    {
    }
    /**
     * @param string $override_slug
     * @param string $slug
     * @param int $post_id
     * @param string $post_status
     * @param string $post_type
     * @return string
     */
    function wp_filter_wp_template_unique_post_slug($override_slug, $slug, $post_id, $post_status, $post_type)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_enqueue_block_template_skip_link()
    {
    }
    function wp_enable_block_templates()
    {
    }
    /**
     * Theme, template, and stylesheet functions.
     *
     * @package WordPress
     * @subpackage Theme
     */
    /**
     * @phpstan-param array{
     *   errors?: mixed,
     *   allowed?: mixed,
     *   blog_id?: int,
     * } $args
     * @return \WP_Theme[]
     */
    function wp_get_themes($args = array())
    {
    }
    /**
     * @param string $stylesheet
     * @param string $theme_root
     * @return \WP_Theme
     */
    function wp_get_theme($stylesheet = '', $theme_root = '')
    {
    }
    /**
     * @param bool $clear_update_cache
     */
    function wp_clean_themes_cache($clear_update_cache = \true)
    {
    }
    /**
     * @return bool
     */
    function is_child_theme()
    {
    }
    /**
     * @return string
     */
    function get_stylesheet()
    {
    }
    /**
     * @return string
     */
    function get_stylesheet_directory()
    {
    }
    /**
     * @return string
     */
    function get_stylesheet_directory_uri()
    {
    }
    /**
     * @return string
     */
    function get_stylesheet_uri()
    {
    }
    /**
     * @return string
     */
    function get_locale_stylesheet_uri()
    {
    }
    /**
     * @return string
     */
    function get_template()
    {
    }
    /**
     * @return string
     */
    function get_template_directory()
    {
    }
    /**
     * @return string
     */
    function get_template_directory_uri()
    {
    }
    /**
     * @return array|string
     */
    function get_theme_roots()
    {
    }
    /**
     * @param string $directory
     * @return bool
     */
    function register_theme_directory($directory)
    {
    }
    /**
     * @param bool $force
     * @return array|false
     */
    function search_theme_directories($force = \false)
    {
    }
    /**
     * @param string $stylesheet_or_template
     * @return string
     */
    function get_theme_root($stylesheet_or_template = '')
    {
    }
    /**
     * @param string $stylesheet_or_template
     * @param string $theme_root
     * @return string
     */
    function get_theme_root_uri($stylesheet_or_template = '', $theme_root = '')
    {
    }
    /**
     * @param string $stylesheet_or_template
     * @param bool $skip_cache
     * @return string
     */
    function get_raw_theme_root($stylesheet_or_template, $skip_cache = \false)
    {
    }
    /**
     * @phpstan-return void
     */
    function locale_stylesheet()
    {
    }
    /**
     * @param string $stylesheet
     */
    function switch_theme($stylesheet)
    {
    }
    /**
     * @return bool
     */
    function validate_current_theme()
    {
    }
    /**
     * @param string $stylesheet
     * @return true|\WP_Error
     */
    function validate_theme_requirements($stylesheet)
    {
    }
    /**
     * @return array
     */
    function get_theme_mods()
    {
    }
    /**
     * @param string $name
     * @param mixed $default_value
     * @return mixed
     */
    function get_theme_mod($name, $default_value = \false)
    {
    }
    /**
     * @param string $name
     * @param mixed $value
     * @return bool
     */
    function set_theme_mod($name, $value)
    {
    }
    /**
     * @param string $name
     * @phpstan-return void
     */
    function remove_theme_mod($name)
    {
    }
    function remove_theme_mods()
    {
    }
    /**
     * @return string
     */
    function get_header_textcolor()
    {
    }
    function header_textcolor()
    {
    }
    /**
     * @return bool
     */
    function display_header_text()
    {
    }
    /**
     * @return bool
     */
    function has_header_image()
    {
    }
    /**
     * @return string|false
     */
    function get_header_image()
    {
    }
    /**
     * @param array $attr
     * @return string
     */
    function get_header_image_tag($attr = array())
    {
    }
    /**
     * @param array $attr
     */
    function the_header_image_tag($attr = array())
    {
    }
    /**
     * @return object
     */
    function _get_random_header_data()
    {
    }
    /**
     * @return string
     */
    function get_random_header_image()
    {
    }
    /**
     * @param string $type
     * @return bool
     */
    function is_random_header_image($type = 'any')
    {
    }
    function header_image()
    {
    }
    /**
     * @return array
     */
    function get_uploaded_header_images()
    {
    }
    /**
     * @return object
     */
    function get_custom_header()
    {
    }
    /**
     * @param array $headers
     */
    function register_default_headers($headers)
    {
    }
    /**
     * @param string|array $header
     * @return bool|void
     */
    function unregister_default_headers($header)
    {
    }
    /**
     * @return bool
     */
    function has_header_video()
    {
    }
    /**
     * @return string|false
     */
    function get_header_video_url()
    {
    }
    function the_header_video_url()
    {
    }
    /**
     * @return array
     */
    function get_header_video_settings()
    {
    }
    /**
     * @return bool
     */
    function has_custom_header()
    {
    }
    /**
     * @return bool
     */
    function is_header_video_active()
    {
    }
    /**
     * @return string
     */
    function get_custom_header_markup()
    {
    }
    /**
     * @phpstan-return void
     */
    function the_custom_header_markup()
    {
    }
    /**
     * @return string
     */
    function get_background_image()
    {
    }
    function background_image()
    {
    }
    /**
     * @return string
     */
    function get_background_color()
    {
    }
    function background_color()
    {
    }
    /**
     * @phpstan-return void
     */
    function _custom_background_cb()
    {
    }
    function wp_custom_css_cb()
    {
    }
    /**
     * @param string $stylesheet
     * @return \WP_Post|null
     */
    function wp_get_custom_css_post($stylesheet = '')
    {
    }
    /**
     * @param string $stylesheet
     * @return string
     */
    function wp_get_custom_css($stylesheet = '')
    {
    }
    /**
     * @param string $css
     * @phpstan-param array{
     *   preprocessed?: string,
     *   stylesheet?: string,
     * } $args
     * @return \WP_Post|\WP_Error
     */
    function wp_update_custom_css_post($css, $args = array())
    {
    }
    /**
     * @param array|string $stylesheet
     */
    function add_editor_style($stylesheet = 'editor-style.css')
    {
    }
    /**
     * @return bool
     */
    function remove_editor_styles()
    {
    }
    /**
     * @return string[]
     */
    function get_editor_stylesheets()
    {
    }
    /**
     * @return array
     */
    function get_theme_starter_content()
    {
    }
    /**
     * @param string $feature
     * @param mixed $args
     * @return void|false
     */
    function add_theme_support($feature, ...$args)
    {
    }
    function _custom_header_background_just_in_time()
    {
    }
    function _custom_logo_header_styles()
    {
    }
    /**
     * @param string $feature
     * @param mixed $args
     * @return mixed
     * @param string $feature
     */
    function get_theme_support($feature, ...$args)
    {
    }
    /**
     * @param string $feature
     * @return bool|void
     * @param string $feature
     */
    function remove_theme_support($feature)
    {
    }
    /**
     * @param string $feature
     * @return bool
     * @param string $feature
     */
    function _remove_theme_support($feature)
    {
    }
    /**
     * @param string $feature
     * @param mixed $args
     * @return bool
     * @param string $feature
     */
    function current_theme_supports($feature, ...$args)
    {
    }
    /**
     * @param string $feature
     * @param string $file
     * @return bool
     * @param string $feature
     */
    function require_if_theme_supports($feature, $file)
    {
    }
    /**
     * @param string $feature
     * @phpstan-param array{
     *   type?: string,
     *   variadic?: bool,
     *   description?: string,
     *   show_in_rest?: bool|array{
     *     schema: array,
     *     name: string,
     *     prepare_callback: callable,
     *   },
     * } $args
     * @return true|\WP_Error
     * @param string $feature
     */
    function register_theme_feature($feature, $args = array())
    {
    }
    /**
     * @return array[]
     */
    function get_registered_theme_features()
    {
    }
    /**
     * @param string $feature
     * @return array|null
     * @param string $feature
     */
    function get_registered_theme_feature($feature)
    {
    }
    /**
     * @param int $id
     */
    function _delete_attachment_theme_mod($id)
    {
    }
    function check_theme_switched()
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_customize_include()
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $changeset_post
     * @phpstan-return void
     */
    function _wp_customize_publish_changeset($new_status, $old_status, $changeset_post)
    {
    }
    /**
     * @param array $post_data
     * @param array $supplied_post_data
     * @return array
     */
    function _wp_customize_changeset_filter_insert_post_data($post_data, $supplied_post_data)
    {
    }
    function _wp_customize_loader_settings()
    {
    }
    /**
     * @param string $stylesheet
     * @return string
     */
    function wp_customize_url($stylesheet = '')
    {
    }
    function wp_customize_support_script()
    {
    }
    /**
     * @return bool
     */
    function is_customize_preview()
    {
    }
    /**
     * @param string $new_status
     * @param string $old_status
     * @param \WP_Post $post
     * @phpstan-return void
     */
    function _wp_keep_alive_customize_changeset_dependent_auto_drafts($new_status, $old_status, $post)
    {
    }
    function create_initial_theme_features()
    {
    }
    /**
     * @return bool
     */
    function wp_is_block_theme()
    {
    }
    /**
     * @param string $element
     * @return string
     */
    function wp_theme_get_element_class_name($element)
    {
    }
    function _add_default_theme_supports()
    {
    }
    /**
     * A simple set of functions to check the WordPress.org Version Update service.
     *
     * @package WordPress
     * @since 2.3.0
     */
    /**
     * @param array $extra_stats
     * @param bool $force_check
     * @phpstan-return void
     */
    function wp_version_check($extra_stats = array(), $force_check = \false)
    {
    }
    /**
     * @param array $extra_stats
     */
    function wp_update_plugins($extra_stats = array())
    {
    }
    /**
     * @param array $extra_stats
     * @phpstan-return void
     */
    function wp_update_themes($extra_stats = array())
    {
    }
    function wp_maybe_auto_update()
    {
    }
    /**
     * @return object[]
     */
    function wp_get_translation_updates()
    {
    }
    /**
     * @return array
     */
    function wp_get_update_data()
    {
    }
    /**
     * @phpstan-return void
     */
    function _maybe_update_core()
    {
    }
    /**
     * @phpstan-return void
     */
    function _maybe_update_plugins()
    {
    }
    /**
     * @phpstan-return void
     */
    function _maybe_update_themes()
    {
    }
    function wp_schedule_update_checks()
    {
    }
    function wp_clean_update_cache()
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_delete_all_temp_backups()
    {
    }
    /**
     * @return void|\WP_Error
     */
    function _wp_delete_all_temp_backups()
    {
    }
    /**
     * Core User API
     *
     * @package WordPress
     * @subpackage Users
     */
    /**
     * @phpstan-param array{
     *   user_login?: string,
     *   user_password?: string,
     *   remember?: bool,
     * } $credentials
     * @param string|bool $secure_cookie
     * @return \WP_User|\WP_Error
     */
    function wp_signon($credentials = array(), $secure_cookie = '')
    {
    }
    /**
     * @param \WP_User|\WP_Error|null $user
     * @param string $username
     * @param string $password
     * @return \WP_User|\WP_Error
     */
    function wp_authenticate_username_password($user, $username, $password)
    {
    }
    /**
     * @param \WP_User|\WP_Error|null $user
     * @param string $email
     * @param string $password
     * @return \WP_User|\WP_Error
     */
    function wp_authenticate_email_password($user, $email, $password)
    {
    }
    /**
     * @param \WP_User|\WP_Error|null $user
     * @param string $username
     * @param string $password
     * @return \WP_User|\WP_Error
     */
    function wp_authenticate_cookie($user, $username, $password)
    {
    }
    /**
     * @param \WP_User|\WP_Error|null $input_user
     * @param string $username
     * @param string $password
     * @return \WP_User|\WP_Error|null
     */
    function wp_authenticate_application_password($input_user, $username, $password)
    {
    }
    /**
     * @param int|false $input_user
     * @return int|false
     */
    function wp_validate_application_password($input_user)
    {
    }
    /**
     * @param \WP_User|\WP_Error|null $user
     * @return \WP_User|\WP_Error
     */
    function wp_authenticate_spam_check($user)
    {
    }
    /**
     * @param int|false $user_id
     * @return int|false
     */
    function wp_validate_logged_in_cookie($user_id)
    {
    }
    /**
     * @param int $userid
     * @param array|string $post_type
     * @param bool $public_only
     * @return string
     */
    function count_user_posts($userid, $post_type = 'post', $public_only = \false)
    {
    }
    /**
     * @param int[] $users
     * @param string|string[] $post_type
     * @param bool $public_only
     * @return string[]
     */
    function count_many_users_posts($users, $post_type = 'post', $public_only = \false)
    {
    }
    //
    // User option functions.
    //
    /**
     * @return int
     */
    function get_current_user_id()
    {
    }
    /**
     * @param string $option
     * @param int $user
     * @param string $deprecated
     * @return mixed
     */
    function get_user_option($option, $user = 0, $deprecated = '')
    {
    }
    /**
     * @param int $user_id
     * @param string $option_name
     * @param mixed $newvalue
     * @param bool $is_global
     * @return int|bool
     */
    function update_user_option($user_id, $option_name, $newvalue, $is_global = \false)
    {
    }
    /**
     * @param int $user_id
     * @param string $option_name
     * @param bool $is_global
     * @return bool
     */
    function delete_user_option($user_id, $option_name, $is_global = \false)
    {
    }
    /**
     * @param array $args
     * @return array
     * @phpstan-param array{
     *   blog_id?: int,
     *   role?: string|string[],
     *   role__in?: string[],
     *   role__not_in?: string[],
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     *   capability?: string|string[],
     *   capability__in?: string[],
     *   capability__not_in?: string[],
     *   include?: int[],
     *   exclude?: int[],
     *   search?: string,
     *   search_columns?: string[],
     *   orderby?: string|array,
     *   order?: string,
     *   offset?: int,
     *   number?: int,
     *   paged?: int,
     *   count_total?: bool,
     *   fields?: string|string[],
     *   who?: string,
     *   has_published_posts?: bool|string[],
     *   nicename?: string,
     *   nicename__in?: string[],
     *   nicename__not_in?: string[],
     *   login?: string,
     *   login__in?: string[],
     *   login__not_in?: string[],
     *   cache_results?: bool,
     * } $args See WP_User_Query::prepare_query()
     */
    function get_users($args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   orderby?: string,
     *   order?: string,
     *   number?: int,
     *   exclude_admin?: bool,
     *   show_fullname?: bool,
     *   feed?: string,
     *   feed_image?: string,
     *   feed_type?: string,
     *   echo?: bool,
     *   style?: string,
     *   html?: bool,
     *   exclude?: string,
     *   include?: string,
     * } $args
     * @return string|null
     */
    function wp_list_users($args = array())
    {
    }
    /**
     * @param int $user_id
     * @param bool $all
     * @return object[]
     */
    function get_blogs_of_user($user_id, $all = \false)
    {
    }
    /**
     * @param int $user_id
     * @param int $blog_id
     * @return bool
     */
    function is_user_member_of_blog($user_id = 0, $blog_id = 0)
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param bool $unique
     * @return int|false
     */
    function add_user_meta($user_id, $meta_key, $meta_value, $unique = \false)
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @return bool
     */
    function delete_user_meta($user_id, $meta_key, $meta_value = '')
    {
    }
    /**
     * @param int $user_id
     * @param string $key
     * @param bool $single
     * @return mixed
     */
    function get_user_meta($user_id, $key = '', $single = \false)
    {
    }
    /**
     * @param int $user_id
     * @param string $meta_key
     * @param mixed $meta_value
     * @param mixed $prev_value
     * @return int|bool
     */
    function update_user_meta($user_id, $meta_key, $meta_value, $prev_value = '')
    {
    }
    /**
     * @phpstan-param 'time'|'memory' $strategy
     * @param int|null $site_id
     * @phpstan-return array{
     *   total_users: int,
     *   avail_roles: int[],
     * }
     */
    function count_users($strategy = 'time', $site_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     * @return int
     */
    function get_user_count($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     * @return bool
     */
    function wp_maybe_update_user_counts($network_id = \null)
    {
    }
    /**
     * @param int|null $network_id
     * @return bool
     */
    function wp_update_user_counts($network_id = \null)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_schedule_update_user_counts()
    {
    }
    /**
     * @param int|null $network_id
     * @return bool
     */
    function wp_is_large_user_count($network_id = \null)
    {
    }
    //
    // Private helper functions.
    //
    /**
     * @param int $for_user_id
     * @phpstan-return void
     */
    function setup_userdata($for_user_id = 0)
    {
    }
    /**
     * @phpstan-param array{
     *   show_option_all?: string,
     *   show_option_none?: string,
     *   option_none_value?: int|string,
     *   hide_if_only_one_author?: string,
     *   orderby?: string,
     *   order?: string,
     *   include?: int[]|string,
     *   exclude?: int[]|string,
     *   multi?: bool|int,
     *   show?: string,
     *   echo?: int|bool,
     *   selected?: int,
     *   include_selected?: bool,
     *   name?: string,
     *   id?: string,
     *   class?: string,
     *   blog_id?: int,
     *   who?: string,
     *   role?: string|string[],
     *   role__in?: string[],
     *   role__not_in?: string[],
     *   capability?: string|string[],
     *   capability__in?: string[],
     *   capability__not_in?: string[],
     *   blog_id?: int,
     *   role?: string|string[],
     *   role__in?: string[],
     *   role__not_in?: string[],
     *   meta_key?: string|string[],
     *   meta_value?: string|string[],
     *   meta_compare?: string,
     *   meta_compare_key?: string,
     *   meta_type?: string,
     *   meta_type_key?: string,
     *   meta_query?: array,
     *   capability?: string|string[],
     *   capability__in?: string[],
     *   capability__not_in?: string[],
     *   include?: int[],
     *   exclude?: int[],
     *   search?: string,
     *   search_columns?: string[],
     *   orderby?: string|array,
     *   order?: string,
     *   offset?: int,
     *   number?: int,
     *   paged?: int,
     *   count_total?: bool,
     *   fields?: string|string[],
     *   who?: string,
     *   has_published_posts?: bool|string[],
     *   nicename?: string,
     *   nicename__in?: string[],
     *   nicename__not_in?: string[],
     *   login?: string,
     *   login__in?: string[],
     *   login__not_in?: string[],
     *   cache_results?: bool,
     * } $args
     * @return string
     */
    function wp_dropdown_users($args = '')
    {
    }
    /**
     * @param string $field
     * @param mixed $value
     * @param int $user_id
     * @param string $context
     * @return mixed
     */
    function sanitize_user_field($field, $value, $user_id, $context)
    {
    }
    /**
     * @param object|\WP_User $user
     * @return void|false
     */
    function update_user_caches($user)
    {
    }
    /**
     * @param \WP_User|int $user
     * @phpstan-return void
     */
    function clean_user_cache($user)
    {
    }
    /**
     * @param string $username
     * @return int|false
     */
    function username_exists($username)
    {
    }
    /**
     * @param string $email
     * @return int|false
     */
    function email_exists($email)
    {
    }
    /**
     * @param string $username
     * @return bool
     */
    function validate_username($username)
    {
    }
    /**
     * @phpstan-param \WP_User|object|array{
     *   ID?: int,
     *   user_pass?: string,
     *   user_login?: string,
     *   user_nicename?: string,
     *   user_url?: string,
     *   user_email?: string,
     *   display_name?: string,
     *   nickname?: string,
     *   first_name?: string,
     *   last_name?: string,
     *   description?: string,
     *   rich_editing?: string,
     *   syntax_highlighting?: string,
     *   comment_shortcuts?: string,
     *   admin_color?: string,
     *   use_ssl?: bool,
     *   user_registered?: string,
     *   user_activation_key?: string,
     *   spam?: bool,
     *   show_admin_bar_front?: string,
     *   role?: string,
     *   locale?: string,
     *   meta_input?: array,
     * } $userdata
     * @return int|\WP_Error
     */
    function wp_insert_user($userdata)
    {
    }
    /**
     * @param array|object|\WP_User $userdata
     * @return int|\WP_Error
     */
    function wp_update_user($userdata)
    {
    }
    /**
     * @param string $username
     * @param string $password
     * @param string $email
     * @return int|\WP_Error
     */
    function wp_create_user($username, $password, $email = '')
    {
    }
    /**
     * @param \WP_User $user
     * @return string[]
     */
    function _get_additional_user_keys($user)
    {
    }
    /**
     * @param \WP_User|null $user
     * @return string[]
     */
    function wp_get_user_contact_methods($user = \null)
    {
    }
    /**
     * @param \WP_User|null $user
     * @return string[]
     */
    function _wp_get_user_contactmethods($user = \null)
    {
    }
    /**
     * @return string
     */
    function wp_get_password_hint()
    {
    }
    /**
     * @param \WP_User $user
     * @return string|\WP_Error
     */
    function get_password_reset_key($user)
    {
    }
    /**
     * @param string $key
     * @param string $login
     * @return \WP_User|\WP_Error
     */
    function check_password_reset_key($key, $login)
    {
    }
    /**
     * @param string $user_login
     * @return true|\WP_Error
     */
    function retrieve_password($user_login = \null)
    {
    }
    /**
     * @param \WP_User $user
     * @param string $new_pass
     */
    function reset_password($user, $new_pass)
    {
    }
    /**
     * @param string $user_login
     * @param string $user_email
     * @return int|\WP_Error
     */
    function register_new_user($user_login, $user_email)
    {
    }
    /**
     * @param int $user_id
     * @phpstan-param 'admin'|'user'|'both' $notify
     */
    function wp_send_new_user_notifications($user_id, $notify = 'both')
    {
    }
    /**
     * @return string
     */
    function wp_get_session_token()
    {
    }
    /**
     * @return array
     */
    function wp_get_all_sessions()
    {
    }
    function wp_destroy_current_session()
    {
    }
    function wp_destroy_other_sessions()
    {
    }
    function wp_destroy_all_sessions()
    {
    }
    /**
     * @param int|null $site_id
     * @return string[]
     */
    function wp_get_users_with_no_role($site_id = \null)
    {
    }
    /**
     * @return \WP_User
     */
    function _wp_get_current_user()
    {
    }
    function send_confirmation_on_profile_email()
    {
    }
    function new_user_email_admin_notice()
    {
    }
    /**
     * @return string[]
     */
    function _wp_privacy_action_request_types()
    {
    }
    /**
     * @param array[] $exporters
     * @return array[]
     */
    function wp_register_user_personal_data_exporter($exporters)
    {
    }
    /**
     * @param string $email_address
     * @phpstan-return array{
     *   data: array[],
     *   done: bool,
     * }
     */
    function wp_user_personal_data_exporter($email_address)
    {
    }
    /**
     * @param int $request_id
     * @phpstan-return void
     */
    function _wp_privacy_account_request_confirmed($request_id)
    {
    }
    /**
     * @param int $request_id
     * @phpstan-return void
     */
    function _wp_privacy_send_request_confirmation_notification($request_id)
    {
    }
    /**
     * @param int $request_id
     * @phpstan-return void
     */
    function _wp_privacy_send_erasure_fulfillment_notification($request_id)
    {
    }
    /**
     * @param int $request_id
     * @return string
     */
    function _wp_privacy_account_request_confirmed_message($request_id)
    {
    }
    /**
     * @param string $email_address
     * @param string $action_name
     * @param array $request_data
     * @param string $status
     * @return int|\WP_Error
     */
    function wp_create_user_request($email_address = '', $action_name = '', $request_data = array(), $status = 'pending')
    {
    }
    /**
     * @param string $action_name
     * @return string
     */
    function wp_user_request_action_description($action_name)
    {
    }
    /**
     * @param string $request_id
     * @return true|\WP_Error
     */
    function wp_send_user_request($request_id)
    {
    }
    /**
     * @param int $request_id
     * @return string
     */
    function wp_generate_user_request_key($request_id)
    {
    }
    /**
     * @param string $request_id
     * @param string $key
     * @return true|\WP_Error
     */
    function wp_validate_user_request_key($request_id, $key)
    {
    }
    /**
     * @param int $request_id
     * @return \WP_User_Request|false
     */
    function wp_get_user_request($request_id)
    {
    }
    /**
     * @return bool
     */
    function wp_is_application_passwords_supported()
    {
    }
    /**
     * @return bool
     */
    function wp_is_application_passwords_available()
    {
    }
    /**
     * @param int|\WP_User $user
     * @return bool
     */
    function wp_is_application_passwords_available_for_user($user)
    {
    }
    function wp_register_persisted_preferences_meta()
    {
    }
    function wp_cache_set_users_last_changed()
    {
    }
    /**
     * @param int|\WP_User $user
     * @return bool|\WP_Error
     */
    function wp_is_password_reset_allowed_for_user($user)
    {
    }
    /**
     * @return bool
     */
    function wp_is_mobile()
    {
    }
    //
    // Template tags & API functions.
    //
    /**
     * @param string|\WP_Widget $widget
     */
    function register_widget($widget)
    {
    }
    /**
     * @param string|\WP_Widget $widget
     */
    function unregister_widget($widget)
    {
    }
    /**
     * @param int $number
     * @phpstan-param array{
     *   id?: string,
     *   name?: string,
     * } $args
     */
    function register_sidebars($number = 1, $args = array())
    {
    }
    /**
     * @phpstan-param array{
     *   name?: string,
     *   id?: string,
     *   description?: string,
     *   class?: string,
     *   before_widget?: string,
     *   after_widget?: string,
     *   before_title?: string,
     *   after_title?: string,
     *   before_sidebar?: string,
     *   after_sidebar?: string,
     *   show_in_rest?: bool,
     * } $args
     * @return string
     */
    function register_sidebar($args = array())
    {
    }
    /**
     * @param string|int $sidebar_id
     */
    function unregister_sidebar($sidebar_id)
    {
    }
    /**
     * @param string|int $sidebar_id
     * @return bool
     */
    function is_registered_sidebar($sidebar_id)
    {
    }
    /**
     * @param int|string $id
     * @param string $name
     * @param callable $output_callback
     * @phpstan-param array{
     *   classname?: string,
     *   description?: string,
     *   show_instance_in_rest?: bool,
     * } $options
     * @param mixed $params
     * @phpstan-return void
     */
    function wp_register_sidebar_widget($id, $name, $output_callback, $options = array(), ...$params)
    {
    }
    /**
     * @param int|string $id
     * @return string|void
     */
    function wp_widget_description($id)
    {
    }
    /**
     * @param string $id
     * @return string|void
     */
    function wp_sidebar_description($id)
    {
    }
    /**
     * @param int|string $id
     */
    function wp_unregister_sidebar_widget($id)
    {
    }
    /**
     * @param int|string $id
     * @param string $name
     * @param callable $control_callback
     * @phpstan-param array{
     *   height?: int,
     *   width?: int,
     *   id_base?: int|string,
     * } $options
     * @param mixed $params
     * @phpstan-return void
     */
    function wp_register_widget_control($id, $name, $control_callback, $options = array(), ...$params)
    {
    }
    /**
     * @param string $id_base
     * @param callable $update_callback
     * @param array $options
     * @param mixed $params
     * @phpstan-return void
     * @phpstan-param array{
     *   height?: int,
     *   width?: int,
     *   id_base?: int|string,
     * } $options See wp_register_widget_control()
     */
    function _register_widget_update_callback($id_base, $update_callback, $options = array(), ...$params)
    {
    }
    /**
     * @param int|string $id
     * @param string $name
     * @param callable $form_callback
     * @param array $options
     * @param mixed $params
     * @phpstan-return void
     * @phpstan-param array{
     *   height?: int,
     *   width?: int,
     *   id_base?: int|string,
     * } $options See wp_register_widget_control()
     */
    function _register_widget_form_callback($id, $name, $form_callback, $options = array(), ...$params)
    {
    }
    /**
     * @param int|string $id
     */
    function wp_unregister_widget_control($id)
    {
    }
    /**
     * @param int|string $index
     * @return bool
     */
    function dynamic_sidebar($index = 1)
    {
    }
    /**
     * @param callable|false $callback
     * @param string|false $widget_id
     * @param string|false $id_base
     * @param bool $skip_inactive
     * @return string|false
     */
    function is_active_widget($callback = \false, $widget_id = \false, $id_base = \false, $skip_inactive = \true)
    {
    }
    /**
     * @return bool
     */
    function is_dynamic_sidebar()
    {
    }
    /**
     * @param string|int $index
     * @return bool
     */
    function is_active_sidebar($index)
    {
    }
    //
    // Internal Functions.
    //
    /**
     * @param bool $deprecated
     * @return array
     */
    function wp_get_sidebars_widgets($deprecated = \true)
    {
    }
    /**
     * @param string $id
     * @return array|null
     */
    function wp_get_sidebar($id)
    {
    }
    /**
     * @param array $sidebars_widgets
     */
    function wp_set_sidebars_widgets($sidebars_widgets)
    {
    }
    /**
     * @return array
     */
    function wp_get_widget_defaults()
    {
    }
    /**
     * @param string $base_name
     * @param string $option_name
     * @param array $settings
     * @return array
     */
    function wp_convert_widget_settings($base_name, $option_name, $settings)
    {
    }
    /**
     * @param string $widget
     * @param array $instance
     * @phpstan-param array{
     *   before_widget?: string,
     *   after_widget?: string,
     *   before_title?: string,
     *   after_title?: string,
     * } $args
     * @phpstan-return void
     */
    function the_widget($widget, $instance = array(), $args = array())
    {
    }
    /**
     * @param string $id
     * @return string
     */
    function _get_widget_id_base($id)
    {
    }
    function _wp_sidebars_changed()
    {
    }
    /**
     * @param string|bool $theme_changed
     * @return array
     */
    function retrieve_widgets($theme_changed = \false)
    {
    }
    /**
     * @param array $existing_sidebars_widgets
     * @return array
     */
    function wp_map_sidebars_widgets($existing_sidebars_widgets)
    {
    }
    /**
     * @param array $sidebars_widgets
     * @param array $allowed_widget_ids
     * @return array
     */
    function _wp_remove_unregistered_widgets($sidebars_widgets, $allowed_widget_ids = array())
    {
    }
    /**
     * @param string|array|object $rss
     * @param array $args
     * @phpstan-return void
     */
    function wp_widget_rss_output($rss, $args = array())
    {
    }
    /**
     * @param array|string $args
     * @param array $inputs
     * @phpstan-param array{number: int, error: bool, title?: string, url?: string, items?: int, show_summary?: int, show_author?: int, show_date?: int} $args
     * @phpstan-param array{title?: bool, url?: bool, items?: bool, show_summary?: bool, show_author?: bool, show_date?: bool} $inputs
     * @phpstan-return void
     */
    function wp_widget_rss_form($args, $inputs = \null)
    {
    }
    /**
     * @param array $widget_rss
     * @param bool $check_feed
     * @return array
     */
    function wp_widget_rss_process($widget_rss, $check_feed = \true)
    {
    }
    /**
     * @phpstan-return void
     */
    function wp_widgets_init()
    {
    }
    function wp_setup_widgets_block_editor()
    {
    }
    /**
     * @return bool
     */
    function wp_use_widgets_block_editor()
    {
    }
    /**
     * @param string $id
     * @return array
     */
    function wp_parse_widget_id($id)
    {
    }
    /**
     * @param string $widget_id
     * @return string|null
     */
    function wp_find_widgets_sidebar($widget_id)
    {
    }
    /**
     * @param string $widget_id
     * @param string $sidebar_id
     */
    function wp_assign_widget_to_sidebar($widget_id, $sidebar_id)
    {
    }
    /**
     * @param string $widget_id
     * @param string $sidebar_id
     * @return string
     */
    function wp_render_widget($widget_id, $sidebar_id)
    {
    }
    /**
     * @param string $id
     * @return string|null
     */
    function wp_render_widget_control($id)
    {
    }
    function wp_check_widget_editor_deps()
    {
    }
    /**
     * @phpstan-return void
     */
    function _wp_block_theme_register_classic_sidebars()
    {
    }
    /**
     * @param string|null $title
     * @param string $message
     * @param \WP_Error|null $wp_error
     */
    function login_header($title = \null, $message = '', $wp_error = \null)
    {
    }
    // End of login_header().
    /**
     * @param string $input_id
     */
    function login_footer($input_id = '')
    {
    }
    function wp_shake_js()
    {
    }
    function wp_login_viewport_meta()
    {
    }
    function do_signup_header()
    {
    }
    function wpmu_signup_stylesheet()
    {
    }
    /**
     * @param string $blogname
     * @param string $blog_title
     * @param \WP_Error|string $errors
     */
    function show_blog_form($blogname = '', $blog_title = '', $errors = '')
    {
    }
    /**
     * @return array
     */
    function validate_blog_form()
    {
    }
    /**
     * @param string $user_name
     * @param string $user_email
     * @param \WP_Error|string $errors
     */
    function show_user_form($user_name = '', $user_email = '', $errors = '')
    {
    }
    /**
     * @return array
     */
    function validate_user_form()
    {
    }
    /**
     * @param string $blogname
     * @param string $blog_title
     * @param \WP_Error|string $errors
     */
    function signup_another_blog($blogname = '', $blog_title = '', $errors = '')
    {
    }
    /**
     * @return null|bool
     */
    function validate_another_blog_signup()
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $blog_title
     * @param string $user_name
     * @param string $user_email
     * @param array $meta
     * @param int $blog_id
     */
    function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = array(), $blog_id = 0)
    {
    }
    /**
     * @param string $user_name
     * @param string $user_email
     * @param \WP_Error|string $errors
     */
    function signup_user($user_name = '', $user_email = '', $errors = '')
    {
    }
    /**
     * @return bool
     */
    function validate_user_signup()
    {
    }
    /**
     * @param string $user_name
     * @param string $user_email
     */
    function confirm_user_signup($user_name, $user_email)
    {
    }
    /**
     * @param string $user_name
     * @param string $user_email
     * @param string $blogname
     * @param string $blog_title
     * @param \WP_Error|string $errors
     */
    function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '')
    {
    }
    /**
     * @return bool
     */
    function validate_blog_signup()
    {
    }
    /**
     * @param string $domain
     * @param string $path
     * @param string $blog_title
     * @param string $user_name
     * @param string $user_email
     * @param array $meta
     */
    function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta = array())
    {
    }
    /**
     * @return string[]
     */
    function signup_get_available_languages()
    {
    }
    /**
     * @param int|bool $error
     * @param string $error_message
     */
    function trackback_response($error = 0, $error_message = '')
    {
    }
    /**
     * @param string $io
     * @param string $msg
     */
    function logIO($io, $msg)
    {
    }
}
namespace {
/**
 * WordPress database abstraction object.
 * @var wpdb
 */
$wpdb = \null;
}
